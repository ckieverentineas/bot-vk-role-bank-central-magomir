import { HearManager } from "@vk-io/hear";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import { answerTimeLimit, chat_id, root, timer_text, timer_text_oper, vk } from '../index';
import { Accessed, Fixed_Number_To_Five, Keyboard_Index, Logger } from "./core/helper";
import { Image_Random} from "./core/imagecpu";
import prisma from "./events/module/prisma_client";
import { User_Info } from "./events/module/tool";
import { Alliance, Item, User } from "@prisma/client";
import { Person_Register, Person_Selector } from "./core/person";
import { Alliance_Add } from "./events/module/alliance";

export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/–õ—é—Ç–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫/, async (context) => {
        if (context.senderId == root) {
            console.log(`Admin ${context.senderId} enter in shopping`)
            const category:any = await prisma.category.findMany({})
            if (category.length == 0) {
                const ans: any = await context.question(
                    `‚úâ –ú–∞–≥–∞–∑–∏–Ω–æ–≤ –µ—â–µ –Ω–µ—Ç`,
                    {   keyboard: Keyboard.builder()
                        .textButton({   label: '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                        payload: {  command: 'new_shop' },
                                        color: 'secondary'                  })
                        .oneTime().inline()                                     }
                )
                if (ans.payload.command == 'new_shop') {
                    const shop: any = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:`)
                    const shop_create = await prisma.category.create({  data: { name: shop.text }   })
                    console.log(`User ${context.senderId} open new shop`)
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`
                    })
                    await context.send(`‚öô –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`)
                }
            } else {
                let keyboard = Keyboard.builder()
                category.forEach(async (element: any) => {
                    keyboard.textButton({   label: element.name,
                                            payload: { command: `${element.id}` }   })
                    .textButton({   label: "–£–¥–∞–ª–∏—Ç—å",
                                    payload: { command: `${element.id}` }   }).row()
                })
                const ans: any = await context.question(`‚úâ –ö—É–¥–∞ –ø–æ–π–¥–µ–º?`,
                    {   keyboard: keyboard
                        .textButton({   label: '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                        payload: { command: 'new_shop' },
                                        color: 'secondary'                  })
                        .oneTime().inline()                                     })
                if (ans.text == "–£–¥–∞–ª–∏—Ç—å") {
                    const shop_delete = await prisma.category.delete({ where: { id: Number(ans.payload.command) } })
                    console.log(`User ${context.senderId} close shop`)
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_delete.name}`
                    })
                    await context.send(`‚öô –£–¥–∞–ª–µ–Ω –º–∞–≥–∞–∑–∏–Ω ${shop_delete.name}`)
                }
                if (ans.payload?.command == 'new_shop') {
                    const shop: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:` )
                    const shop_create: any = await prisma.category.create({ data: { name: shop.text } })
                    console.log(`User ${context.senderId} open new shop`)
                    await context.send(`‚öô –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`)
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`
                    })
                }
                if (category.find((i: any) => i.name == ans.text)) {
                    await context.send(`‚åõ –í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ ${ans.text}`)
                    const item: any= await prisma.item.findMany({ where: { id_category: Number(ans.payload.command) } })
                    if (item.length == 0) {
                        await context.send(`‚úâ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–∏–∞–ª–≤–∫–∏ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç—ã=/`)
                    } else {
                        item.forEach(async (element: any) => {
                            await context.send(`üõç ${element.name} ${element.price}üí∞`,
                                {
                                    keyboard: Keyboard.builder()
                                    .textButton({ label: '–ö—É–ø–∏—Ç—å', payload: { command: `${element.name}` }, color: 'secondary' })
                                    .textButton({ label: '‚úè–ò–º—è', payload: { command: `${element.name}` }, color: 'secondary' })
                                    .textButton({ label: '‚úè–¢–∏–ø', payload: { command: `${element.name}` }, color: 'secondary' })
                                    .oneTime().inline()                                             
                                }
                            )  
                        })
                    }
                    const ans_item: any = await context.question( `‚úâ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`,
                        {   
                            keyboard: Keyboard.builder()
                            .textButton({ label: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', payload: { command: 'new_item' }, color: 'secondary' })
                            .textButton({ label: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º', payload: { command: 'continue' }, color: 'secondary' })
                            .oneTime().inline()
                        }
                    )
                    if (ans_item.payload?.command == 'new_item') {
                        const item_name: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:` )
                        const item_price = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç—å:` )
                        const item_type: any = await context.question( `üß∑ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: \n üïê ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–¥–Ω–∞–∂–¥—ã; \n ‚ôæ ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.`,
                            {   keyboard: Keyboard.builder()
                                .textButton({   label: 'üïê',
                                                payload: { command: 'limited' },
                                                color: 'secondary'                  })
                                .textButton({   label: '‚ôæ',
                                                payload: { command: 'unlimited' },
                                                color: 'secondary'                  })
                                .oneTime().inline()                                     }
                        )
                        const item_create = await prisma.item.create({ data: {  name: item_name.text, price: Number(item_price.text), id_category: Number(ans.payload.command), type: item_type.payload.command } })
                        console.log(`User ${context.senderId} added new item ${item_create.id}`)
                        await context.send(`‚öô –î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${ans.text} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${item_name.text} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${item_price.text} –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
                        await vk.api.messages.send({
                            peer_id: chat_id,
                            random_id: 0,
                            message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${item_name.text} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${item_price.text} –≥–∞–ª–ª–µ–æ–Ω–æ–≤`
                        })
                    }
                    if (ans_item.payload.command == 'continue') { await context.send(`üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å —É –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞`) }
                }
            }
        }
        await Keyboard_Index(context, `üí° –ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Å–æ–º –ø–µ—Ä–µ—É–ª–∫–µ –µ—Å—Ç—å –ø–æ–¥–ø–æ–ª—å–µ?`)
    })
    hearManager.hear(/‚úè–¢–∏–ø/, async (context) => {
        if (context.messagePayload == null && context.senderId != root) {
            await Logger(`In a private chat, stop correction item type user is viewed by admin ${context.senderId}`)
            return
        }
        const item_buy:any = await prisma.item.findFirst({ where: { name: context.messagePayload.command } })
        if (item_buy) {
            const item_type: any = await context.question( `üß∑ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è ${item_buy.name}: \n üïê ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–¥–Ω–∞–∂–¥—ã; \n ‚ôæ ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑. \n –¢–µ–∫—É—â–∏–π —Ç–∏–ø: ${item_buy.type}`,
                {   
                    keyboard: Keyboard.builder()
                    .textButton({ label: 'üïê', payload: { command: 'limited' }, color: 'secondary' })
                    .textButton({ label: '‚ôæ', payload: { command: 'unlimited' }, color: 'secondary' })
                    .oneTime().inline()
                }
            )
            const item_update = await prisma.item.update({ where: { id: item_buy.id }, data: { type: item_type.payload.command } })
            console.log(`Admin ${context.senderId} edit type item ${item_buy.id}`)
            await context.send(`‚öô –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ ${item_buy.name} –∏–∑–º–µ–Ω–µ–Ω —Å ${item_buy.type} –Ω–∞ ${item_update.type}`)
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ ${item_buy.name} —Å ${item_buy.type} –Ω–∞ ${item_update.type}`
            })
        } else {
            console.log(`Admin ${context.senderId} can't edit type item ${item_buy.id}`)
            await context.send(`‚úâ –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å`)
        }
        await Keyboard_Index(context, `üí° –í–æ—Ç –±—ã –≤—Å–µ–≥–¥–∞ –±–µ–∑–ª–∏–º–∏—Ç, –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å?`)
    })
    hearManager.hear(/‚úè–ò–º—è/, async (context) => {
        if (context.messagePayload == null && context.senderId != root) {
            await Logger(`In a private chat, stop correction name item is viewed by admin ${context.senderId}`)
            return
        }
        const item_buy:any = await prisma.item.findFirst({ where: { name: context.messagePayload.command } })
        if (item_buy) {
            const name: any = await context.question(`üß∑ –ü—Ä–µ–¥–º–µ—Ç: ${item_buy.name}.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:`)
            const item_update = await prisma.item.update({ where: { id: item_buy.id }, data: { name: name.text } })
            console.log(`Admin ${context.senderId} edit name item ${item_buy.id}`)
            await context.send(`‚öô –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${item_buy.name} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${item_update.name}`)
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Å ${item_buy.name} –Ω–∞ ${item_update.name}`
            })
        } else {
            console.log(`Admin ${context.senderId} can't edit name item ${item_buy.id}`)
            await context.send(`‚úâ –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å`)
        }
        await Keyboard_Index(context, `üí° –ú–æ–∂–µ—Ç –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?`)
    })
    hearManager.hear(/–æ–ø–µ—Ä–∞—Ü–∏—è/, async (context) => {
        if (await Accessed(context) != 2) {
            return
        }
        let name_check = false
        let uids = null
        while (name_check == false) {
            const uid: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ñ–æ—Ä–º–∞—Ç–∞:\n"UID1 UID2 .. UIDN"`,
                {   
                    keyboard: Keyboard.builder()
                    .textButton({ label: 'üö´–û—Ç–º–µ–Ω–∞', payload: { command: 'limited' }, color: 'secondary' })
                    .oneTime().inline(),
                    timer_text
                }
            )
            if (uid.isTimeout) { return await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!')}
            if (/(?:^|\s)(\d+)(?=\s|$)/g.test(uid.text)) {
                uids = uid.text.match(/(?:^|\s)(\d+)(?=\s|$)/g)
                await context.send(`‚öô –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Å—Å–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º, —Ç–æ–≤–∞—Ä–∏—â –î–û–ö!`)
                name_check = true
            } else {
                if (uid.text == "üö´–û—Ç–º–µ–Ω–∞") { 
                    await context.send(`üí° –û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`) 
                    return await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)
                }
				await context.send(`üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID!`)
			}
        }
        const ans: any = await context.question( `‚úâ –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${JSON.stringify(uids)}`,
            {   
                keyboard: Keyboard.builder()
                .textButton({ label: '+üîò', payload: { command: 'medal_up_many' }, color: 'secondary' })
                .textButton({ label: '‚Äîüîò', payload: { command: 'medal_down_many' }, color: 'secondary' }).row()
                /*.textButton({ label: '+üí∞', payload: { command: 'gold_up_many' }, color: 'secondary' })
                .textButton({ label: '‚Äîüí∞', payload: { command: 'gold_down_many' }, color: 'secondary' }).row()
                .textButton({ label: '+üßô', payload: { command: 'xp_up_many' }, color: 'secondary' })
                .textButton({ label: '‚Äîüßô', payload: { command: 'xp_down_many' }, color: 'secondary' }).row()
                .textButton({ label: '+üí∞üßô', payload: { command: 'multi_up_many' }, color: 'secondary' })
                .textButton({ label: '‚Äîüí∞üßô', payload: { command: 'multi_down_many' }, color: 'secondary' }).row()*/
                .textButton({ label: 'üîô', payload: { command: 'back' }, color: 'secondary' }).row()
                .oneTime().inline(),
                answerTimeLimit                                                                       
            }
        )
        if (ans.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${JSON.stringify(uids)} –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (ans.payload && ans.payload.command != 'back') {
            const config: any = {
                'gold_up_many': Gold_Up_Many,
                'gold_down_many': Gold_Down_Many,
                'xp_up_many': Xp_Up_Many,
                'xp_down_many': Xp_Down_Many,
                'back': Back,
                'multi_up_many': Multi_Up_Many,
                'multi_down_many': Multi_Down_Many,
                'medal_up_many': Medal_Up_Many,
                'medal_down_many': Medal_Down_Many
            }
            const answergot = await config[ans.payload.command](uids)
            
        } else {
            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        await context.send(`‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è "–´" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
        await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)

        //–ú–æ–¥—É–ª—å –º—É–ª—å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        async function Multi_Up_Many(uids: number[]) {
            await context.send(`‚ö† –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
            const gold: number = await Ipnut_Gold() 
            await context.send(`‚ö† –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞`)
            const xp: number = await Ipnut_Gold()
            const messa: string = await Ipnut_Message()
            for (const ids of uids) {
                const id = Number(ids)
                const user_get: User | null = await prisma.user.findFirst({ where: { id } })
                if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
                const money_put = await prisma.user.update({ where: { id: user_get?.id }, data: { gold: { increment: gold }, xp: { increment: xp } } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get?.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${gold}üí∞ ${xp}üßô. \n\n–í–∞—à —Å—á—ë—Ç:\n${money_put.gold}üí∞\n${money_put.xp}üßô\n\n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get?.idvk} blocked chating with bank`)
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `üóø @id${context.senderId}(Admin) > "+üí∞üßô" >\n${user_get?.gold}+${gold}=${money_put.gold}üí∞\n${user_get?.xp}+${xp}=${money_put.xp}üßô\n –¥–ª—è @id${user_get?.idvk}(${user_get?.name}) üß∑: ${messa}`
                })
                await Logger(`In a private chat, user ${user_get?.idvk} got ${gold} gold and ${xp} xp. Him/Her bank now ${money_put.gold} by admin ${context.senderId}`)
            }
        }
        async function Multi_Down_Many(uids: number[]) {
            await context.send(`‚ö† –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–Ω—è—Ç–∏—é –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
            const gold: number = await Ipnut_Gold() 
            await context.send(`‚ö† –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–Ω—è—Ç–∏—é –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞`)
            const xp: number = await Ipnut_Gold()
            const messa: string = await Ipnut_Message()
            for (const ids of uids) {
                const id = Number(ids)
                const user_get: User | null = await prisma.user.findFirst({ where: { id } })
                if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
                const money_put = await prisma.user.update({ where: { id: user_get?.id }, data: { gold: { decrement: gold }, xp: { decrement: xp } } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get?.idvk,
                        random_id: 0,
                        message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${gold}üí∞ ${xp}üßô. \n\n–í–∞—à —Å—á—ë—Ç:\n${money_put.gold}üí∞\n${money_put.xp}üßô\n\n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get?.idvk} blocked chating with bank`)
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `üóø @id${context.senderId}(Admin) > "-üí∞üßô" >\n${user_get?.gold}-${gold}=${money_put.gold}üí∞\n${user_get?.xp}-${xp}=${money_put.xp}üßô\n –¥–ª—è @id${user_get?.idvk}(${user_get?.name}) üß∑: ${messa}`
                })
                await Logger(`In a private chat, user ${user_get?.idvk} left ${gold} gold and ${xp} xp. Him/Her bank now ${money_put.gold} by admin ${context.senderId}`)
            }
        }
        //–ú–æ–¥—É–ª—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        async function Gold_Up_Many(uids: number[]) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            for (const ids of uids) {
                const id = Number(ids)
                const user_get: any = await prisma.user.findFirst({ where: { id } })
                if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
                const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { gold: user_get.gold + count } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get.idvk} blocked chating with bank`)
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `üóø @id${context.senderId}(Admin) > "+üí∞" > ${money_put.gold-count}üí∞+${count}üí∞=${money_put.gold}üí∞ –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                })
                await Logger(`In a private chat, user ${user_get.idvk} got ${count} gold. Him/Her bank now ${money_put.gold} by admin ${context.senderId}`)
            }
        }
        async function Gold_Down_Many(uids: number[]) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            for (const ids of uids) {
                const id = Number(ids)
                const user_get: any = await prisma.user.findFirst({ where: { id } })
                if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
                if (user_get.gold-count >= 0) {
                    const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { gold: user_get.gold - count } })
                    try {
                        await vk.api.messages.send({
                            user_id: user_get.idvk,
                            random_id: 0,
                            message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                        })
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                    } catch (error) {
                        console.log(`User ${user_get.idvk} blocked chating with bank`)
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                    }
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `üóø @id${context.senderId}(Admin) > "-üí∞" > ${money_put.gold+count}üí∞-${count}üí∞=${money_put.gold}üí∞ –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                    })
                    await Logger(`In a private chat, user ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold} by admin ${context.senderId}`)
                } else {
                    const confirmq = await context.question(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} üí∞–≥–∞–ª–ª–µ–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.gold}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.gold-count}`,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({ label: '–î–∞', payload: { command: 'confirm' }, color: 'secondary' })
                            .textButton({ label: '–ù–µ—Ç', payload: { command: 'gold_down' }, color: 'secondary' })
                            .oneTime().inline(),
                            answerTimeLimit
                        }
                    )
                    if (confirmq.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–Ω—è—Ç–∏–µ –≥–∞–ª–ª–µ–æ–Ω–æ–≤ —Å ${user_get.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
                    if (confirmq.payload.command === 'confirm') {
                        const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { gold: user_get.gold - count } })
                        try {
                            await vk.api.messages.send({
                                user_id: user_get.idvk, random_id: 0,
                                message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                            })
                            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                        } catch (error) {
                            console.log(`User ${user_get.idvk} blocked chating with bank`)
                            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                        }
                        await vk.api.messages.send({
                            peer_id: chat_id,
                            random_id: 0,
                            message: `üóø @id${context.senderId}(Admin) > "-üí∞" > ${money_put.gold+count}üí∞-${count}üí∞=${money_put.gold}üí∞ –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                        })
                        await Logger(`In a private chat, user ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold} by admin ${context.senderId}`)
                    } else {
                        await context.send(`üí° –ù—É–∂–Ω–æ –±—ã—Ç—å –∂–µ—Å—Ç—á–µ! –ì—Ä–µ–±–∏ –±–∞–±–ª–æ`)
                    }
                }
            }
        }
        async function Xp_Up_Many(uids: number[]) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            for (const ids of uids) {
                const id = Number(ids)
                const user_get: any = await prisma.user.findFirst({ where: { id } })
                if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
                const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { xp: user_get.xp + count } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get.idvk} blocked chating with bank`)
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `üóø @id${context.senderId}(Admin) > "+üßô" > ${money_put.xp-count}üßô+${count}üßô=${money_put.xp}üßô –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                })
                await Logger(`In a private chat, user ${user_get.idvk} got ${count} MO. Him/Her XP now ${money_put.xp} by admin ${context.senderId}`)
            }
        }
        async function Xp_Down_Many(uids: number[]) {
            const count: number = await Ipnut_Gold() 
            if (count === 0) { return }
            const messa: string = await Ipnut_Message()
            for (const ids of uids) {
                const id = Number(ids)
                const user_get: any = await prisma.user.findFirst({ where: { id } })
                if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
                if (user_get.xp-count >= 0) {
                    const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { xp: user_get.xp - count } })
                    try {
                        await vk.api.messages.send({
                            user_id: user_get.idvk,
                            random_id: 0,
                            message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô  \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                        })
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                    } catch (error) {
                        console.log(`User ${user_get.idvk} blocked chating with bank`)
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                    }
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `üóø @id${context.senderId}(Admin) > "-üßô" > ${money_put.xp+count}üßô-${count}üßô=${money_put.xp}üßô –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                    })
                    await Logger(`In a private chat, user ${user_get.idvk} lost ${count} MO. Him/Her XP now ${money_put.xp} by admin ${context.senderId}`)
                } else {
                    await context.send(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} üßô–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.xp}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.xp-count}? (–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)`)
                    const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { xp: user_get.xp - count } })
                    try {
                        await vk.api.messages.send({
                            user_id: user_get.idvk,
                            random_id: 0,
                            message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô  \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                        })
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                    } catch (error) {
                        console.log(`User ${user_get.idvk} blocked chating with bank`)
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                    }
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `üóø @id${context.senderId}(Admin) > "-üßô" > ${money_put.xp+count}üßô-${count}üßô=${money_put.xp}üßô –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                    })
                    await Logger(`In a private chat, user ${user_get.idvk} lost ${count} MO. Him/Her XP now ${money_put.xp} by admin ${context.senderId}`)
                }
            }
        }
        //–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 
        async function Ipnut_Gold() {
            let golden: number = 0
            let money_check = false
            while (money_check == false) {
                const gold: any = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${ans.text}: `, timer_text_oper)
                if (gold.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ${ans.text} –∏—Å—Ç–µ–∫–ª–æ!`); return golden }
                if (typeof Number(gold.text) == "number") {
                    money_check = true
                    golden = Number(gold.text)
                } 
            }
            return golden
        }
        async function Ipnut_Message() {
            let golden = ''
            let money_check = false
            while (money_check == false) {
                const gold = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ans.text}:`, timer_text_oper)
                if (gold.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ans.text} –∏—Å—Ç–µ–∫–ª–æ!`); return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª–æ –ò–°–õ–ê–ú!" }
                if (gold.text) {
                    money_check = true
                    golden = gold.text
                } 
            }
            return golden
        }
        //–ú–æ–¥—É–ª—å –≤–æ–≤–∑–≤—Ä–∞—Ç–∞
        async function Back(id: number, count: number) {
            await Logger(`In a private chat, canceled operations for user UID ${id} by admin ${context.senderId}`)
            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        // –º–æ–¥—É–ª—å –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        //–ú–æ–¥—É–ª—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        async function Medal_Up_Many(uids: number[]) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            for (const ids of uids) {
                const id = Number(ids)
                const user_get: any = await prisma.user.findFirst({ where: { id } })
                if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
                const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal + count } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get.idvk} blocked chating with bank`)
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `üóø @id${context.senderId}(Admin) > "+üîò" > ${money_put.medal-count}üîò+${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                })
                await Logger(`In a private chat, user ${user_get.idvk} got ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
            }
        }
        async function Medal_Down_Many(uids: number[]) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            for (const ids of uids) {
                const id = Number(ids)
                const user_get: any = await prisma.user.findFirst({ where: { id } })
                if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
                if (user_get.medal-count >= 0) {
                    const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal - count } })
                    try {
                        await vk.api.messages.send({
                            user_id: user_get.idvk,
                            random_id: 0,
                            message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                        })
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                    } catch (error) {
                        console.log(`User ${user_get.idvk} blocked chating with bank`)
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                    }
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `üóø @id${context.senderId}(Admin) > "-üîò" > ${money_put.medal+count}üîò-${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                    })
                    await Logger(`In a private chat, user ${user_get.idvk} lost ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
                } else {
                    const confirmq = await context.question(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count}üîò –∂–µ—Ç–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.medal}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.medal-count}`,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({ label: '–î–∞', payload: { command: 'confirm' }, color: 'secondary' })
                            .textButton({ label: '–ù–µ—Ç', payload: { command: 'medal_down' }, color: 'secondary' })
                            .oneTime().inline(),
                            answerTimeLimit
                        }
                    )
                    if (confirmq.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–Ω—è—Ç–∏–µ –∂–µ—Ç–æ–Ω–æ–≤ —Å ${user_get.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
                    if (confirmq.payload.command === 'confirm') {
                        const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal - count } })
                        try {
                            await vk.api.messages.send({
                                user_id: user_get.idvk, random_id: 0,
                                message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                            })
                            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                        } catch (error) {
                            console.log(`User ${user_get.idvk} blocked chating with bank`)
                            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!`)
                        }
                        await vk.api.messages.send({
                            peer_id: chat_id,
                            random_id: 0,
                            message: `üóø @id${context.senderId}(Admin) > "-üîò" > ${money_put.medal+count}üîò-${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                        })
                        await Logger(`In a private chat, user ${user_get.idvk} lost ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
                    } else {
                        await context.send(`üí° –ù—É–∂–Ω–æ –±—ã—Ç—å –∂–µ—Å—Ç—á–µ! –ì—Ä–µ–±–∏ –∂–µ—Ç–æ–Ω—ã`)
                    }
                }
            }
        }
    })

    hearManager.hear(/–æ–ø–µ—Ä–∞—Ü–∏–∏/, async (context) => {
        if (await Accessed(context) != 2) {
            return
        }
        let name_check = false
		let datas: any = []
		while (name_check == false) {
			const uid: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:`,
                {   
                    keyboard: Keyboard.builder()
                    .textButton({ label: 'üö´–û—Ç–º–µ–Ω–∞', payload: { command: 'limited' }, color: 'secondary' })
                    .oneTime().inline(),
                    timer_text
                }
            )
            if (uid.isTimeout) { return await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!')}
			if (/^(0|-?[1-9]\d{0,5})$/.test(uid.text)) {
                const get_user = await prisma.user.findFirst({ where: { id: Number(uid.text) } })
                if (get_user) {
                    await Logger(`In a private chat, opened ${get_user.idvk} card UID ${get_user.id} is viewed by admin ${context.senderId}`)
                    name_check = true
				    datas.push({id: `${uid.text}`})
                    const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(get_user.id_alliance) } })
                    await context.send(`üè¶ –û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: \n\n üí≥ UID: ${get_user.id} \n üïØ GUID: ${get_user.id_account} \n üîò –ñ–µ—Ç–æ–Ω—ã: ${get_user.medal} \n üë§ –ò–º—è: ${get_user.name} \n üëë –°—Ç–∞—Ç—É—Å: ${get_user.class}  \n üî® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${get_user?.spec} \n üè† –†–æ–ª–µ–≤–∞—è: ${get_user.id_alliance == 0 ? `–°–æ–ª–æ` : get_user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}\n üß∑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: https://vk.com/id${get_user.idvk}` )
                    const inventory = await prisma.inventory.findMany({ where: { id_user: get_user?.id } })
                    let cart = ''
                    const underwear = await prisma.trigger.count({ where: {    id_user: get_user.id, name:   'underwear', value:  false } })
                    if (underwear) { cart = 'üëú –¢—Ä—É—Å—ã –î–æ–º–∞—à–Ω–∏–µ;' }
                    if (inventory.length == 0) {
                        await context.send(`‚úâ –ü–æ–∫—É–ø–∫–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏—Å—å`)
                    } else {
                        for (let i = 0; i < inventory.length; i++) {
                            const element = inventory[i].id_item;
                            const item = await prisma.item.findFirst({ where: { id: element } })
                            cart += `üëú ${item?.name};`
                        }
                        const destructor = cart.split(';').filter(i => i)
                        let compile = []
                        for (let i = 0; i < destructor.length; i++) {
                            let counter = 0
                            for (let j = 0; j < destructor.length; j++) {
                                if (destructor[i] != null) {
                                    if (destructor[i] == destructor[j]) {
                                        counter++
                                    }
                                }
                            }
                            compile.push(`${destructor[i]} x ${counter}\n`)
                            counter = 0
                        }
                        let final: any = Array.from(new Set(compile));
                        await context.send(`‚úâ –ë—ã–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∫—É–ø–∫–∏:: \n ${final.toString().replace(/,/g, '')}`)
                    }
                } else { await context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`) }
			} else {
                if (uid.text == "üö´–û—Ç–º–µ–Ω–∞") { 
                    await context.send(`üí° –û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`) 
                    return await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)
                }
				await context.send(`üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID!`)
			}
		}

        const ans: any = await context.question( `‚úâ –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id}`,
            {   
                keyboard: Keyboard.builder()
                .textButton({ label: '+üîò', payload: { command: 'medal_up' }, color: 'secondary' })
                .textButton({ label: '‚Äîüîò', payload: { command: 'medal_down' }, color: 'secondary' }).row()
                /*.textButton({ label: '+üí∞', payload: { command: 'gold_up' }, color: 'secondary' })
                .textButton({ label: '‚Äîüí∞', payload: { command: 'gold_down' }, color: 'secondary' }).row()
                .textButton({ label: '+üßô', payload: { command: 'xp_up' }, color: 'secondary' })
                .textButton({ label: '‚Äîüßô', payload: { command: 'xp_down' }, color: 'secondary' }).row()
                .textButton({ label: '+üí∞üßô', payload: { command: 'multi_up' }, color: 'secondary' })
                .textButton({ label: '‚Äîüí∞üßô', payload: { command: 'multi_down' }, color: 'secondary' }).row()*/
                .textButton({ label: '‚öô', payload: { command: 'sub_menu' }, color: 'secondary' })
                .textButton({ label: 'üîô', payload: { command: 'back' }, color: 'secondary' }).row()
                .oneTime().inline(),
                answerTimeLimit                                                                       
            }
        )
        if (ans.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id} –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (ans.payload && ans.payload.command != 'back') {
            const config: any = {
                'gold_up': Gold_Up,
                'gold_down': Gold_Down,
                'xp_up': Xp_Up,
                'xp_down': Xp_Down,
                'back': Back,
                'sub_menu': Sub_Menu,
                'multi_up': Multi_Up,
                'multi_down': Multi_Down,
                'medal_up': Medal_Up,
                'medal_down': Medal_Down
            }
            const answergot = await config[ans.payload.command](Number(datas[0].id))
        } else {
            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }
        await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)

        //–ú–æ–¥—É–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        async function Editor(id: number) {
            let answer_check = false
            while (answer_check == false) {
                const answer1: any = await context.question(`‚åõ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏–µ –∑–ª–æ–¥–µ–π—Å—Ç–≤–æ: `,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({ label: '‚úè–ü–æ–ª–æ–∂–µ–Ω–∏–µ', payload: { command: 'edit_class' }, color: 'secondary' }).row()
                        .textButton({ label: '‚úè–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', payload: { command: 'edit_spec' }, color: 'secondary' }).row()
                        .textButton({ label: '‚úè–§–ò–û', payload: { command: 'edit_name' }, color: 'secondary' }).row()
                        .textButton({ label: '‚úè–ê–ª—å—è–Ω—Å', payload: { command: 'edit_alliance' }, color: 'secondary' }).row()
                        .textButton({ label: 'üîô', payload: { command: 'back' }, color: 'secondary' })
                        .oneTime().inline(),
                        answerTimeLimit
                    }
                )
                if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (!answer1.payload) {
                    await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                } else {
                    if (answer1.payload && answer1.payload.command != 'back') {
                        answer_check = true
                        const config: any = {
                            'edit_class': Edit_Class,
                            'edit_spec': Edit_Spec,
                            'edit_name': Edit_Name,
                            'edit_alliance': Edit_Alliance
                        }
                        await config[answer1.payload.command](id)
                    } else {
                        answer_check = true
                        await context.send(`‚öô –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`)
                    }
                }
            }
        }
        async function Edit_Name(id: number){
            const user: any = await prisma.user.findFirst({
                where: {
                    id: id
                }
            })
            let name_check = false
            const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
            const alli_sel = `${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}`
            while (name_check == false) {
                const name: any = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤ ${alli_sel}. –î–ª—è ${user.name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤:`, timer_text)
                if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è ${user.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (name.text.length <= 64) {
                    name_check = true
                    const update_name = await prisma.user.update({ where: { id: user.id }, data: { name: name.text } })
                    if (update_name) {
                        await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ –∏–º–µ–Ω–∏ —Å ${user.name} –Ω–∞ ${update_name.name}.`)
                        try {
                            await vk.api.messages.send({
                                user_id: user.idvk,
                                random_id: 0,
                                message: `‚öô –í–∞—à–µ –∏–º—è –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.name} –Ω–∞ ${update_name.name}.`
                            })
                            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                        } catch (error) {
                            console.log(`User ${user.idvk} blocked chating with bank`)
                        }
                        await vk.api.messages.send({
                            peer_id: chat_id,
                            random_id: 0,
                            message: `‚öô @id${context.senderId}(Admin) > "‚úèüë§–§–ò–û" > –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.name} –Ω–∞ ${update_name.name} –¥–ª—è @id${user.idvk}(${user.name})`
                        })
                        await Logger(`In a private chat, changed name user from ${user.name} on ${update_name.name} for ${update_name.idvk} by admin ${context.senderId}`)
                    }
                    if (name.text.length > 32) {
                        await context.send(`‚ö† –ù–æ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞–ª—ã –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–ª–∞–Ω–∫ (32 —Å–∏–º–≤–æ–ª–∞)! –ü—Ä–∏–¥–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã, —Å –¥–æ–ø–ª–∞—Ç–æ–π 1G –∑–∞ –∫–∞–∂–¥—ã–π –Ω–µ –ø–æ–º–µ—Å—Ç–∏–≤—à–∏–π—Å—è —Å–∏–º–≤–æ–ª.`)
                    }
                } else {
                    await context.send(`‚õî –ù–æ–≤–æ–µ –§–ò–û –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã (64 —Å–∏–º–≤–æ–ª–∞), –∏ –≤–æ–æ–±—â–µ, –∑–∞–ø—Ä–µ—â–µ–Ω—ã –º–∞–≥–∏—á–µ—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º! –ó–∞—Å—Ç–∞–≤–∏–º –µ–≥–æ/–µ–µ –≤—ã–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ –≤ 30G –∏–ª–∏ —Å –ø–æ–º–æ—â–∏—é –û–ú–û–ù–ê –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –ê–∑–∫–∞–±–∞–Ω.`)
                }
            }
        }
        async function Edit_Class(id: number){
            const user: any = await prisma.user.findFirst({ where: { id: id } })
            let answer_check = false
            const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
            const alli_sel = `${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}`
            while (answer_check == false) {
                const answer1: any = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ ${alli_sel} –¥–ª—è ${user.name}, –∏–º–µ—é—â–µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${user.class}. `,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({ label: '–£—á–µ–Ω–∏–∫', payload: { command: 'grif' }, color: 'secondary' })
                        .textButton({ label: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä', payload: { command: 'coga' }, color: 'secondary' })
                        .textButton({ label: '–ñ–∏—Ç–µ–ª—å', payload: { command: 'sliz' }, color: 'secondary'})
                        .oneTime().inline(),
                        answerTimeLimit
                    }
                )
                if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è ${user.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (!answer1.payload) {
                    await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                } else {
                    const update_class = await prisma.user.update({ where: { id: user.id }, data: { class: answer1.text } })
                    if (update_class) {
                        await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å ${user.class} –Ω–∞ ${update_class.class}.`)
                        try {
                            await vk.api.messages.send({
                                user_id: user.idvk,
                                random_id: 0,
                                message: `‚öô –í–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.class} –Ω–∞ ${update_class.class}.`
                            })
                            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                        } catch (error) {
                            console.log(`User ${user.idvk} blocked chating with bank`)
                        }
                        await vk.api.messages.send({
                            peer_id: chat_id,
                            random_id: 0,
                            message: `‚öô @id${context.senderId}(Admin) > "‚úèüë§–ü–æ–ª–æ–∂–µ–Ω–∏–µ" > –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.class} –Ω–∞ ${update_class.class} –¥–ª—è @id${user.idvk}(${user.name})`
                        })
                        await Logger(`In a private chat, changed status user from ${user.class} on ${update_class.class} for ${update_class.idvk} by admin ${context.senderId}`)
                    }
                    answer_check = true
                }
            }
        }
        async function Edit_Spec(id: number){
            const user: any = await prisma.user.findFirst({ where: { id: id } })
            let spec_check = false
            const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
            const alli_sel = `${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}`
		    while (spec_check == false) {
                const spec: any = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ ${alli_sel}. –î–ª—è ${user.name}.–ï—Å–ª–∏ –æ–Ω/–æ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä/–∂–∏—Ç–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç(–∫–∞), —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç. \n–¢–µ–∫—É—â–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${user.spec}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:`, timer_text)
                if (spec.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${user.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (spec.text.length <= 32) {
                    spec_check = true
                    const update_spec = await prisma.user.update({ where: { id: user.id }, data: { spec: spec.text } })
                    if (update_spec) {
                        await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å ${user.spec} –Ω–∞ ${update_spec.spec}.`)
                        try {
                            await vk.api.messages.send({
                                user_id: user.idvk,
                                random_id: 0,
                                message: `‚öô –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.spec} –Ω–∞ ${update_spec.spec}.`
                            })
                            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                        } catch (error) {
                            console.log(`User ${user.idvk} blocked chating with bank`)
                        }
                        await vk.api.messages.send({
                            peer_id: chat_id,
                            random_id: 0,
                            message: `‚öô @id${context.senderId}(Admin) > "‚úèüë§–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" > —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.spec} –Ω–∞ ${update_spec.spec} –¥–ª—è @id${user.idvk}(${user.name})`
                        })
                        await Logger(`In a private chat, changed specialization user from ${user.spec} on ${update_spec.spec} for ${update_spec.idvk} by admin ${context.senderId}`)
                    }
                } else {
                    await context.send(`üí° –í–≤–µ–¥–∏—Ç–µ –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
                }
            }
        }
        async function Edit_Alliance(id: number){
            const user: any = await prisma.user.findFirst({ where: { id: id } })
            const person: { id_alliance: null | number, alliance: null | string,  } = { id_alliance: null, alliance: null }
            let answer_check = false
            while (answer_check == false) {
                const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–µ –ú–∞–≥–∏–∏`,
                    {	
                        keyboard: Keyboard.builder()
                        .textButton({ label: '–°–æ—é–∑–Ω–∏–∫', payload: { command: 'student' }, color: 'secondary' })
                        .textButton({ label: '–ù–µ —Å–æ—é–∑–Ω–∏–∫', payload: { command: 'professor' }, color: 'secondary' })
                        .textButton({ label: '–°–æ–ª–æ', payload: { command: 'citizen' }, color: 'secondary' })
                        .oneTime().inline(), answerTimeLimit
                    }
                )
                if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (!answer_selector.payload) {
                    await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                } else {
                    person.alliance = answer_selector.text
                    person.id_alliance = answer_selector.text == '–ù–µ —Å–æ—é–∑–Ω–∏–∫' ? -1 : 0
                    answer_check = true
                }
            }
            let alliance_check = false
            if (person.alliance == '–°–æ—é–∑–Ω–∏–∫') {
                let id_builder_sent = 0
                while (!alliance_check) {
                    const keyboard = new KeyboardBuilder()
                    id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
                    let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—é–∑–Ω—ã–π —Ä–æ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ:\n\n`
                    const builder_list: Alliance[] = await prisma.alliance.findMany({})
        
                    if (builder_list.length > 0) {
                        const limiter = 5
                        let counter = 0
                        for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                            const builder = builder_list[i]
                            keyboard.textButton({ label: `üëÄ ${i}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                            //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                            event_logger += `\n\nüí¨ ${i} -> ${builder.id} - ${builder.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${builder.idvk}`
                            /*
                            const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                            counter++
                        }
                        event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
                        //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
                        if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                            keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
                        }
                        //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
                        if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                            keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
                        }
                    } else {
                        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∑–¥–∞–Ω–∏—è, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å??`
                    }
                    const answer1: any = await context.question(`${event_logger}`,
                        {	
                            keyboard: keyboard.inline(), answerTimeLimit
                        }
                    )
                    if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
                    if (!answer1.payload) {
                        await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                    } else {
                        if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                            id_builder_sent = answer1.payload.id_builder_sent
                        } else {
                            person.alliance = answer1.payload.target.name
                            person.id_alliance = answer1.payload.target.id
                            alliance_check = true
                        }
                    }
                }
            }
            const alli_get_was: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
            const update_alliance = await prisma.user.update({ where: { id: user.id }, data: { id_alliance: person.id_alliance } })
            const alli_get_be: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(update_alliance.id_alliance) } })
            if (update_alliance) {
                await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ —Ä–æ–ª–µ–≤–æ–π —Å ${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_was?.name} –Ω–∞ ${update_alliance.id_alliance == 0 ? `–°–æ–ª–æ` : update_alliance.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_be?.name}.`)
                try {
                    await vk.api.messages.send({
                        user_id: user.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞—à–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ä–æ–ª–µ–≤–æ–π —Å–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_was?.name} –Ω–∞ ${update_alliance.id_alliance == 0 ? `–°–æ–ª–æ` : update_alliance.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_be?.name}.`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã –∞–ª—å—è–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                } catch (error) {
                    console.log(`User ${user.idvk} blocked chating with bank`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `‚öô @id${context.senderId}(Admin) > "‚úèüë§–ê–ª—å—è–Ω—Å" > –†–æ–ª–µ–≤–∞—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_was?.name} –Ω–∞ ${update_alliance.id_alliance == 0 ? `–°–æ–ª–æ` : update_alliance.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_be?.name} –¥–ª—è @id${user.idvk}(${user.name})`
                })
                await Logger(`In a private chat, changed alliance user from ${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_was?.name} on ${update_alliance.id_alliance == 0 ? `–°–æ–ª–æ` : update_alliance.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_be?.name} for ${update_alliance.idvk} by admin ${context.senderId}`)
            }
        }

        //–ú–æ–¥—É–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        async function User_delete(id: number) {
            const user_get: any = await prisma.user.findFirst({ where: { id: id } })
            const confirmq = await context.question(`‚Åâ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ${user_get.name}`,
                {
                    keyboard: Keyboard.builder()
                    .textButton({ label: '–î–∞', payload: { command: 'confirm' }, color: 'secondary' })
                    .textButton({ label: '–ù–µ—Ç', payload: { command: 'gold_down' }, color: 'secondary' })
                    .oneTime().inline(),
                    answerTimeLimit
                }
            )
            if (confirmq.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ${user_get.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (confirmq.payload.command === 'confirm' && user_get) {
                if (user_get) {
                    const user_del = await prisma.user.delete({ where: { id: id } })
                    await context.send(`‚ùó –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_del.name}`)
                    if (user_del) {
                        const check_bbox = await prisma.blackBox.findFirst({ where: { idvk: user_del.idvk } })
                        if (!check_bbox) {
                            const add_bbox = await prisma.blackBox.create({ data: { idvk: user_del.idvk } })
                            add_bbox ? await context.send(`‚öô @id${user_del.idvk}(${user_del.name}) —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–ª–µ–≥–∞–ª–æ–º.`) : await context.send(`‚öô @id${user_del.idvk}(${user_del.name}) –Ω–µ —Å–º–æ–≥ —Å—Ç–∞—Ç—å –Ω–µ–ª–µ–≥–∞–ª–æ–º.`)
                        } else {
                            await context.send(`‚öô @id${user_del.idvk}(${user_del.name}) –¥–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ù–ê –†–û–î–ò–ù–£ —É–∂–µ –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑.`)
                        }
                        try {
                            await vk.api.messages.send({
                                user_id: user_del.idvk,
                                random_id: 0,
                                message: `‚ùó –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ üí≥UID: ${user_del.id} –±–æ–ª—å—à–µ –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–æ–º –ú–∞–≥–æ–º–∏—Ä–∞ –û–Ω–ª–∞–π–Ω üè¶, ${user_del.name}. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–Ω–æ–≤–∞!`
                            })
                            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                        } catch (error) {
                            console.log(`User ${user_del.idvk} blocked chating with bank`)
                        }
                        await vk.api.messages.send({
                            peer_id: chat_id,
                            random_id: 0,
                            message: `‚öô @id${context.senderId}(Admin) > "üö´üë§" > —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä—Ç–æ—á–∫–∞ @id${user_del.idvk}(${user_del.name})`
                        })
                    }
                    await Logger(`In database, deleted user: ${user_del.idvk}-${user_del.id} by admin ${context.senderId}`)
                } 
            } else {
                await context.send(`‚öô –£–¥–∞–ª–µ–Ω–∏–µ ${user_get.name} –æ—Ç–º–µ–Ω–µ–Ω–æ.`)
            }
        }
        //–ú–æ–¥—É–ª—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        async function Artefact_Add(id: number, count: number) {
            let datas: any = []
            let trigger = false
            while (trigger == false) {
                const name: any = await context.question(`‚åõ –í–Ω–∏–º–∞–Ω–∏–µ! –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ üí≥:${id} \n üß∑ –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ: `, timer_text)
                if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (name.text.length <= 30) {
                    trigger = true
                    datas.push({name: `${name.text}`})
                } else {
                    await context.send(`üí° –í–≤–µ–¥–∏—Ç–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
                }
            }

            trigger = false
            while (trigger == false) {
                const type: any = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Ç–∏–ø –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: \n üïê ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ; ‚ôæ ‚Äî –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–µ. `,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({ label: 'üïê', payload: { command: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π' }, color: 'secondary' })
                        .textButton({ label: '‚ôæ', payload: { command: '–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π' }, color: 'secondary' })
                        .oneTime().inline(),
                        answerTimeLimit
                    }
                )
                if (type.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (type.payload) {
                    trigger = true
                    datas.push({label: `${type.text}`})
                    datas.push({type: `${type.payload.command}`})
                } else {
                    await context.send(`üí° –ú–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ –∫–Ω–æ–ø–æ—á–∫–∞–º –∂–∞—Ç—å?`)
                }
            }

            trigger = false
            while (trigger == false) {
                const description: any = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ üîÆ–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–∞–º–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏–∑ –∞–ª—å–±–æ–º–∞ –≥—Ä—É–ø–ø—ã –•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω:`, timer_text)
                if (description.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (description.text.length <= 1000) {
                    trigger = true
                    datas.push({description: `${description.text}`})
                } else {
                    await context.send(`üí° –í–≤–µ–¥–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
                }
            }
            const target: any = await prisma.user.findFirst({ where: { id } })
            const artefact_create = await prisma.artefact.create({ data: { id_user: id, name: datas[0].name, label: datas[1].label, type: datas[2].type, description: datas[3].description } })
            try {
                await vk.api.messages.send({
                    user_id: target.idvk,
                    random_id: 0,
                    message: `‚öô –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π üîÆ: ${artefact_create.name} \n ${artefact_create.label}: ${artefact_create.type} `
                })
                await context.send(`‚öô –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`)
            } catch (error) {
                console.log(`User ${target.idvk} blocked chating with bank`)
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(Admin) > "‚ûïüîÆ" > –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ${artefact_create.name} –ø–æ–ª—É—á–∞–µ—Ç @id${target.idvk}(${target.name})`
            })
            console.log(`Admin ${context.senderId} create artefact for user: ${target.idvk}`)
            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        }

        //–ú–æ–¥—É–ª—å –≤–æ–≤–∑–≤—Ä–∞—Ç–∞
        async function Back(id: number, count: number) {
            console.log(`Admin ${context.senderId} canceled operation for user UID: ${id}`)
            await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
        }

        //–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 
        async function Ipnut_Gold() {
            let golden: number = 0
            let money_check = false
            while (money_check == false) {
                const gold: any = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${ans.text}: `, timer_text_oper)
                if (gold.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ${ans.text} –∏—Å—Ç–µ–∫–ª–æ!`); return golden }
                if (typeof Number(gold.text) == "number") {
                    money_check = true
                    golden = Number(gold.text)
                } 
            }
            return golden
        }
        async function Ipnut_Message() {
            let golden = ''
            let money_check = false
            while (money_check == false) {
                const gold = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ans.text}:`, timer_text_oper)
                if (gold.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ans.text} –∏—Å—Ç–µ–∫–ª–æ!`); return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª–æ –ò–°–õ–ê–ú!" }
                if (gold.text) {
                    money_check = true
                    golden = gold.text
                } 
            }
            return golden
        }

        // –ú–æ–¥—É–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        async function Artefact_Show(id: number) { 
            const artefact = await prisma.artefact.findMany({ where: { id_user: id } })
            if (artefact.length > 0) {
                artefact.forEach(async element => {
                    await context.send(`üí¨: ${element.name} \n üîß: ${element.type}${element.label} \n üß∑:  ${element.description} `,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({ label: '–£–¥–∞–ª–∏—Ç—åüîÆ', payload: { command: `${element.id}` }, color: 'secondary' })
                            .oneTime().inline()
                        }
                    )
                });
            } else {
                await context.send(`‚úâ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç =(`)
            }
            console.log(`Admin ${context.senderId} see artefacts from user UID: ${id}`)
        }
        async function Inventory_Show(id: number) { 
            const artefact = await prisma.inventory.findMany({ where: { id_user: id } })
            if (artefact.length > 0) {
                for(const element of artefact) {
                    const item: any = await prisma.item.findFirst({ where: { id: element.id_item }, include: { category: true } })
                    await context.send(`üí¨: ${item.name}-${element.id} \n üîß: ${item.category.name}-${item.price}üí∞`,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({ label: '–£–¥–∞–ª–∏—Ç—åüëú', payload: { command: `${element.id}` }, color: 'secondary' })
                            .oneTime().inline()
                        }
                    )
                }
            } else {
                await context.send(`‚úâ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç =(`)
            }
            await Logger(`In private chat, the inventory user uid ${id} is viewed by admin ${context.senderId}`)
        }

        //–ú–æ–¥—É–ª—å –º—É–ª—å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        async function Multi_Up(id: number) {
            await context.send(`‚ö† –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
            const gold: number = await Ipnut_Gold() 
            await context.send(`‚ö† –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞`)
            const xp: number = await Ipnut_Gold()
            const messa: string = await Ipnut_Message()
            const user_get: User | null = await prisma.user.findFirst({ where: { id } })
            const money_put = await prisma.user.update({ where: { id: user_get?.id }, data: { gold: { increment: gold }, xp: { increment: xp } } })
            try {
                await vk.api.messages.send({
                    user_id: user_get?.idvk,
                    random_id: 0,
                    message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${gold}üí∞ ${xp}üßô. \n\n–í–∞—à —Å—á—ë—Ç:\n${money_put.gold}üí∞\n${money_put.xp}üßô\n\n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                })
                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            } catch (error) {
                console.log(`User ${user_get?.idvk} blocked chating with bank`)
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(Admin) > "+üí∞üßô" >\n${user_get?.gold}+${gold}=${money_put.gold}üí∞\n${user_get?.xp}+${xp}=${money_put.xp}üßô\n –¥–ª—è @id${user_get?.idvk}(${user_get?.name}) üß∑: ${messa}`
            })
            console.log(`User ${user_get?.idvk} got ${gold} gold and ${xp} xp. Him/Her bank now ${money_put.gold}`)
        }
        async function Multi_Down(id: number) {
            await context.send(`‚ö† –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–Ω—è—Ç–∏—é –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
            const gold: number = await Ipnut_Gold() 
            await context.send(`‚ö† –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–Ω—è—Ç–∏—é –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞`)
            const xp: number = await Ipnut_Gold()
            const messa: string = await Ipnut_Message()
            const user_get: User | null = await prisma.user.findFirst({ where: { id } })
            const money_put = await prisma.user.update({ where: { id: user_get?.id }, data: { gold: { decrement: gold }, xp: { decrement: xp } } })
            try {
                await vk.api.messages.send({
                    user_id: user_get?.idvk,
                    random_id: 0,
                    message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${gold}üí∞ ${xp}üßô. \n\n–í–∞—à —Å—á—ë—Ç:\n${money_put.gold}üí∞\n${money_put.xp}üßô\n\n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                })
                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            } catch (error) {
                console.log(`User ${user_get?.idvk} blocked chating with bank`)
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(Admin) > "-üí∞üßô" >\n${user_get?.gold}-${gold}=${money_put.gold}üí∞\n${user_get?.xp}-${xp}=${money_put.xp}üßô\n –¥–ª—è @id${user_get?.idvk}(${user_get?.name}) üß∑: ${messa}`
            })
            console.log(`User ${user_get?.idvk} left ${gold} gold and ${xp} xp. Him/Her bank now ${money_put.gold}`)
        }
        //–ú–æ–¥—É–ª—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        async function Gold_Up(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({ where: { id } })
            const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { gold: user_get.gold + count } })
            try {
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                })
                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            } catch (error) {
                console.log(`User ${user_get.idvk} blocked chating with bank`)
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(Admin) > "+üí∞" > ${money_put.gold-count}üí∞+${count}üí∞=${money_put.gold}üí∞ –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
            })
            console.log(`User ${user_get.idvk} got ${count} gold. Him/Her bank now ${money_put.gold}`)
        }
        async function Gold_Down(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({ where: { id } })
            if (user_get.gold-count >= 0) {
                const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { gold: user_get.gold - count } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get.idvk} blocked chating with bank`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `‚öô @id${context.senderId}(Admin) > "-üí∞" > ${money_put.gold+count}üí∞-${count}üí∞=${money_put.gold}üí∞ –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                })
                console.log(`User ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold}`)
            } else {
                const confirmq = await context.question(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} üí∞–≥–∞–ª–ª–µ–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.gold}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.gold-count}`,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({ label: '–î–∞', payload: { command: 'confirm' }, color: 'secondary' })
                        .textButton({ label: '–ù–µ—Ç', payload: { command: 'gold_down' }, color: 'secondary' })
                        .oneTime().inline(),
                        answerTimeLimit
                    }
                )
                if (confirmq.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–Ω—è—Ç–∏–µ –≥–∞–ª–ª–µ–æ–Ω–æ–≤ —Å ${user_get.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (confirmq.payload.command === 'confirm') {
                    const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { gold: user_get.gold - count } })
                    try {
                        await vk.api.messages.send({
                            user_id: user_get.idvk, random_id: 0,
                            message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üí∞. \n–í–∞—à —Å—á—ë—Ç: ${money_put.gold}üí∞ \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                        })
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                    } catch (error) {
                        console.log(`User ${user_get.idvk} blocked chating with bank`)
                    }
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `‚öô @id${context.senderId}(Admin) > "-üí∞" > ${money_put.gold+count}üí∞-${count}üí∞=${money_put.gold}üí∞ –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                    })
                    console.log(`User ${user_get.idvk} lost ${count} gold. Him/Her bank now ${money_put.gold}`)
                } else {
                    await context.send(`üí° –ù—É–∂–Ω–æ –±—ã—Ç—å –∂–µ—Å—Ç—á–µ! –ì—Ä–µ–±–∏ –±–∞–±–ª–æ`)
                }
            }
        }
        async function Xp_Up(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({ where: { id } })
            const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { xp: user_get.xp + count } })
            try {
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                })
                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            } catch (error) {
                console.log(`User ${user_get.idvk} blocked chating with bank`)
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(Admin) > "+üßô" > ${money_put.xp-count}üßô+${count}üßô=${money_put.xp}üßô –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
            })
            console.log(`User ${user_get.idvk} got ${count} MO. Him/Her XP now ${money_put.xp}`)
        }
        async function Xp_Down(id: number) {
            const count: number = await Ipnut_Gold() 
            if (count === 0) { return }
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({ where: { id } })
            if (user_get.xp-count >= 0) {
                const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { xp: user_get.xp - count } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô  \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get.idvk} blocked chating with bank`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `‚öô @id${context.senderId}(Admin) > "-üßô" > ${money_put.xp+count}üßô-${count}üßô=${money_put.xp}üßô –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                })
                console.log(`User ${user_get.idvk} lost ${count} MO. Him/Her XP now ${money_put.xp}`)
            } else {
                await context.send(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count} üßô–º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.xp}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.xp-count}? (–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)`)
                const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { xp: user_get.xp - count } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üßô. \n–í–∞—à –ú–û: ${money_put.xp}üßô  \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get.idvk} blocked chating with bank`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `‚öô @id${context.senderId}(Admin) > "-üßô" > ${money_put.xp+count}üßô-${count}üßô=${money_put.xp}üßô –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                })
                console.log(`User ${user_get.idvk} lost ${count} MO. Him/Her XP now ${money_put.xp}`)
            }
        }
        // –º–æ–¥—É–ª—å –ú–∏–Ω–∏—Å—Ç—Ä–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        async function Medal_Up(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({ where: { id } })
            const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal + count } })
            try {
                await vk.api.messages.send({
                    user_id: user_get.idvk,
                    random_id: 0,
                    message: `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                })
                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            } catch (error) {
                console.log(`User ${user_get.idvk} blocked chating with bank`)
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(Admin) > "+üîò" > ${money_put.medal-count}üîò+${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
            })
            await Logger(`In private chat, user ${user_get.idvk} got ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
        }
        async function Medal_Down(id: number) {
            const count: number = await Ipnut_Gold() 
            const messa: string = await Ipnut_Message()
            const user_get: any = await prisma.user.findFirst({ where: { id } })
            if (user_get.medal-count >= 0) {
                const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal - count } })
                try {
                    await vk.api.messages.send({
                        user_id: user_get.idvk,
                        random_id: 0,
                        message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                    })
                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_get.idvk} blocked chating with bank`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `‚öô @id${context.senderId}(Admin) > "-üîò" > ${money_put.medal+count}üîò-${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                })
                await Logger(`In private chat, user ${user_get.idvk} lost ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
            } else {
                const confirmq = await context.question(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count}üîò –∂–µ—Ç–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.medal}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.medal-count}`,
                    {
                        keyboard: Keyboard.builder()
                        .textButton({ label: '–î–∞', payload: { command: 'confirm' }, color: 'secondary' })
                        .textButton({ label: '–ù–µ—Ç', payload: { command: 'gold_down' }, color: 'secondary' })
                        .oneTime().inline(),
                        answerTimeLimit
                    }
                )
                if (confirmq.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–Ω—è—Ç–∏–µ –≥–∞–ª–ª–µ–æ–Ω–æ–≤ —Å ${user_get.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (confirmq.payload.command === 'confirm') {
                    const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal - count } })
                    try {
                        await vk.api.messages.send({
                            user_id: user_get.idvk, random_id: 0,
                            message: `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`
                        })
                        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                    } catch (error) {
                        console.log(`User ${user_get.idvk} blocked chating with bank`)
                    }
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `‚öô @id${context.senderId}(Admin) > "-üîò" > ${money_put.medal+count}üîò-${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                    })
                    await Logger(`In private chat, user ${user_get.idvk} lost ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
                } else {
                    await context.send(`üí° –ù—É–∂–Ω–æ –±—ã—Ç—å –∂–µ—Å—Ç—á–µ! –ì—Ä–µ–±–∏ –∂–µ—Ç–æ–Ω—ã`)
                }
            }
        }
        //–ú–æ–¥—É–ª—å –¥–æ–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        async function Sub_Menu(id: number) {
            const ans_again: any = await context.question( `‚úâ –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id}`,
                {   
                    keyboard: Keyboard.builder()
                    //.textButton({ label: '‚ûïüîÆ', payload: { command: 'artefact_add' }, color: 'secondary' })
                    //.textButton({ label: 'üëÅüîÆ', payload: { command: 'artefact_show' }, color: 'secondary' }).row()
                    .textButton({ label: '‚úè', payload: { command: 'editor' }, color: 'secondary' })
                    .textButton({ label: 'üëÅüëú', payload: { command: 'inventory_show' }, color: 'secondary' }).row()
                    .textButton({ label: 'üîô', payload: { command: 'back' }, color: 'secondary' }).row()
                    .textButton({ label: '‚ò†', payload: { command: 'user_delete' }, color: 'secondary' })
                    .oneTime().inline(),
                    answerTimeLimit                                                                       
                }
            )
            await Logger(`In a private chat, the sub menu for user ${id} is viewed by admin ${context.senderId}`)
            if (ans_again.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id} –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (ans_again.payload && ans_again.payload.command != 'back') {
                const config: any = {
                    'back': Back,
                    'artefact_add': Artefact_Add,
                    'artefact_show': Artefact_Show,
                    'inventory_show': Inventory_Show,
                    'user_delete': User_delete,
                    'editor': Editor,
                }
                const answergot = await config[ans_again.payload.command](Number(datas[0].id))
            } else {
                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
            }
        }
    })
    //–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    hearManager.hear(/–£–¥–∞–ª–∏—Ç—åüëú/, async (context) => {
        if (context.messagePayload == null) {
            return
        }
        const art_get: any = await prisma.inventory.findFirst({ where: { id: Number(context.messagePayload.command) } })
        const item: any = await prisma.item.findFirst({ where: { id: art_get.id_item } })
        if (art_get) {
            const art_del = await prisma.inventory.delete({ where: { id: Number(context.messagePayload.command) } })
            await context.send(`‚öô –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä ${item.name}-${art_del.id}`)
            const user_find = await prisma.user.findFirst({ where: { id: art_del.id_user } })
            if (user_find) {
                try {
                    await vk.api.messages.send({
                        user_id: user_find.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞—à —Ç–æ–≤–∞—Ä ${item.name} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ –≤ –ê–ó–ö–ê–ë–ê–ù!`
                    })
                    await context.send(`‚öô –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_find.idvk} blocked chating with bank`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `‚öô @id${context.senderId}(Admin) > "üö´üëú" > —Ç–æ–≤–∞—Ä ${item.name} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ –≤ –ê–∑–∫–∞–±–∞–Ω! —É @id${user_find.idvk}(${user_find.name})`
                })
            }
            await Logger(`In database deleted item ${item.name}-${art_del.id} for user ${user_find?.idvk}-${user_find?.id} by admin ${context.senderId}`)
        }
        await Keyboard_Index(context, 'üí° –ë—ã–ª —Ç–æ–≤–∞—Ä, –Ω–µ–µ–µ—Ç —Ç–æ–≤–∞—Ä–∞!')
    })
    hearManager.hear(/–£–¥–∞–ª–∏—Ç—åüîÆ/, async (context) => {
        if (context.messagePayload == null) {
            return
        }
        const art_get: any = await prisma.artefact.findFirst({ where: { id: Number(context.messagePayload.command) } })
        if (art_get) {
            const art_del = await prisma.artefact.delete({ where: { id: Number(context.messagePayload.command) } })
            await context.send(`‚öô –£–¥–∞–ª–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ${art_del.name}`)
            const user_find = await prisma.user.findFirst({ where: { id: art_del.id_user } })
            if (user_find) {
                try {
                    await vk.api.messages.send({
                        user_id: user_find.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞—à –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ${art_del.name} –∏–∑—ä—è–ª –û–ú–û–ù!`
                    })
                    await context.send(`‚öô –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_find.idvk} blocked chating with bank`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `‚öô @id${context.senderId}(Admin) > "üö´üîÆ" > –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ${art_del.name} –∏–∑—å—è–ª –û–ú–û–ù! —É @id${user_find.idvk}(${user_find.name})`
                })
            }
            console.log(`Admin ${context.senderId} destroy artefact from user UID: ${user_find?.idvk}`)
        }
        await Keyboard_Index(context, 'üí° –ë—ã–ª –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –Ω–µ–µ–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞!')
    })

    hearManager.hear(/–∞–¥–º–∏–Ω–∫–∞/, async (context: any) => {
        if (context.senderId == root) {
            const user:any = await prisma.user.findFirst({ where: { idvk: Number(context.senderId) } })
            const lvlup = await prisma.user.update({ where: { id: user.id }, data: { id_role: 2 } })
            if (lvlup) {
                await context.send(`‚öô –†—É—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã`)
            } else {
                await context.send(`‚öô –û—à–∏–±–∫–∞`)
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(Root) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!)`
            })
            await Logger(`Super user ${context.senderId} got root`)
        }
        await Keyboard_Index(context, `üí° –ó–∞—Ö–≤–∞—Ç –º–∏—Ä–∞ —Å–Ω–æ–≤–∞ –≤ —Ç–µ–º–µ!`)
    })
    hearManager.hear(/–ø—Ä–∞–≤–∞/, async (context: any) => {
        const user_check: any = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        const user_find = await prisma.user.findFirst({ where: { id: user_check.select_user } })
        if (user_find?.id_role == 2) {
            const uid = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:`, timer_text)
            if (uid.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
			if (uid.text) {
                const get_user = await prisma.user.findFirst({ where: { id: Number(uid.text) } })
                if (get_user) {
                    const artefact_counter = await prisma.artefact.count({ where: { id_user: Number(uid.text) } })
                    const role: any = await prisma.role.findFirst({ where: { id: get_user.id_role } })
                    await context.send(`‚úâ –û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: ${get_user.class} ${get_user.name}, ${get_user.spec}: \n\n üí≥UID: ${get_user.id} \n üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold} \n üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp} \n üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl} \n üîÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${artefact_counter}\n \n –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${role.name} `)
                    const answer1 = await context.question(`‚åõ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`,
                        {
                            keyboard: Keyboard.builder()
                            .textButton({ label: '–î–∞—Ç—å –∞–¥–º–∏–Ω–∫—É', payload: { command: 'access' }, color: 'secondary' })
                            .textButton({ label: '–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É', payload: { command: 'denied' }, color: 'secondary' }).row()
                            .textButton({ label: '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å', payload: { command: 'cancel' }, color: 'secondary' })
                            .oneTime().inline(),
                            answerTimeLimit
                        }
                    )
                    if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –∏—Å—Ç–µ–∫–ª–æ!`) }
                    if (!answer1.payload) {
                        await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                    } else {
                        if (answer1.payload.command === 'access') {
                            const lvlup = await prisma.user.update({ where: { id: get_user.id }, data: { id_role: 2 } })
                            if (lvlup) {
                                await context.send(`‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                                try {
                                    await vk.api.messages.send({
                                        user_id: get_user.idvk,
                                        random_id: 0,
                                        message: `‚öô –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
                                    })
                                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                                } catch (error) {
                                    console.log(`User ${get_user.idvk} blocked chating with bank`)
                                }
                                await vk.api.messages.send({
                                    peer_id: chat_id,
                                    random_id: 0,
                                    message: `‚öô @id${context.senderId}(Root) > –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @id${get_user.idvk}(${get_user.name})`
                                })
                                await Logger(`In private chat, get status admin user ${get_user?.idvk}-${get_user?.id} by admin ${context.senderId}`)
                            } else {
                                await context.send(`üí° –û—à–∏–±–∫–∞`)
                            }
                        }
                        if (answer1.payload.command === 'denied') {
                            const lvlup = await prisma.user.update({ where: { id: get_user.id }, data: { id_role: 1 } })
                            if (lvlup) {
                                await context.send(`‚öô –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                                try {
                                    await vk.api.messages.send({
                                        user_id: get_user.idvk,
                                        random_id: 0,
                                        message: `‚öô –í–∞—Å –ø–æ–Ω–∏–∑–∏–ª–∏ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
                                    })
                                    await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                                } catch (error) {
                                    console.log(`User ${get_user.idvk} blocked chating with bank`)
                                }
                                await vk.api.messages.send({
                                    peer_id: chat_id,
                                    random_id: 0,
                                    message: `‚öô @id${context.senderId}(Root) > –¥–µ–ª–∞–µ—Ç –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @id${get_user.idvk}(${get_user.name})`
                                })
                                await Logger(`In private chat, left status admin user ${get_user?.idvk}-${get_user?.id} by admin ${context.senderId}`)
                            } else {
                                await context.send(`üí° –û—à–∏–±–∫–∞`)
                            }
                        }
                        if (answer1.payload.command === 'cancel') {
                            await context.send(`üí° –¢–æ–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç`)
                        }
                    }
                }
			} else {
				await context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`)
			}
        }
        await Keyboard_Index(context, `üí° –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ!`)
    })
    hearManager.hear(/–µ–Ω–æ—Ç–∏–∫/, async (context: any) => {
        if (await Accessed(context) == 2) {
            await context.sendDocuments({ value: `./prisma/dev.db`, filename: `dev.db` }, { message: 'üí° –û—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://sqliteonline.com/' } );
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚Äº @id${context.senderId}(Admin) –¥–µ–ª–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö dev.db.`
            })
            await Logger(`In private chat, did backup database by admin ${context.senderId}`)
        }
    })
    hearManager.hear(/!–±–∞–Ω–∫|!–ë–∞–Ω–∫/, async (context: any) => {
        const user_count = await prisma.user.count()
		const sums: any = await prisma.user.aggregate({ _sum: { medal: true, lvl: true, xp: true } })
        const user_check: any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
		await Image_Random(context, "bank")
		if (user_check.id_role != 1) {
			await Keyboard_Index(context, `üè¶ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ú–∞–≥–æ–º–∏—Ä–∞ –û–Ω–ª–∞–π–Ω 0.16v:\nüë• ${user_count}\nüîò ${sums._sum.medal}\n\n`)
		} else {
			await Keyboard_Index(context, `üè¶ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ú–∞–≥–æ–º–∏—Ä–∞ –û–Ω–ª–∞–π–Ω 0.16v:\nüë• ${user_check.name}\nüîò ${user_check.medal} \n\n`)
		}
		const user_inf = await User_Info(context)
		await context.send(`${user_inf.first_name}, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ú–∞–≥–æ–º–∏—Ä–∞ –û–Ω–ª–∞–π–Ω 0.16v, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!`, {
			keyboard: new KeyboardBuilder().callbackButton({
				label: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é',
				payload: {
					command: 'system_call',
					item: 'coffee'
				}
			}).inline()
		})
        await Logger(`In private chat, invite enter in system is viewed by user ${context.senderId}`)
    })
    hearManager.hear(/‚ûïüë§/, async (context) => {
        await Person_Register(context)
    })
    hearManager.hear(/‚ûïüåê/, async (context) => {
        await Alliance_Add(context)
    })
    hearManager.hear(/üîÉüë•/, async (context) => {
        await Person_Selector(context)
    })
}

    