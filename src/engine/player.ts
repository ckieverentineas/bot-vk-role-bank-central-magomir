import { HearManager } from "@vk-io/hear";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import { answerTimeLimit, chat_id, root, timer_text, timer_text_oper, vk } from '../index';
import { Accessed, Fixed_Number_To_Five, Keyboard_Index, Logger, Send_Message } from "./core/helper";
import prisma from "./events/module/prisma_client";
import { User_Info } from "./events/module/tool";
import { Account, Alliance, AllianceCoin, AllianceFacult, BalanceCoin, BalanceFacult, Item, User } from "@prisma/client";
import { Person_Detector, Person_Get, Person_Register, Person_Selector } from "./events/module/person/person";
import { Alliance_Add, Alliance_Updater } from "./events/module/alliance/alliance";
import { Alliance_Coin_Printer } from "./events/module/alliance/alliance_coin";
import { Alliance_Facult_Printer } from "./events/module/alliance/alliance_facult";
import { Person_Coin_Printer_Self } from "./events/module/person/person_coin";
import { Facult_Coin_Printer_Self } from "./events/module/alliance/facult_rank";
import { Alliance_Coin_Converter_Printer } from "./events/module/converter";
import { Alliance_Coin_Converter_Editor_Printer } from "./events/module/alliance/alliance_converter_editor";
import { Alliance_Year_End_Printer } from "./events/module/alliance/alliance_year_end";
import { Alliance_Coin_Rank_Admin_Printer } from "./events/module/rank/rank_alliance";
import { Alliance_Monitor_Printer } from "./events/module/alliance/monitor";
import { restartMonitor, stopMonitor } from "../monitring";
import { ico_list } from "./events/module/data_center/icons_lib";
import { Operation_Solo } from "./events/module/tranzaction/operation_solo";
import { Operation_Group } from "./events/module/tranzaction/operation_group";
import { AllianceShop_Printer } from "./events/module/shop/alliance_shop";
import { AllianceShop_Selector } from "./events/module/shop/alliance_shop_client";

export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/–õ—é—Ç–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (context.senderId == root) {
            console.log(`Admin ${context.senderId} enter in shopping`)
            const category:any = await prisma.category.findMany({})
            if (category.length == 0) {
                const ans: any = await context.question(
                    `‚úâ –ú–∞–≥–∞–∑–∏–Ω–æ–≤ –µ—â–µ –Ω–µ—Ç`,
                    {   keyboard: Keyboard.builder()
                        .textButton({   label: '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                        payload: {  command: 'new_shop' },
                                        color: 'secondary'                  })
                        .oneTime().inline()                                     }
                )
                if (ans.payload.command == 'new_shop') {
                    const shop: any = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:`)
                    const shop_create = await prisma.category.create({  data: { name: shop.text }   })
                    console.log(`User ${context.senderId} open new shop`)
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`
                    })
                    await context.send(`‚öô –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`)
                }
            } else {
                let keyboard = Keyboard.builder()
                category.forEach(async (element: any) => {
                    keyboard.textButton({   label: element.name,
                                            payload: { command: `${element.id}` }   })
                    .textButton({   label: "–£–¥–∞–ª–∏—Ç—å",
                                    payload: { command: `${element.id}` }   }).row()
                })
                const ans: any = await context.question(`‚úâ –ö—É–¥–∞ –ø–æ–π–¥–µ–º?`,
                    {   keyboard: keyboard
                        .textButton({   label: '–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                        payload: { command: 'new_shop' },
                                        color: 'secondary'                  })
                        .oneTime().inline()                                     })
                if (ans.text == "–£–¥–∞–ª–∏—Ç—å") {
                    const shop_delete = await prisma.category.delete({ where: { id: Number(ans.payload.command) } })
                    console.log(`User ${context.senderId} close shop`)
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_delete.name}`
                    })
                    await context.send(`‚öô –£–¥–∞–ª–µ–Ω –º–∞–≥–∞–∑–∏–Ω ${shop_delete.name}`)
                }
                if (ans.payload?.command == 'new_shop') {
                    const shop: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:` )
                    const shop_create: any = await prisma.category.create({ data: { name: shop.text } })
                    console.log(`User ${context.senderId} open new shop`)
                    await context.send(`‚öô –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`)
                    await vk.api.messages.send({
                        peer_id: chat_id,
                        random_id: 0,
                        message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω ${shop_create.name}`
                    })
                }
                if (category.find((i: any) => i.name == ans.text)) {
                    await context.send(`‚åõ –í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ ${ans.text}`)
                    const item: any= await prisma.item.findMany({ where: { id_category: Number(ans.payload.command) } })
                    if (item.length == 0) {
                        await context.send(`‚úâ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–∏–∞–ª–≤–∫–∏ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç—ã=/`)
                    } else {
                        item.forEach(async (element: any) => {
                            await context.send(`üõç ${element.name} ${element.price}üí∞`,
                                {
                                    keyboard: Keyboard.builder()
                                    .textButton({ label: '–ö—É–ø–∏—Ç—å', payload: { command: `${element.name}` }, color: 'secondary' })
                                    .textButton({ label: '‚úè–ò–º—è', payload: { command: `${element.name}` }, color: 'secondary' })
                                    .textButton({ label: '‚úè–¢–∏–ø', payload: { command: `${element.name}` }, color: 'secondary' })
                                    .oneTime().inline()                                             
                                }
                            )  
                        })
                    }
                    const ans_item: any = await context.question( `‚úâ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`,
                        {   
                            keyboard: Keyboard.builder()
                            .textButton({ label: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', payload: { command: 'new_item' }, color: 'secondary' })
                            .textButton({ label: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º', payload: { command: 'continue' }, color: 'secondary' })
                            .oneTime().inline()
                        }
                    )
                    if (ans_item.payload?.command == 'new_item') {
                        const item_name: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:` )
                        const item_price = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç—å:` )
                        const item_type: any = await context.question( `üß∑ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: \n üïê ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–¥–Ω–∞–∂–¥—ã; \n ‚ôæ ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.`,
                            {   keyboard: Keyboard.builder()
                                .textButton({   label: 'üïê',
                                                payload: { command: 'limited' },
                                                color: 'secondary'                  })
                                .textButton({   label: '‚ôæ',
                                                payload: { command: 'unlimited' },
                                                color: 'secondary'                  })
                                .oneTime().inline()                                     }
                        )
                        const item_create = await prisma.item.create({ data: {  name: item_name.text, price: Number(item_price.text), id_category: Number(ans.payload.command), type: item_type.payload.command } })
                        console.log(`User ${context.senderId} added new item ${item_create.id}`)
                        await context.send(`‚öô –î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${ans.text} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${item_name.text} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${item_price.text} –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
                        await vk.api.messages.send({
                            peer_id: chat_id,
                            random_id: 0,
                            message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${item_name.text} —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${item_price.text} –≥–∞–ª–ª–µ–æ–Ω–æ–≤`
                        })
                    }
                    if (ans_item.payload.command == 'continue') { await context.send(`üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å —É –∂–µ–ª–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞`) }
                }
            }
        }
        await Keyboard_Index(context, `üí° –ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Å–æ–º –ø–µ—Ä–µ—É–ª–∫–µ –µ—Å—Ç—å –ø–æ–¥–ø–æ–ª—å–µ?`)
    })
    hearManager.hear(/‚úè–¢–∏–ø/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (context.messagePayload == null && context.senderId != root) {
            await Logger(`In a private chat, stop correction item type user is viewed by admin ${context.senderId}`)
            return
        }
        const item_buy:any = await prisma.item.findFirst({ where: { name: context.messagePayload.command } })
        if (item_buy) {
            const item_type: any = await context.question( `üß∑ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è ${item_buy.name}: \n üïê ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–¥–Ω–∞–∂–¥—ã; \n ‚ôæ ‚Äî –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑. \n –¢–µ–∫—É—â–∏–π —Ç–∏–ø: ${item_buy.type}`,
                {   
                    keyboard: Keyboard.builder()
                    .textButton({ label: 'üïê', payload: { command: 'limited' }, color: 'secondary' })
                    .textButton({ label: '‚ôæ', payload: { command: 'unlimited' }, color: 'secondary' })
                    .oneTime().inline()
                }
            )
            const item_update = await prisma.item.update({ where: { id: item_buy.id }, data: { type: item_type.payload.command } })
            console.log(`Admin ${context.senderId} edit type item ${item_buy.id}`)
            await context.send(`‚öô –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ ${item_buy.name} –∏–∑–º–µ–Ω–µ–Ω —Å ${item_buy.type} –Ω–∞ ${item_update.type}`)
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ ${item_buy.name} —Å ${item_buy.type} –Ω–∞ ${item_update.type}`
            })
        } else {
            console.log(`Admin ${context.senderId} can't edit type item ${item_buy.id}`)
            await context.send(`‚úâ –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å`)
        }
        await Keyboard_Index(context, `üí° –í–æ—Ç –±—ã –≤—Å–µ–≥–¥–∞ –±–µ–∑–ª–∏–º–∏—Ç, –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å?`)
    })
    hearManager.hear(/‚úè–ò–º—è/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (context.messagePayload == null && context.senderId != root) {
            await Logger(`In a private chat, stop correction name item is viewed by admin ${context.senderId}`)
            return
        }
        const item_buy:any = await prisma.item.findFirst({ where: { name: context.messagePayload.command } })
        if (item_buy) {
            const name: any = await context.question(`üß∑ –ü—Ä–µ–¥–º–µ—Ç: ${item_buy.name}.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:`)
            const item_update = await prisma.item.update({ where: { id: item_buy.id }, data: { name: name.text } })
            console.log(`Admin ${context.senderId} edit name item ${item_buy.id}`)
            await context.send(`‚öô –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ ${item_buy.name} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${item_update.name}`)
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(ROOT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Å ${item_buy.name} –Ω–∞ ${item_update.name}`
            })
        } else {
            console.log(`Admin ${context.senderId} can't edit name item ${item_buy.id}`)
            await context.send(`‚úâ –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å`)
        }
        await Keyboard_Index(context, `üí° –ú–æ–∂–µ—Ç –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?`)
    })
    hearManager.hear(/!–æ–ø–º–∞—Å—Å/, async (context) => {
        await Operation_Group(context)
    })                
    hearManager.hear(/!–æ–ø—Å–æ–ª–æ/, async (context) => {
        await Operation_Solo(context)
    })
    //–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    hearManager.hear(/–£–¥–∞–ª–∏—Ç—åüëú/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (context.messagePayload == null) {
            return
        }
        const art_get: any = await prisma.inventory.findFirst({ where: { id: Number(context.messagePayload.command) } })
        const item: any = await prisma.item.findFirst({ where: { id: art_get.id_item } })
        if (art_get) {
            const art_del = await prisma.inventory.delete({ where: { id: Number(context.messagePayload.command) } })
            await context.send(`‚öô –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä ${item.name}-${art_del.id}`)
            const user_find = await prisma.user.findFirst({ where: { id: art_del.id_user } })
            if (user_find) {
                try {
                    await vk.api.messages.send({
                        user_id: user_find.idvk,
                        random_id: 0,
                        message: `‚öô –í–∞—à —Ç–æ–≤–∞—Ä ${item.name} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ –≤ –ê–ó–ö–ê–ë–ê–ù!`
                    })
                    await context.send(`‚öô –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`)
                } catch (error) {
                    console.log(`User ${user_find.idvk} blocked chating with bank`)
                }
                await vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `‚öô @id${context.senderId}(Admin) > "üö´üëú" > —Ç–æ–≤–∞—Ä ${item.name} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ –≤ –ê–∑–∫–∞–±–∞–Ω! —É @id${user_find.idvk}(${user_find.name})`
                })
            }
            await Logger(`In database deleted item ${item.name}-${art_del.id} for user ${user_find?.idvk}-${user_find?.id} by admin ${context.senderId}`)
        }
        await Keyboard_Index(context, 'üí° –ë—ã–ª —Ç–æ–≤–∞—Ä, –Ω–µ–µ–µ—Ç —Ç–æ–≤–∞—Ä–∞!')
    })
    hearManager.hear(/!–∞–¥–º–∏–Ω–∫–∞/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        if (context.senderId == root) {
            const user: User | null = await prisma.user.findFirst({ where: { idvk: Number(context.senderId) } })
            if (!user) { return }
            const adma = await prisma.role.findFirst({ where: { name: `root` } })
            const lvlup = await prisma.user.update({ where: { id: user.id }, data: { id_role: adma?.id } })
            if (lvlup) {
                await context.send(`‚öô –†—É—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã`)
            } else {
                await context.send(`‚öô –û—à–∏–±–∫–∞`)
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(${user.name}) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!)`
            })
            await Logger(`Super user ${context.senderId} got root`)
        }
        await Keyboard_Index(context, `üí° –ó–∞—Ö–≤–∞—Ç –º–∏—Ä–∞ —Å–Ω–æ–≤–∞ –≤ —Ç–µ–º–µ!`)
    })
    hearManager.hear(/!–Ω–æ–≤–∞—è —Ä–æ–ª—å/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        if (context.senderId == root) {
            const user:any = await prisma.user.findFirst({ where: { idvk: Number(context.senderId) } })
            const role_check = await prisma.role.findFirst({ where: { name: `root`}})
            if (!role_check) {
                const adm = await prisma.role.create({ data: { name: `root` } })
                if (adm) {
                    await context.send(`‚öô –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—É–ø–µ—Ä —Ä–æ–ª—å ${adm.name}-${adm.id}`)
                } else {
                    await context.send(`‚öô –û—à–∏–±–∫–∞`)
                }
            } else {
                const lvlup = await prisma.role.update({ where: { id: role_check.id }, data: { name: `root` } })
                if (lvlup) {
                    await context.send(`‚öô –ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—É–ø–µ—Ä —Ä–æ–ª—å c ${role_check.name}-${role_check.id} –Ω–∞ ${lvlup.name}-${lvlup.id}`)
                } else {
                    await context.send(`‚öô –û—à–∏–±–∫–∞`)
                }
            }
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `‚öô @id${context.senderId}(Root) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!)`
            })
            await Logger(`Super user ${context.senderId} got root`)
        }
        await Keyboard_Index(context, `üí° –ó–∞—Ö–≤–∞—Ç –º–∏—Ä–∞ —Å–Ω–æ–≤–∞ –≤ —Ç–µ–º–µ!`)
    })
    hearManager.hear(/!–ø—Ä–∞–≤–∞/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_adm: User | null | undefined = await Person_Get(context)
        if (await Accessed(context) == 1) { return }
        const uid = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:`, timer_text)
        if (uid.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (uid.text) {
            const get_user = await prisma.user.findFirst({ where: { id: Number(uid.text) } })
            if (get_user && (user_adm?.id_alliance == get_user.id_alliance || get_user.id_alliance == 0 || get_user.id_alliance == -1 || await Accessed(context) == 3)) {
                const role: any = await prisma.role.findFirst({ where: { id: get_user.id_role } })
                const info_coin: { text: string, smile: string } | undefined = await Person_Coin_Printer_Self(context, get_user.id)
                const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(get_user.id_alliance) } })
                await context.send(`‚úâ –û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: ${get_user.class} ${get_user.name}, ${get_user.spec}: \n\n üí≥ UID: ${get_user.id} \n üïØ GUID: ${get_user.id_account} \n üîò –ñ–µ—Ç–æ–Ω—ã: ${get_user.medal} \n üë§ –ò–º—è: ${get_user.name} \n üëë –°—Ç–∞—Ç—É—Å: ${get_user.class}  \n üî® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${get_user?.spec} \n üè† –†–æ–ª–µ–≤–∞—è: ${get_user.id_alliance == 0 ? `–°–æ–ª–æ` : get_user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}\n üß∑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: https://vk.com/id${get_user.idvk}\n${info_coin?.text}\n \n –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${role.name} `)
                const keyboard = new KeyboardBuilder()
                keyboard.textButton({ label: '–î–∞—Ç—å –∞–¥–º–∏–Ω–∫—É', payload: { command: 'access' }, color: 'secondary' }).row()
                .textButton({ label: '–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å—É–ø–µ—Ä)', payload: { command: 'denied' }, color: 'secondary' }).row()
                
                if (await Accessed(context) == 3) {
                    keyboard.textButton({ label: '–î–∞—Ç—å –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∫—É', payload: { command: 'access_pro' }, color: 'secondary' }).row()
                }
                keyboard.textButton({ label: '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å', payload: { command: 'cancel' }, color: 'secondary' }).row()
                keyboard.oneTime().inline()
                const answer1 = await context.question(`‚åõ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`, { keyboard: keyboard, answerTimeLimit })
                if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –∏—Å—Ç–µ–∫–ª–æ!`) }
                if (!answer1.payload) {
                    await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
                } else {
                    if (answer1.payload.command === 'access') {
                        const adma = await prisma.role.findFirst({ where: { name: `admin` } })
                        const lvlup = await prisma.user.update({ where: { id: get_user.id }, data: { id_role: adma?.id } })
                        if (lvlup) {
                            await context.send(`‚öô –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                            try {
                                await vk.api.messages.send({
                                    user_id: get_user.idvk,
                                    random_id: 0,
                                    message: `‚öô –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
                                })
                                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                            } catch (error) {
                                console.log(`User ${get_user.idvk} blocked chating with bank`)
                            }
                            await vk.api.messages.send({
                                peer_id: chat_id,
                                random_id: 0,
                                message: `‚öô @id${context.senderId}(Root) > –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @id${get_user.idvk}(${get_user.name})`
                            })
                            await Logger(`In private chat, get status admin user ${get_user?.idvk}-${get_user?.id} by admin ${context.senderId}`)
                        } else {
                            await context.send(`üí° –û—à–∏–±–∫–∞`)
                        }
                    }
                    if (answer1.payload.command === 'access_pro') {
                        const adma = await prisma.role.findFirst({ where: { name: `root` } })
                        const lvlup = await prisma.user.update({ where: { id: get_user.id }, data: { id_role: adma?.id } })
                        if (lvlup) {
                            await context.send(`‚öô –°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                            try {
                                await vk.api.messages.send({
                                    user_id: get_user.idvk,
                                    random_id: 0,
                                    message: `‚öô –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
                                })
                                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                            } catch (error) {
                                console.log(`User ${get_user.idvk} blocked chating with bank`)
                            }
                            await vk.api.messages.send({
                                peer_id: chat_id,
                                random_id: 0,
                                message: `‚öô @id${context.senderId}(Root) > –¥–µ–ª–∞–µ—Ç –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @id${get_user.idvk}(${get_user.name})`
                            })
                            await Logger(`In private chat, get status admin user ${get_user?.idvk}-${get_user?.id} by admin ${context.senderId}`)
                        } else {
                            await context.send(`üí° –û—à–∏–±–∫–∞`)
                        }
                    }
                    if (answer1.payload.command === 'denied') {
                        const adma = await prisma.role.findFirst({ where: { name: `user` } })
                        const lvlup = await prisma.user.update({ where: { id: get_user.id }, data: { id_role: adma?.id } })
                        if (lvlup) {
                            await context.send(`‚öô –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ${get_user.name}`)
                            try {
                                await vk.api.messages.send({
                                    user_id: get_user.idvk,
                                    random_id: 0,
                                    message: `‚öô –í–∞—Å –ø–æ–Ω–∏–∑–∏–ª–∏ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
                                })
                                await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                            } catch (error) {
                                console.log(`User ${get_user.idvk} blocked chating with bank`)
                            }
                            await vk.api.messages.send({
                                peer_id: chat_id,
                                random_id: 0,
                                message: `‚öô @id${context.senderId}(Root) > –¥–µ–ª–∞–µ—Ç –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @id${get_user.idvk}(${get_user.name})`
                            })
                            await Logger(`In private chat, left status admin user ${get_user?.idvk}-${get_user?.id} by admin ${context.senderId}`)
                        } else {
                            await context.send(`üí° –û—à–∏–±–∫–∞`)
                        }
                    }
                    if (answer1.payload.command === 'cancel') {
                        await context.send(`üí° –¢–æ–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç`)
                    }
                }
            } else {
                if (user_adm?.id_alliance != get_user?.id_alliance) {
                    await context.send(`üí° –ò–≥—Ä–æ–∫ ${get_user?.name} ${get_user?.id} –≤ —Ä–æ–ª–µ–≤–æ–π AUID: ${get_user?.id_alliance}, –≤ —Ç–æ –≤—Ä–µ–º—è, –∫–∞–∫ –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ AUID: ${user_adm?.id_alliance}`)
                } else {
                    await context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`) 
                }
            }
		} else {
			await context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`)
		}
        await Keyboard_Index(context, `üí° –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ!`)
    })
    hearManager.hear(/!–µ–Ω–æ—Ç–∏–∫/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        await context.sendDocuments({ value: `./prisma/dev.db`, filename: `dev.db` }, { message: 'üí° –û—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://sqliteonline.com/' } );
        await vk.api.messages.send({
            peer_id: chat_id,
            random_id: 0,
            message: `‚Äº @id${context.senderId}(Admin) –¥–µ–ª–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö dev.db.`
        })
        await Logger(`In private chat, did backup database by admin ${context.senderId}`)
    })
    hearManager.hear(/!–±–∞–Ω–∫|!–ë–∞–Ω–∫/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        await Person_Detector(context)
        const user_check: User | null | undefined = await Person_Get(context)
        if (!user_check) { return }
		if (await Accessed(context) == 1) {
            await Keyboard_Index(context, `üè¶ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ú–∞–≥–æ–º–∏—Ä–∞ –û–Ω–ª–∞–π–Ω 0.41v:\nüë• ${user_check.name}\nüîò ${user_check.medal} \n\n`)
		} else {
            const user_count = await prisma.user.count()
		    const sums: any = await prisma.user.aggregate({ _sum: { medal: true } })
			await Keyboard_Index(context, `üè¶ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ú–∞–≥–æ–º–∏—Ä–∞ –û–Ω–ª–∞–π–Ω 0.41v:\nüë• ${user_count}\nüîò ${sums._sum.medal}\n\n`)
		}
		const user_inf = await User_Info(context)
        const keyboard = new KeyboardBuilder().callbackButton({
            label: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é',
            payload: {
                command: 'system_call',
                item: 'coffee'
            }
        })
        if (await prisma.user.count({ where: { idvk: user_check.idvk } }) > 1) {
            keyboard.textButton({ label: 'üîÉüë•', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'secondary' })
        }
        keyboard.inline()
		await context.send(`${user_inf.first_name}, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ú–∞–≥–æ–º–∏—Ä–∞ –û–Ω–ª–∞–π–Ω 0.16v, –ø–æ–¥ ${user_check.name} –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!`, {
			keyboard: keyboard
		})
        
        await Logger(`In private chat, invite enter in system is viewed by user ${context.senderId}`)
    })
    hearManager.hear(/‚ûïüë§/, async (context) => {
        if (context.peerType == 'chat') { return }
        await Person_Register(context)
    })
    hearManager.hear(/‚ûïüåê/, async (context) => {
        if (context.peerType == 'chat') { return }
        await Alliance_Add(context)
    })
    hearManager.hear(/üîÉüë•/, async (context) => {
        if (context.peerType == 'chat') { return }
        await Person_Selector(context)
    })
    hearManager.hear(/!–æ—Ç—á–µ—Ç –ø–æ —Ä–æ–ª–∫–∞–º/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        const res: Array<{ name: String, count: number }> = []
        for (const alli of await prisma.alliance.findMany({})) {
            res.push({ name: alli.name, count: 0 })
        }
        res.push({ name: `–°–æ–ª–æ`, count: 0 })
        res.push({ name: `–ù–µ —Å–æ—é–∑–Ω–∏–∫`, count: 0 })
        for (const us of await prisma.user.findMany({})) {
            const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(us.id_alliance) } })
            const alli_name = `${us.id_alliance == 0 ? `–°–æ–ª–æ` : us.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}`
            for (const re of res) {
                if (re.name == alli_name) {
                    re.count++
                }
            }
        }
        res.sort(function(a, b){
            return b.count - a.count;
        });
        const res_ans = res.map(re => `üåê ${re.name} - ${re.count}\n`).join('')
        await context.send(`üìú –û—Ç—á–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–¥ –≥—Ä–∏—Ñ–æ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ:\n\n${res_ans}`)
    })
    hearManager.hear(/!–æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∫–∏/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        await Alliance_Updater(context)
    })
    hearManager.hear(/‚öô !–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–ª—é—Ç—ã/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        await Alliance_Coin_Printer(context)
    })
    hearManager.hear(/‚öô !–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        await Alliance_Coin_Converter_Editor_Printer(context)
    })
    hearManager.hear(/‚öô !–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        await Alliance_Facult_Printer(context)
    })
    hearManager.hear(/‚öô !–∑–∞–∫–æ–Ω—á–∏—Ç—å —É—á–µ–±–Ω—ã–π –≥–æ–¥/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        await Alliance_Year_End_Printer(context)
    })
    hearManager.hear(/‚öô !–ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        await Alliance_Monitor_Printer(context)
    })
    hearManager.hear(/üö´ !–º–æ–Ω–∏–∫–∏_off/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!account) { return }
		const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
		if (!user_check) { return }
        for (const monitor of await prisma.monitor.findMany({ where: { id_alliance: Number(user_check.id_alliance) } })) {
            await stopMonitor(monitor.id)
        }
        await Send_Message( user_check.idvk, `üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –∞–ª—å—è–Ω—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ª–æ–≥-main —á–∞—Ç–µ`)
    })
    hearManager.hear(/üöÄ !–º–æ–Ω–∏–∫–∏_on/, async (context) => {
        if (context.peerType == 'chat') { return }
        if (await Accessed(context) == 1) { return }
        const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!account) { return }
		const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
		if (!user_check) { return }
        for (const monitor of await prisma.monitor.findMany({ where: { id_alliance: Number(user_check.id_alliance) } })) {
            await restartMonitor(monitor.id)
        }
        await Send_Message( user_check.idvk, `üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –∞–ª—å—è–Ω—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ª–æ–≥-main —á–∞—Ç–µ`)
    })
    hearManager.hear(/‚öñ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä/, async (context) => {
        if (context.peerType == 'chat') { return }
        await Alliance_Coin_Converter_Printer(context)
    })
    hearManager.hear(/üìä –û—Ç—á–∞—Ç–æ—Ä/, async (context) => {
        if (context.peerType == 'chat') { return }
        await Alliance_Coin_Rank_Admin_Printer(context)
    })
    hearManager.hear(/üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è|!—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!account) { return }
		const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
		if (!user_check) { return }
        const censored_change = await prisma.user.update({ where: { id: user_check.id }, data: { notification: user_check.notification ? false : true } })
        if (censored_change) { 
			await Send_Message(user_check.idvk, `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ ${censored_change.notification ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`)
			await Logger(`(private chat) ~ changed status activity notification self by <user> ‚Ññ${context.senderId}`)
		}
		await Keyboard_Index(context, `‚åõ –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, —Ç–æ–ª—å–∫–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ! –ï–Ω–æ—Ç—ã —É–∂–µ –Ω–µ—Å—É—Ç —É–∑–±–∞–≥–æ–∏—Ç–µ–ª—å–Ω–æ–µ...`)
    })
    hearManager.hear(/!–ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã/, async (context: any) => {
        if (context.peerType != 'chat') { return }
        const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!account) { return }
		const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
		if (!user_check) { return }
        if (await Accessed(context) == 1) { return }
        if (user_check.id_alliance == 0 || user_check.id_alliance == -1) { return }
        const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user_check.id_alliance) } })
        if (!alli_get) { return }
        const alli_log_up = await prisma.alliance.update({ where: { id: alli_get.id }, data: { id_chat: context.peerId }})
        if (!alli_log_up) { return }
        await Send_Message( alli_log_up.id_chat, `‚úÖ @id${account.idvk}(${user_check.name}), –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π —á–∞—Ç –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –¥–ª—è –∞–ª—å—è–Ω—Å–∞ [${alli_get.name}] –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º\nüí¨ id_chat: ${alli_get.id_chat} --> ${alli_log_up.id_chat}`)
    })
    hearManager.hear(/!–ø—Ä–∏–≤—è–∑–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä—ã/, async (context: any) => {
        if (context.peerType != 'chat') { return }
        const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!account) { return }
		const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
		if (!user_check) { return }
        if (await Accessed(context) == 1) { return }
        if (user_check.id_alliance == 0 || user_check.id_alliance == -1) { return }
        const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user_check.id_alliance) } })
        if (!alli_get) { return }
        const alli_log_up = await prisma.alliance.update({ where: { id: alli_get.id }, data: { id_chat_monitor: context.peerId }})
        if (!alli_log_up) { return }
        await Send_Message( alli_log_up.id_chat_monitor, `‚úÖ @id${account.idvk}(${user_check.name}), –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π —á–∞—Ç –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –¥–ª—è –∞–ª—å—è–Ω—Å–∞ [${alli_get.name}] –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π\nüí¨ id_chat_monitor: ${alli_get.id_chat_monitor} --> ${alli_log_up.id_chat_monitor}`)
    })
    hearManager.hear(/‚öô !–º–æ–Ω–∏—Ç–æ—Ä—ã –Ω–∞—Ñ–∏–≥/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!account) { return }
		const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
		if (!user_check) { return }
        if (await Accessed(context) == 1) { return }
        if (user_check.id_alliance == 0 || user_check.id_alliance == -1) { return }
        const keyboard = new KeyboardBuilder()
        keyboard.textButton({ label: '‚öô !–ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'negative' }).row()
        keyboard.textButton({ label: 'üöÄ !–º–æ–Ω–∏–∫–∏_on', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'negative' })
        keyboard.textButton({ label: 'üö´ !–º–æ–Ω–∏–∫–∏_off', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'negative' }).row().inline().oneTime()
        await Send_Message( user_check.idvk, `‚öô @id${account.idvk}(${user_check.name}), –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏:`, keyboard)
    })
    hearManager.hear(/!–ø–æ–º–æ—â—å/, async (context) => {
        await context.send(`‚ò† –ú–µ–Ω—é –ø–æ–º–æ—â–∏ –°–ø–µ–∫—Ç—Ä-3001:
            \nüë§ [!—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
            \nüë§ [üìä –û—Ç—á–∞—Ç–æ—Ä] - –º–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            \nüë§ [‚ûïüë§] - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            \nüë§ [üîÉüë•] - —Å–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            \n‚≠ê [‚öô !–º–æ–Ω–∏—Ç–æ—Ä—ã –Ω–∞—Ñ–∏–≥] - –≤—ã–∑–æ–≤ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
            \n‚≠ê [!–ø—Ä–∏–≤—è–∑–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä—ã] - –ø–∏—à–µ—Ç—Å—è –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            \n‚≠ê [!–ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã] - –ø–∏—à–µ—Ç—Å—è –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            \n‚≠ê [üöÄ !–º–æ–Ω–∏–∫–∏_on] - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            \n‚≠ê [üö´ !–º–æ–Ω–∏–∫–∏_off] - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            \n‚≠ê [!–æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∫–∏] - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–æ–ª–µ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

            \n‚ö† –ö–æ–º–∞–Ω–¥—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏:\nüë§ - –î–æ—Å—Ç—É–ø–Ω—ã –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º;\n‚≠ê - –î–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞;`
        )
        await Keyboard_Index(context, `‚åõ 911, —á—Ç–æ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å?`)
    })
    hearManager.hear(/!–º–∞–≥–∞–∑/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!account) { return }
		const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
		if (!user_check) { return }
        if (await Accessed(context) == 1) { return }
        if (user_check.id_alliance == 0 || user_check.id_alliance == -1) { return }
        const keyboard = new KeyboardBuilder()
        await AllianceShop_Printer(context, user_check.id_alliance!)
        //await Send_Message( user_check.idvk, `‚öô @id${account.idvk}(${user_check.name}), –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏:`, keyboard)
    })
    hearManager.hear(/!–ø–æ–∫—É–ø–∫–∏/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!account) { return }
		const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
		if (!user_check) { return }
        if (user_check.id_alliance == 0 || user_check.id_alliance == -1) { return }
        const keyboard = new KeyboardBuilder()
        await AllianceShop_Selector(context, user_check.id_alliance!)
        //await Send_Message( user_check.idvk, `‚öô @id${account.idvk}(${user_check.name}), –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏:`, keyboard)
    })
    /*hearManager.hear(/—Ñ–æ—Ç–æ/, async (context: any) => {
        if (context.hasAttachments('photo')) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            const attachment = context.message.attachments[0];
            const photoId = attachment.photo.id;
            const ownerId = attachment.photo.owner_id;
    
            // –§–æ—Ä–º–∞—Ç –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è
            const attachmentStr = `photo${ownerId}_${photoId}`;
            const photoUrl = attachment.photo.sizes[attachment.photo.sizes.length - 1].url
    
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userId = context.senderId;
            console.log(attachmentStr)
            await context.send('–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
            try {
                await context.send({ attachment: attachmentStr });
            } catch (e) {
                await context.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e}`);
            }
            
            //await vk.api.messages.send({ peer_id: 463031671, random_id: 0, message: `—Ç–µ—Å—Ç`, attachment: attachmentStr } )
            
        } else  {
            await context.send('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–æ–∏ —Ñ–æ—Ç–æ", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.');
        }
    })*/
}

    