import { promises as fs } from 'fs';
import { resolve } from 'path';
import { Logger, Send_Message } from './helper';
import { chat_id, group_id, vk } from '../..';

export async function Auto_Backup_DB() {
    const filePath = resolve(__dirname, './../../../prisma/dev.db'); // —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    let fileBuffer;

    try {
        fileBuffer = await fs.readFile(filePath);
    } catch (e) {
        await Send_Message(chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', e);
        return;
    }

    // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    const document = await vk?.upload.messageDocument({
        peer_id: chat_id,
        title: 'dev.db',
        tags: 'backup',
        source: {
            value: fileBuffer
        }
    });

    if (!document || !document) {
        await Send_Message(chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª');
        return;
    }
    await Send_Message(chat_id, 'üì¶ –í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', undefined, document.url);
    await Logger(`success backup`);
}