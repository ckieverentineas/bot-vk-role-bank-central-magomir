import { Keyboard, KeyboardBuilder, MessageContext } from "vk-io"
import { answerTimeLimit, chat_id, timer_text, vk } from "../.."
import { Fixed_Number_To_Five, Keyboard_Index } from "./helper"
import prisma from "../events/module/prisma_client"
import { User } from "@prisma/client"

export async function Person_Register(context: any) {
    const person: { name: null | string, alliance: null | string, class: null | string, spec: null | string } = { name: null, alliance: null, class: null, spec: null }
    let name_check = false
	while (name_check == false) {
		const name = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 64) {
            const confirma = await context.question( `üß∑ –í—ã –≤–≤–µ–ª–∏: ${name.text}\n –í—ã —É–≤–µ—Ä–µ–Ω—ã?`, {	
				keyboard: Keyboard.builder()
				.textButton({ label: '–î–∞', payload: { command: 'student' }, color: 'secondary' })
				.textButton({ label: '–ù–µ—Ç', payload: { command: 'professor' }, color: 'secondary' })
				.oneTime().inline(), answerTimeLimit
			})
		    if (confirma.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (confirma.text == "–î–∞") {
                person.name = `${name.text}`
                name_check = true
            } else {
                continue
            }

		} else { await context.send(`‚õî –í–∞—à–∏ –§–ò–û –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã (64 —Å–∏–º–≤–æ–ª–∞), –∏ –≤–æ–æ–±—â–µ, –∑–∞–ø—Ä–µ—â–µ–Ω—ã –º–∞–≥–∏—á–µ—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º! –í—ã–ø–ª–∞—Ç–∏—Ç–µ —à—Ç—Ä–∞—Ñ –≤ 30 –∂–µ—Ç–æ–Ω–æ–≤ –∏–ª–∏ –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –ø–æ–∑–≤–∞—Ç—å —Å—Ç—Ä–∞–∂–µ–π –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Å –≤ –ê–∑–∫–∞–±–∞–Ω.`) }
	}
	let answer_check = false
	while (answer_check == false) {
		const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–µ –ú–∞–≥–∏–∏`,
			{	
				keyboard: Keyboard.builder()
				.textButton({ label: '–°–æ—é–∑–Ω–∏–∫', payload: { command: 'student' }, color: 'secondary' })
				.textButton({ label: '–ù–µ —Å–æ—é–∑–Ω–∏–∫', payload: { command: 'professor' }, color: 'secondary' })
				.textButton({ label: '–°–æ–ª–æ', payload: { command: 'citizen' }, color: 'secondary' })
				.oneTime().inline(), answerTimeLimit
			}
		)
		if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (!answer_selector.payload) {
			await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
		} else {
			person.alliance = answer_selector.text
			answer_check = true
		}
	}
    let alliance_check = false
	if (person.alliance == '–°–æ—é–∑–Ω–∏–∫') {
        let id_builder_sent = 0
        while (!alliance_check) {
            const keyboard = new KeyboardBuilder()
            id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
            let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—é–∑–Ω—ã–π —Ä–æ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ:\n\n`
            const builder_list: Array<String> = ["–ê–∫–∞–¥–µ–º–∏—è –ú–æ—Ä–∫—Ç–∏–¥", "–•–æ–≥–≤–∞—Ä—Ç—Å - –ê–ù–¢–ò. –ê–∫–∞–¥–µ–º–∏—è –ù–µ –¢—ë–º–Ω—ã—Ö –ò—Å–∫—É—Å—Å—Ç–≤", "Balance Academy Talentum", "–®–∫–æ–ª–∞ –º–∞–≥–∏–∏ –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞ ¬´–ë–∏–ª–º–æ—Ä¬ª", "–ò–ª—å–≤–µ—Ä–º–æ—Ä–Ω–∏ - Ilvermorny", "ùô∞ùöåùöäùöçùöéùöñùö¢ ùöòùöè ùöñùöäùöêùöíùöå 'ùô∞ùöõùöùùöéùöú'", /*"RP TV - –†–æ–ª–µ–≤–æ–µ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ",*/ "News of Magic - –ù–æ–≤–æ—Å—Ç–∏ –º–∞–≥–∏–∏", "–†—É–±–µ–∂: –Ω–∞ —Å—Ç—ã–∫–µ –º–∏—Ä–æ–≤", "Louisiana Voodoo Academy", "–ê–∫–∞–¥–µ–º–∏—è –ê–ª—å—Ç–µ—Ä—Å—Ç—Ä–µ–≥–æ", "–•–æ–≥–≤–∞—Ä—Ç—Å –û–Ω–ª–∞–π–Ω", "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥–æ–∫ –∫–æ–ª–ª–µ–¥–∂–∞ '–•–æ—É–∫—Ñ–æ—Ä–¥'", "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –ê–∫–∞–¥–µ–º–∏—è '–ö–∏—Ä–∏—Å'", "–®–∫–æ–ª–∞ –º–∞–≥–∏–∏ –•–æ–≥–≤–∞—Ä—Ç—Å", "–ö–æ–ª–¥–æ–≤—Å—Ç–≤–æ—Ä–µ—Ü. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–§", "H·¥Ä Ä Ä è ·¥ò·¥è·¥õ·¥õ·¥á Ä - ·¥†√≠·¥Ä  ü√°·¥Ñ·¥õ·¥á·¥Ä -  Ä·¥è ü·¥á …¢·¥Ä·¥ç·¥á - –•–æ–≥–≤–∞—Ä—Ç—Å", /*"MEGALE DU NAMA - –ü–æ–∏—Å–∫ —Ä–æ–ª–µ–≤–∏–∫–æ–≤",*/ "TERRA BRITANNIA", "Breakbills | Academy magic" ]

            if (builder_list.length > 0) {
                const limiter = 5
                let counter = 0
                for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                    const builder = builder_list[i]
                    console.log(`i=${i} idsent=${id_builder_sent}`)
                    keyboard.textButton({ label: `üëÄ ${i}-${builder.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i }, color: 'secondary' }).row()
                    //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                    event_logger += `\n\nüí¨ ${i}-${builder}`
                    /*
                    const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                    counter++
                }
                event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
                //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                    keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
                }
                //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                    keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
                }
            } else {
                event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∑–¥–∞–Ω–∏—è, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å??`
            }
            const answer1: any = await context.question(`${event_logger}`,
		    	{	
		    		keyboard: keyboard.inline(), answerTimeLimit
		    	}
		    )
            if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
            console.log(answer1)
		    if (!answer1.payload) {
		    	await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
		    } else {
                console.log(answer1)
                if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                    id_builder_sent = answer1.payload.id_builder_sent
                } else {
                    person.alliance = answer1.text!
                    alliance_check = true
                }
		    }
        }
    }
    let answer_check1 = false
	while (answer_check1 == false) {
		const answer1 = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ ${person.alliance}`,
			{	
				keyboard: Keyboard.builder()
				.textButton({ label: '–£—á–µ–Ω–∏–∫', payload: { command: 'student' }, color: 'secondary' })
				.textButton({ label: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä', payload: { command: 'professor' }, color: 'secondary' })
				.textButton({ label: '–ñ–∏—Ç–µ–ª—å', payload: { command: 'citizen' }, color: 'secondary' })
				.oneTime().inline(), answerTimeLimit
			}
		)
		if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (!answer1.payload) {
			await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
		} else {
			person.class = answer1.text
			answer_check1 = true
		}
	}
	let spec_check = false
	while (spec_check == false) {
		const name = await context.question( `üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ ${person.alliance}. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä/–∂–∏—Ç–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ –≤—ã —Å—Ç—É–¥–µ–Ω—Ç, —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 30) {
			spec_check = true
			person.spec = name.text
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    const account = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    console.log(account)
    console.log(person)
    const role = await prisma.role.findFirst({})
    if (!role) { await prisma.role.create({ data: { name: "user" } }) }
    const save = await prisma.user.create({ data: { name: person.name!, alliance: person.alliance!, id_account: account?.id, spec: person.spec!, class: person.class!, idvk: account?.idvk! } })
    await context.send(`‚åõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${save.name}-${save.id}`)
    console.log(`Success save new person idvk: ${context.senderId}`)
	const check_bbox = await prisma.blackBox.findFirst({ where: { idvk: context.senderId } })
	const ans_selector = `‚Åâ ${save.class} @id${account?.idvk}(${save.name}) ${save.spec} ${!check_bbox ? "–ª–µ–≥–∞–ª—å–Ω–æ" : "–ù–ï–õ–ï–ì–ê–õ–¨–ù–û"} –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É UID: ${save.id}!`
	await vk.api.messages.send({
		peer_id: chat_id,
		random_id: 0,
		message: ans_selector
	})
	await Keyboard_Index(context, `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ö–æ–≥–¥–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ [!–±–∞–Ω–∫] –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–µ–∫, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!`)
}
	/*const save = await prisma.user.create({	data: {	idvk: context.senderId, name: datas[0].name, class: datas[1].class, spec: datas[2].spec, id_role: 1, gold: 65 } })
	await context.send(`‚åõ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ ${save.class} ${save.name}, ${save.spec}. \n ‚öñ–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É UID: ${save.id}. \n üè¶–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ ${save.gold} –≥–∞–ª–ª–µ–æ–Ω–æ–≤`)
	console.log(`Success save user idvk: ${context.senderId}`)
	await context.send(`‚Äº –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–µ—â–µ–π: \n 1. –í–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞ \n 2. –°–æ–≤–∞, –∫–æ—à–∫–∞ –∏–ª–∏ –∂–∞–±–∞ \n 3. –ö–æ–º–ø–ª–µ–∫—Ç —É—á–µ–±–Ω–∏–∫–æ–≤ \n \n –ü–æ—Å–µ—Ç–∏—Ç–µ –ö–æ—Å–æ–π –ø–µ—Ä–µ—É–ª–æ–∫ –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º!`)
	const check_bbox = await prisma.blackBox.findFirst({ where: { idvk: context.senderId } })
	const ans_selector = `‚Åâ ${save.class} @id${save.idvk}(${save.name}) ${save.spec} ${!check_bbox ? "–ª–µ–≥–∞–ª—å–Ω–æ" : "–ù–ï–õ–ï–ì–ê–õ–¨–ù–û"} –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É UID: ${save.id}!`
	await vk.api.messages.send({
		peer_id: chat_id,
		random_id: 0,
		message: ans_selector
	})*/

export async function Person_Selector(context: any) {
    const account = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    const person = await prisma.user.findMany({where: {id_account: account?.id }})
    let person_check = false
    let person_sel = null
    if (person.length > 0) {
        let id_builder_sent = 0
        while (!person_check) {
            const keyboard = new KeyboardBuilder()
            id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
            let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n\n`
            if (person.length > 0) {
                const limiter = 5
                let counter = 0
                for (let i=id_builder_sent; i < person.length && counter < limiter; i++) {
                    const builder = person[i]
                    console.log(`i=${i} idsent=${id_builder_sent}`)
                    keyboard.textButton({ label: `üëÄ ${builder.id}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, id_person: builder.id }, color: 'secondary' }).row()
                    //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                    event_logger += `\n\nüí¨ ${builder.id}-${builder.name}`
                    /*
                    const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                    counter++
                }
                event_logger += `\n\n${person.length > 1 ? `~~~~ ${person.length > limiter ? id_builder_sent+limiter : limiter-(person.length-id_builder_sent)} –∏–∑ ${person.length} ~~~~` : ''}`
                //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
                if (person.length > limiter && id_builder_sent > limiter-1 ) {
                    keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
                }
                //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
                if (person.length > limiter && id_builder_sent < person.length-limiter) {
                    keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
                }
            } else {
                event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∑–¥–∞–Ω–∏—è, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å??`
            }
            const answer1: any = await context.question(`${event_logger}`,
                {	
                    keyboard: keyboard.inline(), answerTimeLimit
                }
            )
            if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (!answer1.payload) {
                await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
            } else {
                console.log(answer1)
                if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                    id_builder_sent = answer1.payload.id_builder_sent
                } else {
                    person_sel = answer1.payload.id_person
                    person_check = true
                }
            }
        }
    }
    const person_get = await prisma.user.findFirst({ where: { id: person_sel, id_account: account?.id } })
    const person_sel_up = await prisma.account.update({ where: { id: account?.id }, data: { select_user: person_sel } })
    await context.send(`–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:\nGUID: ${person_get?.id_account}\nUID: ${person_get?.id}\n–§–ò–û: ${person_get?.name}\n–ê–ª—å—è–Ω—Å: ${person_get?.alliance}\n–ñ–µ—Ç–æ–Ω—ã: ${person_get?.medal}\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${person_get?.crdate}\n\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –õ–∞-–õ–∞-–õ–∞`)
}

export async function Person_Detector(context: any) {
    const account = await prisma.account.findFirst({ where: { idvk: context.senderId ?? context.peerId } })
    const person_find = await prisma.user.findFirst({ where: { id: account?.select_user } })
    if (!person_find) { 
        const person_sel = await prisma.user.findFirst({ where: { id_account: account?.id } })
        const account_up = await prisma.account.update({ where: { id: account?.id }, data: { select_user: person_sel?.id } })
        if (account_up) { console.log(`succes init default person for ${account?.idvk}`) }
    }
}

export async function Person_Get(context: any) {
    const account = await prisma.account.findFirst({ where: { idvk: context.peerId ?? context.senderId } })
    const get_user: User | null | undefined = await prisma.user.findFirst({ where: { id: account?.select_user } })
    return get_user
}