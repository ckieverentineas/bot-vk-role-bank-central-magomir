import { Alliance, AllianceCoin, Monitor } from "@prisma/client";
import prisma from "../prisma_client";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { answerTimeLimit, chat_id, timer_text } from "../../../..";
import { Confirm_User_Success, Fixed_Number_To_Five, Keyboard_Index, Logger, Send_Message } from "../../../core/helper";
import { Person_Get } from "../person/person";

//–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏ –∞–ª—å—è–Ω—Å–∞
async function Alliance_Monitor_Get(cursor: number, alliance: Alliance) {
    const batchSize = 5;
    let counter = 0
    let limiter = 0
    let res: Monitor[] = []
    for (const allicoin of await prisma.monitor.findMany({ where: { id_alliance: alliance.id } })) {
        if ((cursor <= counter && batchSize+cursor >= counter) && limiter < batchSize) {
            res.push(allicoin)
            limiter++
        }
        counter++
    }
    
   return res
}

export async function Alliance_Monitor_Printer(context: any) {
    const user = await Person_Get(context)
    const alliance = await prisma.alliance.findFirst({ where: { id: Number(user?.id_alliance) } })
    if (!alliance) { return }
    if (!user) { return }
    let allicoin_tr = false
    let cursor = 0
    while (!allicoin_tr) {
        const keyboard = new KeyboardBuilder()
        let event_logger = ``
        for await (const monitor of await Alliance_Monitor_Get(cursor, alliance!)) {
            const coins = await prisma.allianceCoin.findFirst({ where: { id: monitor.id_coin ?? 0 } })
            keyboard.textButton({ label: `‚úè ${monitor.id}-${alliance.name.slice(0,30)}`, payload: { command: 'alliance_coin_edit', cursor: cursor, id_alliance_coin: monitor.id }, color: 'secondary' })
            .textButton({ label: `‚õî`, payload: { command: 'alliance_coin_delete', cursor: cursor, id_alliance_coin: monitor.id }, color: 'secondary' }).row()
            //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
            event_logger += `üåê ${alliance.name}: id${monitor.id}\n${coins?.smile} –í–∞–ª—é—Ç–∞: ${coins?.name}\nüöß –õ–∏–º–∏—Ç—ã: ${monitor.lim_like}üëç ${monitor.lim_comment}üí¨ ‚ôæüì∞\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${monitor.cost_like}üëç ${monitor.cost_comment}üí¨ ${monitor.cost_comment}üì∞\n\n`
        }
        if (cursor >= 5) { keyboard.textButton({ label: `‚Üê`, payload: { command: 'alliance_coin_back', cursor: cursor }, color: 'secondary' }) }
        const alliance_coin_counter = await prisma.allianceCoin.count({ where: { id_alliance: alliance!.id! } })
        if (5+cursor < alliance_coin_counter) { keyboard.textButton({ label: `‚Üí`, payload: { command: 'alliance_coin_next', cursor: cursor }, color: 'secondary' }) }
        keyboard.textButton({ label: `‚ûï`, payload: { command: 'alliance_coin_create', cursor: cursor }, color: 'secondary' }).row()
        .textButton({ label: `üö´`, payload: { command: 'alliance_coin_return', cursor: cursor }, color: 'secondary' }).oneTime()
        event_logger += `\n ${1+cursor} –∏–∑ ${alliance_coin_counter}`
        const allicoin_bt: any = await context.question(`üß∑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∫ ${alliance?.name}:\n\n ${event_logger}`,
            {	
                keyboard: keyboard, answerTimeLimit
            }
        )
        if (allicoin_bt.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã ${alliance?.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
        const config: any = {
            'alliance_coin_edit': Alliance_Coin_Edit,
            'alliance_coin_create': Alliance_Monitor_Create,
            'alliance_coin_next': Alliance_Monitor_Next,
            'alliance_coin_back': Alliance_Monitor_Back,
            'alliance_coin_return': Alliance_Monitor_Return,
            'alliance_coin_delete': Alliance_Monitor_Delete
        }
        if (allicoin_bt?.payload?.command in config) {
            const commandHandler = config[allicoin_bt.payload.command];
            const ans = await commandHandler(context, allicoin_bt.payload, alliance)
            cursor = ans?.cursor || ans?.cursor == 0 ? ans.cursor : cursor
            allicoin_tr = ans.stop ? ans.stop : false
        } else {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        }
    }
    await Keyboard_Index(context, 'üí° –ù—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∏–∫–∫—É—Ä–∞—Ç!')
}

async function Alliance_Monitor_Delete(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    const alliance_coin_check = await prisma.monitor.findFirst({ where: { id: data.id_alliance_coin } })
    const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å –º–æ–Ω–∏–æ—Ä ${alliance_coin_check?.id}?`)
    await context.send(`${confirm.text}`)
    if (!confirm.status) { return res }
    if (alliance_coin_check) {
        const alliance_coin_del = await prisma.monitor.delete({ where: { id: alliance_coin_check.id } })
        if (alliance_coin_del) {
            await Logger(`In database, deleted alliance monitor: ${alliance_coin_del.id} by admin ${context.senderId}`)
            await context.send(`–í—ã —É–¥–∞–ª–∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä: ${alliance_coin_del.id} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${alliance.name}!`)
        }
    }
    return res
}

async function Alliance_Monitor_Return(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor, stop: true }
    await context.send(`–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ${alliance.id}-${alliance.name}`, { keyboard: Keyboard.builder().callbackButton({ label: 'üåê –í —Ä–æ–ª–µ–≤—É—é', payload: { command: 'alliance_enter' }, color: 'primary' }).inline() })
    return res
}

async function Alliance_Coin_Edit(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    let spec_check = false
    let name_loc = null
    const alliance_coin_check = await prisma.allianceCoin.findFirst({ where: { id: data.id_alliance_coin } })
	while (spec_check == false) {
		const name = await context.question( `üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã: ${alliance_coin_check?.name}. –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–µ–≥–æ:`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã ${alliance_coin_check?.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 300) {
			spec_check = true
			name_loc = `${name.text}`
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    let smile_check = false
    let smile = alliance_coin_check?.smile
	while (smile_check == false) {
		const smile_ask: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã ${name_loc}, —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç ${smile}:`, timer_text)
		if (smile_ask.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–º–∞–π–ª–∏–∫–∞ –≤–∞–ª—é—Ç—ã ${name_loc} –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (smile_ask.text.length <= 10) {
			smile_check = true
			smile = `${smile_ask.text}`
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    alliance_coin_check?.point == true ? await context.send(`–í–∞–ª—é—Ç–∞ ${name_loc} —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π`) : await context.send(`–í–∞–ª—é—Ç–∞ ${name_loc} —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π`)
	const rank_check: { status: boolean, text: String } = await Confirm_User_Success(context, `—Å–¥–µ–ª–∞—Ç—å –≤–∞–ª—é—Ç—É ${name_loc} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π?`)
    await context.send(`${rank_check.text}`)
    if (name_loc) {
        const quest_up = await prisma.allianceCoin.update({ where: { id: alliance_coin_check?.id }, data: { name: name_loc, smile: smile!, point: rank_check.status } })
        if (quest_up) {
            await Logger(`In database, updated alliance coin: ${quest_up.id}-${quest_up.name} by admin ${context.senderId}`)
            await context.send(`‚öô –í—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤–∞–ª—é—Ç—É:\n –ù–∞–∑–≤–∞–Ω–∏–µ: ${alliance_coin_check?.id}-${alliance_coin_check?.name} --> ${quest_up.id}-${quest_up.name}\n –°–º–∞–π–ª–∏–∫: ${alliance_coin_check?.smile} --> ${quest_up.smile}\n –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: ${alliance_coin_check?.point == true ? "‚úÖ" : "‚õî"} --> ${quest_up.point == true ? "‚úÖ" : "‚õî"}`)
        }
    }
    return res
}

async function Alliance_Monitor_Next(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor+5 }
    return res
}

async function Alliance_Monitor_Back(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor-5 }
    return res
}

async function Alliance_Monitor_Create(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    const monik = { token: ``, id_alliance: null, alliance: ``, id_coin: 0, coin: `` }
    let spec_check = false
	while (spec_check == false) {
		const name = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≥—Ä—É–ø–ø—ã:`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 300) {
			spec_check = true
			monik.token = `${name.text}`
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    let alliance_check = false
    let id_builder_sent = 0
    while (!alliance_check) {
        const keyboard = new KeyboardBuilder()
        id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
        let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—é–∑–Ω—ã–π —Ä–æ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç, –≤–æ —Å–ª–∞–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å:\n\n`
        const builder_list: Alliance[] = await prisma.alliance.findMany({})
        if (builder_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                const builder = builder_list[i]
                keyboard.textButton({ label: `üåê ‚Ññ${i}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                event_logger += `\n\nüîí –†–æ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç ‚Ññ${i} <--\nüìú AUID: ${builder.id}\nüåê –ù–∞–∑–≤–∞–Ω–∏–µ: ${builder.name}\nüß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${builder.idvk}`
                counter++
            }
            event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–æ–ª–µ–≤—ã–µ
            if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–µ —Ä–æ–ª–µ–≤—ã–µ
            if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
            }
        } else {
            event_logger = `üí¨ –†–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç...`
        }
        const answer1: any = await context.question(`${event_logger}`,
	    	{	
	    		keyboard: keyboard.inline(), answerTimeLimit
	    	}
	    )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
	    if (!answer1.payload) {
	    	await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
	    } else {
            if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                id_builder_sent = answer1.payload.id_builder_sent
            } else {
                monik.alliance = answer1.payload.target.name
                monik.id_alliance = answer1.payload.target.id
                alliance_check = true
            }
	    }
    }
    
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(alliance.id) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    let coin_check = false
    let id_builder_sent1 = 0
    while (!coin_check) {
        const keyboard = new KeyboardBuilder()
        id_builder_sent1 = await Fixed_Number_To_Five(id_builder_sent1)
        let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:\n\n`
        const builder_list: AllianceCoin[] = coin_pass
        if (builder_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=id_builder_sent1; i < builder_list.length && counter < limiter; i++) {
                const builder = builder_list[i]
                keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent1: i, id_coin: builder.id, coin: builder.name }, color: 'secondary' }).row()
                //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                /*
                const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                counter++
            }
            event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent1+limiter : limiter-(builder_list.length-id_builder_sent1)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent1 > limiter-1 ) {
                keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent1: id_builder_sent1-limiter}, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent1 < builder_list.length-limiter) {
                keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent1: id_builder_sent1+limiter }, color: 'secondary' })
            }
        } else {
            event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
            return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
        }
        const answer1: any = await context.question(`${event_logger}`,
            {	
                keyboard: keyboard.inline(), answerTimeLimit
            }
        )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                id_builder_sent1 = answer1.payload.id_builder_sent1
            } else {
                monik.coin = answer1.payload.coin
                monik.id_coin = answer1.payload.id_coin
                coin_check = true
            }
        }
    }
	const rank_check: { status: boolean, text: String } = await Confirm_User_Success(context, `–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã ${monik.alliance}?`)
    await context.send(`${rank_check.text}`)
    const monitor_cr = await prisma.monitor.create({ data: { token: monik.token, id_alliance: monik.id_alliance!, id_coin: monik.id_coin } })
    if (monitor_cr) {
        await Logger(`In database, created monitor for group ${monik.alliance} by admin ${context.senderId}`)
        await context.send(`‚öô –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä ${monitor_cr.id} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${monik.alliance}`)
        await Send_Message(chat_id, `‚öô –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä ${monitor_cr.id} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${monik.alliance}`)
    }
    return res
}