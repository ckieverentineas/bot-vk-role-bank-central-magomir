import { Alliance, AllianceCoin, BalanceFacult, Monitor } from "@prisma/client";
import prisma from "../prisma_client";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { answerTimeLimit, chat_id, SECRET_KEY, timer_text, vk } from "../../../..";
import { Confirm_User_Success, Fixed_Number_To_Five, Keyboard_Index, Logger, Send_Message } from "../../../core/helper";
import { Person_Get } from "../person/person";
import * as CryptoJS from 'crypto-js';

//–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏ –∞–ª—å—è–Ω—Å–∞
async function Alliance_Monitor_Get(cursor: number, alliance: Alliance) {
    const batchSize = 5;
    let counter = 0
    let limiter = 0
    let res: Monitor[] = []
    for (const allicoin of await prisma.monitor.findMany({ where: { id_alliance: alliance.id } })) {
        if ((cursor <= counter && batchSize+cursor >= counter) && limiter < batchSize) {
            res.push(allicoin)
            limiter++
        }
        counter++
    }
    
   return res
}

export async function Alliance_Monitor_Printer(context: any) {
    const user = await Person_Get(context)
    const alliance = await prisma.alliance.findFirst({ where: { id: Number(user?.id_alliance) } })
    if (!alliance) { return }
    if (!user) { return }
    let allicoin_tr = false
    let cursor = 0
    while (!allicoin_tr) {
        const keyboard = new KeyboardBuilder()
        let event_logger = ``
        for await (const monitor of await Alliance_Monitor_Get(cursor, alliance!)) {
            const coins = await prisma.allianceCoin.findFirst({ where: { id: monitor.id_coin ?? 0 } })
            keyboard.textButton({ label: `‚úè ${monitor.id}-${monitor.name.slice(0,30)}`, payload: { command: 'alliance_coin_edit', cursor: cursor, id_alliance_coin: monitor.id }, color: 'secondary' })
            .textButton({ label: `‚õî`, payload: { command: 'alliance_coin_delete', cursor: cursor, id_alliance_coin: monitor.id }, color: 'secondary' }).row()
            //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
            event_logger += `üé• ${monitor.name}: id${monitor.id}\nüß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${monitor.idvk}\n${coins?.smile} –í–∞–ª—é—Ç–∞: ${coins?.name}\nüöß –õ–∏–º–∏—Ç—ã: ${monitor.lim_like}üëç ${monitor.lim_comment}üí¨ ‚ôæüì∞\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${monitor.cost_like}üëç ${monitor.cost_comment}üí¨ ${monitor.cost_post}üì∞\n‚öô –°—Ç–∞—Ç—É—Å: ${monitor.like_on}üëç ${monitor.comment_on}üí¨ ${monitor.wall_on}üì∞\n\n`
        }
        if (cursor >= 5) { keyboard.textButton({ label: `‚Üê`, payload: { command: 'alliance_coin_back', cursor: cursor }, color: 'secondary' }) }
        const alliance_coin_counter = await prisma.allianceCoin.count({ where: { id_alliance: alliance!.id! } })
        if (5+cursor < alliance_coin_counter) { keyboard.textButton({ label: `‚Üí`, payload: { command: 'alliance_coin_next', cursor: cursor }, color: 'secondary' }) }
        keyboard.textButton({ label: `‚ûï`, payload: { command: 'alliance_coin_create', cursor: cursor }, color: 'secondary' }).row()
        .textButton({ label: `üö´`, payload: { command: 'alliance_coin_return', cursor: cursor }, color: 'secondary' }).oneTime()
        event_logger += `\n ${1+cursor} –∏–∑ ${alliance_coin_counter}`
        const allicoin_bt: any = await context.question(`üß∑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∫ ${alliance?.name}:\n\n ${event_logger}`,
            {	
                keyboard: keyboard, answerTimeLimit
            }
        )
        if (allicoin_bt.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${alliance?.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
        const config: any = {
            'alliance_coin_edit': Alliance_Monitor_Edit,
            'alliance_coin_create': Alliance_Monitor_Create,
            'alliance_coin_next': Alliance_Monitor_Next,
            'alliance_coin_back': Alliance_Monitor_Back,
            'alliance_coin_return': Alliance_Monitor_Return,
            'alliance_coin_delete': Alliance_Monitor_Delete
        }
        if (allicoin_bt?.payload?.command in config) {
            const commandHandler = config[allicoin_bt.payload.command];
            const ans = await commandHandler(context, allicoin_bt.payload, alliance)
            cursor = ans?.cursor || ans?.cursor == 0 ? ans.cursor : cursor
            allicoin_tr = ans.stop ? ans.stop : false
        } else {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        }
    }
    await Keyboard_Index(context, 'üí° –ù—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∏–∫–∫—É—Ä–∞—Ç!')
}

async function Alliance_Monitor_Delete(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    const alliance_coin_check = await prisma.monitor.findFirst({ where: { id: data.id_alliance_coin } })
    const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä ${alliance_coin_check?.id}?`)
    await context.send(`${confirm.text}`)
    if (!confirm.status) { return res }
    if (alliance_coin_check) {
        const alliance_coin_del = await prisma.monitor.delete({ where: { id: alliance_coin_check.id } })
        if (alliance_coin_del) {
            await Logger(`In database, deleted alliance monitor: ${alliance_coin_del.id} by admin ${context.senderId}`)
            await context.send(`–í—ã —É–¥–∞–ª–∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä: ${alliance_coin_del.id} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${alliance.name}!`)
            await Send_Message(chat_id, `üé• –£–¥–∞–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä ${alliance_coin_del.name}-${alliance_coin_del.id} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${alliance.name}-${alliance.id}`)
        }
    }
    return res
}

async function Alliance_Monitor_Return(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor, stop: true }
    await context.send(`–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ${alliance.id}-${alliance.name}`, { keyboard: Keyboard.builder().callbackButton({ label: 'üåê –í —Ä–æ–ª–µ–≤—É—é', payload: { command: 'alliance_enter' }, color: 'primary' }).inline() })
    return res
}

async function Alliance_Monitor_Edit(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    const monitora = await prisma.monitor.findFirst({ where: { id: data.id_alliance_coin } })
    if (!monitora) { return }
    const monik = { alliance: alliance.name, coin: '', id_coin: monitora.id_coin, cost_like: monitora.cost_like, cost_comment: monitora.cost_comment, cost_post: monitora.cost_post, lim_like: monitora.lim_like, lim_comment: monitora.lim_comment, starting: monitora.starting, wall_on: monitora.wall_on, like_on: monitora.like_on, comment_on: monitora.comment_on }
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(alliance.id) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    let coin_check = false
    let id_builder_sent1 = 0
    while (!coin_check) {
        const keyboard = new KeyboardBuilder()
        id_builder_sent1 = await Fixed_Number_To_Five(id_builder_sent1)
        let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:\n\n`
        const builder_list: AllianceCoin[] = coin_pass
        if (builder_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=id_builder_sent1; i < builder_list.length && counter < limiter; i++) {
                const builder = builder_list[i]
                keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent1: i, id_coin: builder.id, coin: builder.name }, color: 'secondary' }).row()
                //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                /*
                const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                counter++
            }
            event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent1+limiter : limiter-(builder_list.length-id_builder_sent1)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent1 > limiter-1 ) {
                keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent1: id_builder_sent1-limiter}, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent1 < builder_list.length-limiter) {
                keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent1: id_builder_sent1+limiter }, color: 'secondary' })
            }
        } else {
            event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
            return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
        }
        const answer1: any = await context.question(`${event_logger}`,
            {	
                keyboard: keyboard.inline(), answerTimeLimit
            }
        )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                id_builder_sent1 = answer1.payload.id_builder_sent1
            } else {
                monik.coin = answer1.payload.coin
                monik.id_coin = answer1.payload.id_coin
                coin_check = true
            }
        }
    }

    let lim_like_tr = false;
	while (lim_like_tr == false) {
		const name = await context.question( `üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ª–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å, c–µ–π—á–∞—Å, ${monik.lim_like}üëç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`, timer_text)
		if (name.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ –≤ —Å—É—Ç–∫–∏ –∏—Å—Ç–µ–∫–ª–æ!`); return res }
		if (typeof Number(name.text) === "number") {
            const input = Math.floor(Number(name.text))
            if (Number.isNaN(input)) { await context.send(`‚ö† –ù–µ –Ω—É —Ä–µ–∞–ª—å–Ω–æ, —Ç—ã –¥—É—Ä–∞–∫/–¥—É—Ä–∞ –∏–ª–∏ –∫–∞–∫? –ß–∏—Å–ª–æ –Ω–∞–ø–∏—à–∏ –Ω–∞—Ñ–∏–≥!`); continue }
			lim_like_tr = true
			monik.lim_like = Number(name.text)
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!`) }
	}
    let cost_like_tr = false;
	while (cost_like_tr == false) {
		const name = await context.question( `üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–∞–π–∫–∞, c–µ–π—á–∞—Å, ${monik.cost_like}üëç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`, timer_text)
		if (name.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–∞–π–∫–∞ –∏—Å—Ç–µ–∫–ª–æ!`); return res }
		if (typeof Number(name.text) === "number") {
            const input = Math.floor(Number(name.text))
            if (Number.isNaN(input)) { await context.send(`‚ö† –ù–µ –Ω—É —Ä–µ–∞–ª—å–Ω–æ, —Ç—ã –¥—É—Ä–∞–∫/–¥—É—Ä–∞ –∏–ª–∏ –∫–∞–∫? –ß–∏—Å–ª–æ –Ω–∞–ø–∏—à–∏ –Ω–∞—Ñ–∏–≥!`); continue }
			cost_like_tr = true
			monik.cost_like = Number(name.text)
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!`) }
	}

    let lim_comment_tr = false;
	while (lim_comment_tr == false) {
		const name = await context.question( `üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ª–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –¥–µ–Ω—å, c–µ–π—á–∞—Å, ${monik.lim_comment}üí¨ ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`, timer_text)
		if (name.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å—É—Ç–∫–∏ –∏—Å—Ç–µ–∫–ª–æ!`); return res }
		if (typeof Number(name.text) === "number") {
            const input = Math.floor(Number(name.text))
            if (Number.isNaN(input)) { await context.send(`‚ö† –ù–µ –Ω—É —Ä–µ–∞–ª—å–Ω–æ, —Ç—ã –¥—É—Ä–∞–∫/–¥—É—Ä–∞ –∏–ª–∏ –∫–∞–∫? –ß–∏—Å–ª–æ –Ω–∞–ø–∏—à–∏ –Ω–∞—Ñ–∏–≥!`); continue }
			lim_comment_tr = true
			monik.lim_comment = Number(name.text)
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!`) }
	}
    let cost_comment_tr = false;
	while (cost_comment_tr == false) {
		const name = await context.question( `üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, c–µ–π—á–∞—Å, ${monik.cost_comment}üí¨ ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`, timer_text)
		if (name.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏—Å—Ç–µ–∫–ª–æ!`); return res }
		if (typeof Number(name.text) === "number") {
            const input = Math.floor(Number(name.text))
            if (Number.isNaN(input)) { await context.send(`‚ö† –ù–µ –Ω—É —Ä–µ–∞–ª—å–Ω–æ, —Ç—ã –¥—É—Ä–∞–∫/–¥—É—Ä–∞ –∏–ª–∏ –∫–∞–∫? –ß–∏—Å–ª–æ –Ω–∞–ø–∏—à–∏ –Ω–∞—Ñ–∏–≥!`); continue }
			cost_comment_tr = true
			monik.cost_comment = Number(name.text)
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!`) }
	}

    let cost_post_tr = false;
	while (cost_post_tr == false) {
		const name = await context.question( `üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞, c–µ–π—á–∞—Å, ${monik.cost_post}üì∞ ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`, timer_text)
		if (name.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!`); return res }
		if (typeof Number(name.text) === "number") {
            const input = Math.floor(Number(name.text))
            if (Number.isNaN(input)) { await context.send(`‚ö† –ù–µ –Ω—É —Ä–µ–∞–ª—å–Ω–æ, —Ç—ã –¥—É—Ä–∞–∫/–¥—É—Ä–∞ –∏–ª–∏ –∫–∞–∫? –ß–∏—Å–ª–æ –Ω–∞–ø–∏—à–∏ –Ω–∞—Ñ–∏–≥!`); continue }
			cost_post_tr = true
			monik.cost_post = Number(name.text)
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!`) }
	}

    const starting_tr: { status: boolean, text: String } = await Confirm_User_Success(context, `–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã ${monik.alliance}?`)
    monik.starting = starting_tr.status
    await context.send(`${starting_tr.text}`)

    const like_on_tr: { status: boolean, text: String } = await Confirm_User_Success(context, `–≤–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤–æ —Å–ª–∞–≤—É –ø—Ä–æ–µ–∫—Ç–∞ ${monik.alliance} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∞–π–∫–∞–º–∏?`)
    monik.like_on = like_on_tr.status
    await context.send(`${like_on_tr.text}`)

    const comment_on_tr: { status: boolean, text: String } = await Confirm_User_Success(context, `–≤–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤–æ —Å–ª–∞–≤—É –ø—Ä–æ–µ–∫—Ç–∞ ${monik.alliance} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏?`)
    monik.comment_on = comment_on_tr.status
    await context.send(`${comment_on_tr.text}`)

    const wall_on_tr: { status: boolean, text: String } = await Confirm_User_Success(context, `–≤–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤–æ —Å–ª–∞–≤—É –ø—Ä–æ–µ–∫—Ç–∞ ${monik.alliance} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏?`)
    monik.wall_on = wall_on_tr.status
    await context.send(`${wall_on_tr.text}`)

    const monitor_up = await prisma.monitor.update({ where: { id: monitora.id }, data: { id_coin: monik.id_coin, cost_like: monik.cost_like, cost_comment: monik.cost_comment, cost_post: monik.cost_post, lim_like: monik.lim_like, lim_comment: monik.lim_comment, starting: monik.starting, wall_on: monik.wall_on, like_on: monik.like_on, comment_on: monik.comment_on } })
    if (!monitor_up) { return res }
    await Logger(`In database, updated monitor: ${monitor_up.id}-${monitor_up.name} by admin ${context.senderId}`)
    await context.send(`‚öô –í—ã –æ–±–Ω–æ–≤–∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∞ ${monitor_up.id}-${monitor_up.name}, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É, –ø—Ä–æ–π–¥–µ–º—Ç–µ—Å—å –ø–æ –ø—É—Ç–∏ !–±–∞–Ω–∫ --> ${alliance.name} --> ‚öô –ê–¥–º–∏–Ω–∞–º --> ‚öô !–º–æ–Ω–∏—Ç–æ—Ä—ã –Ω–∞—Ñ–∏–≥ --> üö´ !–º–æ–Ω–∏–∫–∏_off --> üöÄ !–º–æ–Ω–∏–∫–∏_on.`)
    return res
}

async function Alliance_Monitor_Next(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor+5 }
    return res
}

async function Alliance_Monitor_Back(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor-5 }
    return res
}

async function Alliance_Monitor_Create(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    const monik = { token: ``, id_alliance: alliance.id, alliance: alliance.name, id_coin: 0, coin: ``, name: `zero`, idvk_group: 0 }

    let spec_check1 = false
    let targeta = null
	while (spec_check1 == false) {
		const name = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 256) {
			spec_check1 = true
			targeta = name.text
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    const temp = targeta.replace(/.*[/]/, "");
    try {
        const [group] = await vk.api.groups.getById({ group_id: temp });
	    if (!group) { return }
	    const alli_check = await prisma.monitor.findFirst({ where: { idvk: group.id } })
	    if (!alli_check) {
            monik.name = group.name!
            monik.idvk_group = group.id!
	    } else {
	    	await Logger(`In database already created monitor idvk ${group.id}`)
            return await context.send(`‚öô –ú–æ–Ω–∏—Ç–æ—Ä —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω:\nüí¨ ${alli_check.id} - ${alli_check.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${alli_check.idvk}\nüåê –ê–ª—å—è–Ω—Å: ${alliance.name}`)
	    }
    } catch (e) {
        return await context.send(`‚õî –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`)
    }

    let spec_check = false
	while (spec_check == false) {
		const name = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≥—Ä—É–ø–ø—ã:`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 300) {
			spec_check = true
			monik.token = `${Encrypt_Data(name.text)}`
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    await context.send(`‚ö† –¢–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç, —É–¥–∞–ª–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ!`)
    
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(alliance.id) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    let coin_check = false
    let id_builder_sent1 = 0
    while (!coin_check) {
        const keyboard = new KeyboardBuilder()
        id_builder_sent1 = await Fixed_Number_To_Five(id_builder_sent1)
        let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:\n\n`
        const builder_list: AllianceCoin[] = coin_pass
        if (builder_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=id_builder_sent1; i < builder_list.length && counter < limiter; i++) {
                const builder = builder_list[i]
                keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent1: i, id_coin: builder.id, coin: builder.name }, color: 'secondary' }).row()
                //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                /*
                const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                counter++
            }
            event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent1+limiter : limiter-(builder_list.length-id_builder_sent1)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent1 > limiter-1 ) {
                keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent1: id_builder_sent1-limiter}, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent1 < builder_list.length-limiter) {
                keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent1: id_builder_sent1+limiter }, color: 'secondary' })
            }
        } else {
            event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
            return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
        }
        const answer1: any = await context.question(`${event_logger}`,
            {	
                keyboard: keyboard.inline(), answerTimeLimit
            }
        )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                id_builder_sent1 = answer1.payload.id_builder_sent1
            } else {
                monik.coin = answer1.payload.coin
                monik.id_coin = answer1.payload.id_coin
                coin_check = true
            }
        }
    }
	const starting_check: { status: boolean, text: String } = await Confirm_User_Success(context, `–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã ${monik.alliance}?`)
    await context.send(`${starting_check.text}`)
    const monitor_cr = await prisma.monitor.create({ data: { token: monik.token, id_alliance: monik.id_alliance, id_coin: monik.id_coin, name: monik.name, idvk: monik.idvk_group, starting: starting_check.status } })
    if (monitor_cr) {
        await Logger(`In database, created monitor for group ${monik.alliance} by admin ${context.senderId}`)
        await context.send(`‚öô –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä ${monitor_cr.id} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${monik.alliance}\n –ß—Ç–æ–±—ã –µ–≥–æ –ø–æ–¥–Ω—è—Ç—å –Ω–∞ –ø—è—Ç—ã–π —ç—Ç–∞–∂, –ø—Ä–æ–π–¥–µ–º—Ç–µ—Å—å –ø–æ –ø—É—Ç–∏ !–±–∞–Ω–∫ --> ${alliance.name} --> ‚öô –ê–¥–º–∏–Ω–∞–º --> ‚öô !–º–æ–Ω–∏—Ç–æ—Ä—ã –Ω–∞—Ñ–∏–≥ --> üöÄ !–º–æ–Ω–∏–∫–∏_on`)
        await Send_Message(chat_id, `üé• –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä ${monitor_cr.name}-${monitor_cr.id} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${monik.alliance}-${monik.id_alliance}`)
    }
    return res
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function Encrypt_Data(data: string): string {
    const encryptedData = CryptoJS.AES.encrypt(data, SECRET_KEY).toString();
    return encryptedData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function User_Bonus_Check(idvk: number, monitor: Monitor) {
    const account = await prisma.account.findFirst({ where: { idvk: idvk } })
    if (!account) { return false; }
    const user = await prisma.user.findFirst({ where: { id_account: account.id, id_alliance: monitor.id_alliance } })
    if (!user) { return false; }
    return user
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
export async function Calc_Bonus_Activity(idvk: number, operation: '+' | '-', reward: number, target: string, link: string, monitor: Monitor) {
    const answer = { status: false, message: '', console: '', logging: '' } // –æ—Ç–≤–µ—Ç
    // –ø—Ä–µ—Ñ–∞–± –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const account = await prisma.account.findFirst({ where: { idvk: idvk } })
    if (!account) { return answer; }
    const user = await prisma.user.findFirst({ where: { id_account: account.id, id_alliance: monitor.id_alliance } })
    if (!user) { return answer; }
    const balance = await prisma.balanceCoin.findFirst({ where: { id_coin: monitor.id_coin ?? 0, id_user: user.id }})
    if (!balance) { return answer; }
    // –ø—Ä–µ—Ñ–∞–± —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    const coin = await prisma.allianceCoin.findFirst({ where: { id: monitor.id_coin ?? 0, id_alliance: monitor.id_alliance }})
    const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: user.id_facult ?? 0 } })
    const alliance = await prisma.alliance.findFirst({ where: { id: monitor.id_alliance } })
    const balance_facult_check = await prisma.balanceFacult.findFirst({ where: { id_coin: monitor.id_coin ?? 0, id_facult: user.id_facult ?? 0 } })
    switch (operation) {
        case '+':
            const balance_up = await prisma.balanceCoin.update({ where: { id: balance.id }, data: { amount: { increment: reward } } })
            if (!balance_up) { return answer; }
            answer.message += `üì∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π ${target} ${reward} ${coin?.name}\nüß∑ –°—Å—ã–ª–∫–∞: ${link}\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.amount} ${operation} ${reward} = ${balance_up.amount}${coin?.smile}\n`
            answer.console += `(monitor) ~ user ${user.idvk} ${target} and got ${reward} ${coin?.name}, link ${link}, balance ${balance.amount} ${operation} ${reward} = ${balance_up.amount}${coin?.smile} by <monitor> ‚Ññ${monitor.id}`
            answer.status = true
            if (coin?.point == true && balance_facult_check) {
                const balance_facult_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: balance_facult_check.id }, data: { amount: { increment: reward } } })
                if (balance_facult_plus) {
                    answer.message += `üåê "${operation}${coin?.smile}" > ${balance_facult_check.amount} ${operation} ${reward} = ${balance_facult_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac?.smile} ${alli_fac?.name}]`
                    answer.logging += `üåê [${alliance?.name}] --> (–º–æ–Ω–∏—Ç–æ—Ä ‚Ññ${monitor.id}):\nüë§ @id${account.idvk}(${user.name}) --> ‚úÖ${target}\nüîÆ "${operation}${coin?.smile}" > ${balance_facult_check.amount} ${operation} ${reward} = ${balance_facult_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac?.smile} ${alli_fac?.name}]`
                }
            }
            break;
        case '-':
            const balance_down = await prisma.balanceCoin.update({ where: { id: balance.id }, data: { amount: { decrement: reward } } })
            if (!balance_down) { return answer; }
            answer.message += `üì∞ –° –≤–∞—Å —Å–Ω—è—Ç–æ –∑–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π ${target} ${reward} ${coin?.name}\nüß∑ –°—Å—ã–ª–∫–∞: ${link}\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.amount} ${operation} ${reward} = ${balance_down.amount}${coin?.smile}\n`
            answer.console += `(monitor) ~ user ${user.idvk} ${target} and lost ${reward} ${coin?.name}, link ${link}, balance ${balance.amount} ${operation} ${reward} = ${balance_down.amount}${coin?.smile} by <monitor> ‚Ññ${monitor.id}`
            answer.status = true
            if (coin?.point == true && balance_facult_check) {
                const balance_facult_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: balance_facult_check.id }, data: { amount: { decrement: reward } } })
                if (balance_facult_plus) {
                    answer.message += `üåê "${operation}${coin?.smile}" > ${balance_facult_check.amount} ${operation} ${reward} = ${balance_facult_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac?.smile} ${alli_fac?.name}]`
                    answer.logging += `üåê [${alliance?.name}] --> (–º–æ–Ω–∏—Ç–æ—Ä ‚Ññ${monitor.id}):\nüë§ @id${account.idvk}(${user.name}) --> ‚õî${target}\nüîÆ "${operation}${coin?.smile}" > ${balance_facult_check.amount} ${operation} ${reward} = ${balance_facult_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac?.smile} ${alli_fac?.name}]`
                }
            }
            break;
        default:
            break;
    }
    if (!answer.status) { return }
    if (user.notification) { await Send_Message(account.idvk, answer.message) } 
    await Logger(answer.console)
    if (answer.logging) { 
        try {
            alliance ? await Send_Message(alliance.id_chat, answer.logging) : await Send_Message(chat_id, answer.logging)
        } catch (error) {
            await Send_Message(chat_id, answer.logging)
        } 
    }
}