import { Alliance, AllianceCoin } from "@prisma/client";
import prisma from "../prisma_client";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { answerTimeLimit, timer_text } from "../../../..";
import { Confirm_User_Success, Logger } from "../../../core/helper";
import { Person_Get } from "../../../core/person";

//–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏ –∞–ª—å—è–Ω—Å–∞
async function Alliance_Coin_Get(cursor: number, alliance: Alliance) {
    const batchSize = 5;
    let counter = 0
    let limiter = 0
    let res: AllianceCoin[] = []
    for (const allicoin of await prisma.allianceCoin.findMany({ where: { id_alliance: alliance.id } })) {
        if ((cursor <= counter && batchSize+cursor >= counter) && limiter < batchSize) {
            res.push(allicoin)
            limiter++
        }
        counter++
    }
    
   return res
}

export async function Alliance_Coin_Printer(context: any) {
    const user = await Person_Get(context)
    const alliance = await prisma.alliance.findFirst({ where: { id: user?.id_alliance!}})
    if (!user) { return }
    let allicoin_tr = false
    let cursor = 0
    while (!allicoin_tr) {
        const keyboard = new KeyboardBuilder()
        let event_logger = ``
        for await (const alliance_coin of await Alliance_Coin_Get(cursor, alliance!)) {
            keyboard.textButton({ label: `‚úè ${alliance_coin.id}-${alliance_coin.name.slice(0,30)}`, payload: { command: 'alliance_coin_edit', cursor: cursor, id_alliance_coin: alliance_coin.id }, color: 'secondary' })
            .textButton({ label: `‚õî`, payload: { command: 'alliance_coin_delete', cursor: cursor, id_alliance_coin: alliance_coin.id }, color: 'secondary' }).row()
            //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
            event_logger += `${alliance_coin.smile} ${alliance_coin.name}: id${alliance_coin.id}\n–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: ${alliance_coin?.point == true ? "‚úÖ" : "‚õî"}\n\n`
        }
        if (cursor >= 5) { keyboard.textButton({ label: `‚Üê`, payload: { command: 'alliance_coin_back', cursor: cursor }, color: 'secondary' }) }
        const alliance_coin_counter = await prisma.allianceCoin.count({ where: { id_alliance: alliance!.id! } })
        if (5+cursor < alliance_coin_counter) { keyboard.textButton({ label: `‚Üí`, payload: { command: 'alliance_coin_next', cursor: cursor }, color: 'secondary' }) }
        keyboard.textButton({ label: `‚ûï`, payload: { command: 'alliance_coin_create', cursor: cursor }, color: 'secondary' }).row()
        .textButton({ label: `üö´`, payload: { command: 'alliance_coin_return', cursor: cursor }, color: 'secondary' }).oneTime()
        event_logger += `\n ${1+cursor} –∏–∑ ${alliance_coin_counter}`
        const allicoin_bt = await context.question(`üß∑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É ${alliance?.name}:\n\n ${event_logger}`,
            {	
                keyboard: keyboard, answerTimeLimit
            }
        )
        if (allicoin_bt.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã ${alliance?.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!allicoin_bt.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            const config: any = {
                'alliance_coin_edit': Alliance_Coin_Edit,
                'alliance_coin_create': Alliance_Coin_Create,
                'alliance_coin_next': Alliance_Coin_Next,
                'alliance_coin_back': Alliance_Coin_Back,
                'alliance_coin_return': Alliance_Coin_Return,
                'alliance_coin_delete': Alliance_Coin_Delete
            }
            const ans = await config[allicoin_bt.payload.command](context, allicoin_bt.payload, alliance)
            cursor = ans?.cursor || ans?.cursor == 0 ? ans.cursor : cursor
            allicoin_tr = ans.stop ? ans.stop : false
        }
    }
    
}

async function Alliance_Coin_Delete(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    const alliance_coin_check = await prisma.allianceCoin.findFirst({ where: { id: data.id_alliance_coin } })
    const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É ${alliance_coin_check?.id}-${alliance_coin_check?.name}?`)
    await context.send(`${confirm.text}`)
    if (!confirm.status) { return res }
    if (alliance_coin_check) {
        const alliance_coin_del = await prisma.allianceCoin.delete({ where: { id: alliance_coin_check.id } })
        if (alliance_coin_del) {
            await Logger(`In database, deleted alliance coin: ${alliance_coin_del.id}-${alliance_coin_del.name} by admin ${context.senderId}`)
            await context.send(`–í—ã —É–¥–∞–ª–∏–ª–∏ –≤–∞–ª—é—Ç—É: ${alliance_coin_del.id}-${alliance_coin_del.name} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${alliance.name}!`)
        }
    }
    return res
}

async function Alliance_Coin_Return(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor, stop: true }
    await context.send(`–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ${alliance.id}-${alliance.name}`)
    return res
}

async function Alliance_Coin_Edit(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    let spec_check = false
    let name_loc = null
    const alliance_coin_check = await prisma.allianceCoin.findFirst({ where: { id: data.id_alliance_coin } })
	while (spec_check == false) {
		const name = await context.question( `üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã: ${alliance_coin_check?.name}. –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–µ–≥–æ:`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã ${alliance_coin_check?.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 300) {
			spec_check = true
			name_loc = `${name.text}`
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    let smile_check = false
    let smile = alliance_coin_check?.smile
	while (smile_check == false) {
		const smile_ask: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã ${name_loc}, —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç ${smile}:`, timer_text)
		if (smile_ask.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–º–∞–π–ª–∏–∫–∞ –≤–∞–ª—é—Ç—ã ${name_loc} –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (smile_ask.text.length <= 10) {
			smile_check = true
			smile = `${smile_ask.text}`
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    alliance_coin_check?.point == true ? await context.send(`–í–∞–ª—é—Ç–∞ ${name_loc} —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π`) : await context.send(`–í–∞–ª—é—Ç–∞ ${name_loc} —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π`)
	const rank_check: { status: boolean, text: String } = await Confirm_User_Success(context, `—Å–¥–µ–ª–∞—Ç—å –≤–∞–ª—é—Ç—É ${name_loc} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π?`)
    await context.send(`${rank_check.text}`)
    if (name_loc) {
        const quest_up = await prisma.allianceCoin.update({ where: { id: alliance_coin_check?.id }, data: { name: name_loc, smile: smile!, point: rank_check.status } })
        if (quest_up) {
            await Logger(`In database, updated alliance coin: ${quest_up.id}-${quest_up.name} by admin ${context.senderId}`)
            await context.send(`‚öô –í—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤–∞–ª—é—Ç—É:\n –ù–∞–∑–≤–∞–Ω–∏–µ: ${alliance_coin_check?.id}-${alliance_coin_check?.name} --> ${quest_up.id}-${quest_up.name}\n –°–º–∞–π–ª–∏–∫: ${alliance_coin_check?.smile} --> ${quest_up.smile}\n –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: ${alliance_coin_check?.point == true ? "‚úÖ" : "‚õî"} --> ${quest_up.point == true ? "‚úÖ" : "‚õî"}`)
        }
    }
    return res
}

async function Alliance_Coin_Next(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor+5 }
    return res
}

async function Alliance_Coin_Back(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor-5 }
    return res
}

async function Alliance_Coin_Create(context: any, data: any, alliance: Alliance) {
    const res = { cursor: data.cursor }
    let spec_check = false
    let name_loc = null
	while (spec_check == false) {
		const name = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã:`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª—è–µ–º–æ–π –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 300) {
			spec_check = true
			name_loc = `${name.text}`
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    let smile_check = false
    let smile = null
	while (smile_check == false) {
		const smile_ask: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã ${name_loc}:`, timer_text)
		if (smile_ask.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã ${name_loc} –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (smile_ask.text.length <= 10) {
			smile_check = true
			smile = `${smile_ask.text}`
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
	const rank_check: { status: boolean, text: String } = await Confirm_User_Success(context, `—Å–¥–µ–ª–∞—Ç—å –≤–∞–ª—é—Ç—É ${name_loc} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π?`)
    await context.send(`${rank_check.text}`)
    if (name_loc) {
        const loc_cr = await prisma.allianceCoin.create({ data: { name: name_loc, smile: smile!, id_alliance: alliance.id, point: rank_check.status } })
        if (loc_cr) {
            await Logger(`In database, created alliance coin: ${loc_cr.id}-${loc_cr.name} by admin ${context.senderId}`)
            await context.send(`‚öô –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É ${loc_cr.id}-${loc_cr.name} –¥–ª—è —Ä–æ–ª–µ–≤–æ–π ${alliance.name}`)
        }
    }
    return res
}