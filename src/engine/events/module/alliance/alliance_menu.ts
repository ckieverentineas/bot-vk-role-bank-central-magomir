import { Alliance, User } from "@prisma/client"
import { Person_Get } from "../person/person"
import prisma from "../prisma_client"
import { Person_Coin_Printer } from "../person/person_coin"
import { Facult_Rank_Printer } from "./facult_rank"
import { KeyboardBuilder } from "vk-io"
import { Accessed, Edit_Message, Logger } from "../../../core/helper"
import { vk } from "../../../.."

export async function Alliance_Enter(context:any) {
    const get_user: User | null | undefined = await Person_Get(context)
    if (get_user) {
        const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(get_user.id_alliance) } })
        const coin = await Person_Coin_Printer(context)
        const facult_rank = await Facult_Rank_Printer(context)
        const text = `‚úâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${alli_get?.name} <-- \n${facult_rank}`
        //üóÑ \n üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold} \n üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp} \n üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl} \n üåü–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievement_counter} \n üîÆ–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${artefact_counter} \n ‚öô${get_user.private ? "–í—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å —Ä–æ–ª–∏—Ç—å" : "–í—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –æ—Ç—Ä–æ–ª—ã"}
        const keyboard = new KeyboardBuilder()
        //.callbackButton({ label: 'üéÅ', payload: { command: 'birthday_enter' }, color: 'secondary' })
        //.callbackButton({ label: 'üìä', payload: { command: 'statistics_enter' }, color: 'secondary' })
        //.callbackButton({ label: 'üõç –õ—é—Ç–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫', payload: { command: 'operation_enter' }, color: 'secondary' }).row()
        if (await prisma.allianceCoin.findFirst({ where: { id_alliance: get_user.id_alliance ?? 0 } })) {
            keyboard.textButton({ label: '‚öñ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä', payload: { command: 'operation_enter' }, color: 'secondary' }).row()
        }
        
        keyboard.callbackButton({ label: 'üìä –†–µ–π—Ç–∏–Ω–≥–∏', payload: { command: 'alliance_rank_enter' }, color: 'secondary' }).row()
        if (await Accessed(context) != 1) {
            keyboard.callbackButton({ label: '‚öô –ê–¥–º–∏–Ω–∞–º', payload: { command: 'alliance_enter_admin' }, color: 'secondary' }).row()
        }
        keyboard.callbackButton({ label: 'üö´', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
        await Logger(`In a private chat, the alliance card is viewed by user ${get_user.idvk}`)
        await Edit_Message(context, text, keyboard)
        if (context?.eventPayload?.command == "card_enter") {
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî –í—ã –¥–æ–º–∞: ${alli_get?.name.slice(0,40)}`
                })
            })
        }
    }
}

export async function Alliance_Enter_Admin(context:any) {
    const get_user: User | null | undefined = await Person_Get(context)
    if (get_user) {
        const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(get_user.id_alliance) } })
        const coin = await Person_Coin_Printer(context)
        const facult_rank = await Facult_Rank_Printer(context)
        const text = `‚úâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ [${alli_get?.name}] --> \n`
        //üóÑ \n üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold} \n üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp} \n üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl} \n üåü–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievement_counter} \n üîÆ–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${artefact_counter} \n ‚öô${get_user.private ? "–í—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å —Ä–æ–ª–∏—Ç—å" : "–í—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –æ—Ç—Ä–æ–ª—ã"}
        const keyboard = new KeyboardBuilder()
        //.callbackButton({ label: 'üéÅ', payload: { command: 'birthday_enter' }, color: 'secondary' })
        //.callbackButton({ label: 'üìä', payload: { command: 'statistics_enter' }, color: 'secondary' })
        
        if (await Accessed(context) != 1) {
            keyboard.textButton({ label: '‚öô !–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'secondary' }).row()
            keyboard.textButton({ label: '‚öô !–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–ª—é—Ç—ã', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'secondary' }).row()
            keyboard.textButton({ label: '‚öô !–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'secondary' }).row()
            //keyboard.textButton({ label: '‚öô !–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'secondary' }).row()
        }
        keyboard.callbackButton({ label: 'üö´', payload: { command: 'alliance_enter' }, color: 'secondary' }).inline().oneTime()
        await Logger(`In a private chat, the alliance card is viewed by user ${get_user.idvk}`)
        await Edit_Message(context, text, keyboard)
        if (context?.eventPayload?.command == "card_enter") {
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî –í—ã –¥–æ–º–∞: ${alli_get?.name.slice(0,40)}`
                })
            })
        }
    }
}