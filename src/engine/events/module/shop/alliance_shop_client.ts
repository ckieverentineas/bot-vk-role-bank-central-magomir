import { Keyboard, KeyboardBuilder } from "vk-io";
import prisma from "../prisma_client";
import { answerTimeLimit } from "../../../..";
import { Confirm_User_Success, Input_Number, Input_Text, Keyboard_Index, Send_Message, Send_Message_Question, Send_Message_Smart } from "../../../core/helper";
import { BalanceFacult } from "@prisma/client";
import { button_alliance_return, InventoryType } from "../data_center/standart";

async function Buyer_Category_Get(cursor: number, id_shop: number) {
    const batchSize = 5;
    let counter = 0;
    let limiter = 0;
    let res: any[] = [];

    for (const category of await prisma.allianceShopCategory.findMany({ where: { id_alliance_shop: id_shop } })) {
        if ((cursor <= counter && batchSize + cursor >= counter) && limiter < batchSize) {
            res.push(category);
            limiter++;
        }
        counter++;
    }

    return res;
}

export async function Buyer_Category_Printer(context: any, id_shop: number) {
    const shop = await prisma.allianceShop.findFirst({ where: { id: id_shop } });
    let category_tr = false;
    let cursor = 0;
    const category_counter = await prisma.allianceShopCategory.count({ where: { id_alliance_shop: id_shop } });

    while (!category_tr) {
        const keyboard = new KeyboardBuilder();
        let event_logger = '';

        for await (const category of await Buyer_Category_Get(cursor, id_shop)) {
            keyboard.textButton({
                label: `üìÅ ${category.name.slice(0, 30)}`,
                payload: { command: 'buyershop_category_select', cursor, id_category: category.id },
                color: 'secondary'
            }).row();

            event_logger += `üìÅ ${category.id} - ${category.name}\n`;
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if (cursor >= 5) {
            keyboard.textButton({ label: `‚Üû`, payload: { command: 'buyershop_category_first', cursor }, color: 'secondary' });
            keyboard.textButton({ label: `‚Üê`, payload: { command: 'buyershop_category_back', cursor }, color: 'secondary' });
        }

        if (5 + cursor < category_counter) {
            keyboard.textButton({ label: `‚Üí`, payload: { command: 'buyershop_category_next', cursor }, color: 'secondary' });
            keyboard.textButton({ label: `‚Ü†`, payload: { command: 'buyershop_category_last', cursor }, color: 'secondary' });
        }

        if (cursor >= 5 || 5 + cursor < category_counter) {
            keyboard.row();
        }

        event_logger += `\n${1 + cursor} –∏–∑ ${category_counter}`;
        const attached = shop?.image ? shop?.image : null;
        const bt = await Send_Message_Question(context, `üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n${event_logger}`, keyboard, attached ?? undefined);
        if (bt.exit) { return; }
        const config: any = {
            'buyershop_category_select': Buyer_Category_Select,
            'buyershop_category_next': Buyer_Category_Next,
            'buyershop_category_back': Buyer_Category_Back,
            'buyershop_category_first': Buyer_Category_First,
            'buyershop_category_last': Buyer_Category_Last,
        };

        const ans = await config[bt.payload.command](context, bt.payload, shop, category_counter);
        cursor = ans?.cursor ?? cursor;
        category_tr = ans.stop ?? false;
    }
}

async function Buyer_Category_Select(context: any, data: any, shop: any) {
    const res = { cursor: data.cursor };
    await Buyer_Item_Printer(context, data.id_category);
    return res;
}

async function Buyer_Category_Next(context: any, data: any, shop: any) {
    const res = { cursor: data.cursor + 5 };
    return res;
}

async function Buyer_Category_Back(context: any, data: any, shop: any) {
    const res = { cursor: data.cursor - 5 };
    return res;
}

async function Buyer_Category_First(context: any, data: any, shop: any) {
    const res = { cursor: 0 };
    return res;
}

async function Buyer_Category_Last(context: any, data: any, shop: any, category_counter: number) {
    const lastCursor = Math.floor((category_counter - 1) / 5) * 5;
    const res = { cursor: lastCursor };
    return res;
}

async function Buyer_Item_Get(cursor: number, id_category: number) {
    const batchSize = 5;
    let counter = 0;
    let limiter = 0;
    let res: any[] = [];

    for (const item of await prisma.allianceShopItem.findMany({ where: { id_shop: id_category, hidden: false } })) {
        if ((cursor <= counter && batchSize + cursor >= counter) && limiter < batchSize) {
            res.push(item);
            limiter++;
        }
        counter++;
    }

    return res;
}

export async function Buyer_Item_Printer(context: any, id_category: number) {
    const category = await prisma.allianceShopCategory.findFirst({ where: { id: id_category } });
    let item_tr = false;
    let cursor = 0;
    const item_counter = await prisma.allianceShopItem.count({ where: { id_shop: id_category, hidden: false } });

    while (!item_tr) {
        const keyboard = new KeyboardBuilder();
        let event_logger = '';

        for await (const item of await Buyer_Item_Get(cursor, id_category)) {
            const coin = await prisma.allianceCoin.findFirst({ where: { id: item.id_coin } })
            keyboard.textButton({
                label: `üõí ${item.name.slice(0, 30)}`,
                payload: { command: 'buyershop_item_select', cursor, id_item: item.id },
                color: 'secondary'
            }).row();

            event_logger += `üõí ${item.id} - ${item.name} ‚Äî ${item.price}${coin?.smile}\n`;
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        if (cursor >= 5) {
            keyboard.textButton({ label: `‚Üû`, payload: { command: 'buyershop_item_first', cursor }, color: 'secondary' });
            keyboard.textButton({ label: `‚Üê`, payload: { command: 'buyershop_item_back', cursor }, color: 'secondary' });
        }

        if (5 + cursor < item_counter) {
            keyboard.textButton({ label: `‚Üí`, payload: { command: 'buyershop_item_next', cursor }, color: 'secondary' });
            keyboard.textButton({ label: `‚Ü†`, payload: { command: 'buyershop_item_last', cursor }, color: 'secondary' });
        }

        if (cursor >= 5 || 5 + cursor < item_counter) {
            keyboard.row();
        }

        event_logger += `\n${1 + cursor} –∏–∑ ${item_counter}`;
        const attached = category?.image ? category?.image : null;
        const bt = await Send_Message_Question(context, `üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:\n${event_logger}`, keyboard, attached ?? undefined);
        if (bt.exit) { return; }
        const config: any = {
            'buyershop_item_select': Buyer_Item_Select,
            'buyershop_item_next': Buyer_Item_Next,
            'buyershop_item_back': Buyer_Item_Back,
            'buyershop_item_first': Buyer_Item_First,
            'buyershop_item_last': Buyer_Item_Last,
        };

        const ans = await config[bt.payload.command](context, bt.payload, category, item_counter);
        cursor = ans?.cursor ?? cursor;
        item_tr = ans.stop ?? false;
    }
}

async function Buyer_Item_Select(context: any, data: any, category: any) {
    const res = { cursor: data.cursor };
    const item = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item) { 
        await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ`);
        return res;
    }
    const item_category_check = await prisma.allianceShopCategory.findFirst({ where: { id: item.id_shop } })
    if (!item_category_check) { 
        await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞`);
        return res;
    }
    const item_shop_check = await prisma.allianceShop.findFirst({ where: { id: item_category_check?.id_alliance_shop } })
    if (!item_shop_check) { 
        await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–µ —Ç–æ–≤–∞—Ä–∞`);
        return res;
    }
    const item_alliance_check = await prisma.alliance.findFirst({ where: { id: item_shop_check?.id_alliance } })
    if (!item_alliance_check) { 
        await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–ª—å—è–Ω—Å–µ —Ç–æ–≤–∞—Ä–∞`);
        return res;
    }
    let answer_log = ''
    if (!item) {
        await context.send(`‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return res;
    }
    const coin_get = await prisma.allianceCoin.findFirst({ where: { id: item.id_coin}})
    if (!coin_get) {
        await context.send(`‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return res;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const account = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    if (!account) { 
        await context.send(`‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return res;
    }
    const user = await prisma.user.findFirst({ where: { id: account.select_user } })
    if (!user) {
        await context.send(`‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return res;
    }
    const balance = await prisma.balanceCoin.findFirst({ where: { id_coin: item.id_coin ?? 0, id_user: user.id }})
    if (!balance) { 
        await context.send(`‚ùå –í–∞–ª—é—Ç–Ω—ã–π —Å—á–µ—Ç ${coin_get.name}${coin_get.smile} –Ω–µ –æ—Ç–∫—Ä—ã—Ç.`);
        return res;
    }
    
    // –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞
    let text_item = `${coin_get.smile} –í–∞—à –±–∞–ª–∞–Ω—Å [${coin_get.name}]: ${balance.amount}\n\nüõç –¢–æ–≤–∞—Ä: ${item.name}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n${coin_get?.smile ?? 'üí∞'} –¶–µ–Ω–∞: ${item.price}\nüëú –ü–æ–∫—É–ø–∫–∞ ${item.inventory_tr ? '–ø–æ–ø–∞–¥–µ—Ç' : '–Ω–µ –ø–æ–ø–∞–¥–µ—Ç'} –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å: ${item.limit_tr ? `${item.limit}` : '‚ôæÔ∏è'}`;
    const attached = item?.image?.includes('photo') ? item.image : null
    await Send_Message(context.senderId, `${text_item}`, undefined, attached)
    const confirm_ask: { status: boolean, text: string } = await Confirm_User_Success(context, `–∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä?`);
        //await context.send(confirm.text);
    if (!confirm_ask.status) { return res }
    // –∑–∞–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    const item_count = await Input_Number(context, `–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ ${item.name} –∫ –ø–æ–∫—É–ø–∫–µ, –≤ –Ω–∞–ª–∏—á–∏–∏ –µ—Å—Ç—å ${item.limit_tr ? item.limit : '–¥–æ—Ñ–∏–≥–∞' }:`, false, 2)
    if (!item_count) { return res }
    if (item_count == 0) {
        await context.send(`üí∏ –£–≤—ã, –Ω–æ –≤–æ–∑–¥—É—Ö –∫—É–ø–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É –º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–π.`);
        return res;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–º–∏—Ç–∞
    if (item.limit_tr && item.limit <= 0) {
        await context.send(`‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.`);
        return res;
    }
     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–º–∏—Ç–∞
     if (item.limit_tr && item.limit - item_count < 0) {
        await context.send(`‚ö†Ô∏è –ù–∞ —Å–∫–ª–∞–¥–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤.`);
        return res;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–Ω–µ–≥
    if (balance.amount < item.price*item_count) {
        await context.send(`üí∏ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ [${coin_get.name}${coin_get.smile}] –¥–ª—è –ø–æ–∫—É–ø–∫–∏ [${item.name}].`);
        return res;
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ–∫—É–ø–∫–µ
    const item_comment = await Input_Text(context, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–∫—É–ø–∫–µ`)
    if (!item_comment) { return res }
    // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    const buying_act = await prisma.balanceCoin.update({ where: { id: balance.id }, data: { amount: { decrement: item.price*item_count } } });
    answer_log += `–°–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ "${item.name}"x${item_count} –∑–∞ ${item.price*item_count}${coin_get.smile}.\n${coin_get.smile} –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: ${balance.amount}-${item.price*item_count}=${buying_act.amount}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${item_comment}`
    // –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: user.id_facult ?? 0 } })
    const balance_facult_check = await prisma.balanceFacult.findFirst({ where: { id_coin: item.id_coin ?? 0, id_facult: user.id_facult ?? 0 } })
    if (coin_get?.point == true && balance_facult_check) {
        const balance_facult_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: balance_facult_check.id }, data: { amount: { decrement: item.price*item_count } } })
        if (balance_facult_plus) {
            answer_log += `\nüåê "-${coin_get?.smile}x${item_count}" > ${balance_facult_check.amount} - ${item.price*item_count} = ${balance_facult_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac?.smile} ${alli_fac?.name}]`
        }
    }
    // –í—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    if (item.inventory_tr) {
        for (let i=0; i<item_count; i++) {
            const save_item = await prisma.inventory.create({ data: { id_user: user.id, id_item: item.id, type: InventoryType.ITEM_SHOP_ALLIANCE, comment: item_comment } });
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞)
    let remaining_items = '‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç';
    let item_finished = false;
    
    if (item.limit_tr) {
        const updated_item = await prisma.allianceShopItem.update({
            where: { id: item.id },
            data: { limit: { decrement: item_count } }
        });
        remaining_items = `${updated_item.limit}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        if (updated_item.limit <= 0) {
            item_finished = true;
        }
    }

    // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    const userMessage = `üõí –ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ "${item_shop_check.name}":\n–°–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ "${item.name}"x${item_count} –∑–∞ ${item.price*item_count}${coin_get.smile}.\n${coin_get.smile} –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: ${balance.amount}-${item.price*item_count}=${buying_act.amount}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${item_comment}`;
    await Send_Message(context.senderId, userMessage);

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç –ø–æ–∫—É–ø–æ–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    const allianceForPurchase = await prisma.alliance.findFirst({ 
        where: { id: item_alliance_check.id } 
    })
    
    let logMessage = `üë§ –ö–ª–∏–µ–Ω—Ç @id${user.idvk}(${user.name}) (UID: ${user.id})\nüîß ${answer_log}\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${remaining_items}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
    if (item_finished) {
        logMessage += `\n\n‚ö†Ô∏è –¢–û–í–ê–† –ó–ê–ö–û–ù–ß–ò–õ–°–Ø!\nüõç –¢–æ–≤–∞—Ä: "${item.name}"\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "${item_category_check.name}"\nüè™ –ú–∞–≥–∞–∑–∏–Ω: "${item_shop_check.name}"\nüö® –ê–¥–º–∏–Ω—ã, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø–∞—Å—ã!`;
    }
    
    if (allianceForPurchase?.id_chat_shop && allianceForPurchase.id_chat_shop > 0) {
        await Send_Message(allianceForPurchase.id_chat_shop, logMessage);
    }

    //–º–æ–¥—É–ª—å –æ—Ç–∫–∞—Ç–æ–≤
    let answer_owner_alliance_log = ''
    const user_payed_check = await prisma.user.findFirst({ where: { id: item_shop_check.id_user_owner} })
    if (!user_payed_check) { return res; }
    const user_payed_balance_check = await prisma.balanceCoin.findFirst({ where: { id_user: user_payed_check.id, id_coin: item.id_coin } })
    if (!user_payed_balance_check) { return res; }
    const user_paying = await prisma.balanceCoin.update({ where: { id: user_payed_balance_check.id }, data: { amount: { increment: item.price*item_count } } })
    if (!user_paying) { return res; }
    const alli_fac_owner = await prisma.allianceFacult.findFirst({ where: { id: user_payed_check.id_facult ?? 0 } })
    const balance_facult_check_owner = await prisma.balanceFacult.findFirst({ where: { id_coin: item.id_coin ?? 0, id_facult: user_payed_check.id_facult ?? 0 } })
    if (coin_get?.point == true && balance_facult_check_owner) {
        const balance_facult_plus_owner: BalanceFacult = await prisma.balanceFacult.update({ where: { id: balance_facult_check_owner.id }, data: { amount: { increment: item.price*item_count } } })
        if (balance_facult_plus_owner) {
            answer_owner_alliance_log += `üåê "+${coin_get?.smile}x${item_count}" > ${balance_facult_check_owner.amount} + ${item.price*item_count} = ${balance_facult_plus_owner.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac_owner?.smile} ${alli_fac_owner?.name}]`
        }
    }
    const allianceForSale = await prisma.alliance.findFirst({ 
        where: { id: item_alliance_check.id } 
    })
    const notificationMessage = `"+ ${coin_get?.smile}" --> –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ "${item.name}" —á–µ—Ä–µ–∑ –º–∞–≥–∞–∑–∏–Ω [${item_shop_check.name}] ${user_payed_balance_check?.amount} + ${item.price*item_count} = ${user_paying?.amount}\n${answer_owner_alliance_log}`

    if (allianceForSale?.id_chat_shop && allianceForSale.id_chat_shop > 0) {
        await Send_Message(allianceForSale.id_chat_shop, notificationMessage)
    } else {
        await Send_Message_Smart(context, notificationMessage, 'client_callback', user_payed_check)
    }
    
    return res;
}

async function Buyer_Item_Next(context: any, data: any, category: any) {
    const res = { cursor: data.cursor + 5 };
    return res;
}

async function Buyer_Item_Back(context: any, data: any, category: any) {
    const res = { cursor: data.cursor - 5 };
    return res;
}

async function Buyer_Item_First(context: any, data: any, category: any) {
    const res = { cursor: 0 };
    return res;
}

async function Buyer_Item_Last(context: any, data: any, category: any, item_counter: number) {
    const lastCursor = Math.floor((item_counter - 1) / 5) * 5;
    const res = { cursor: lastCursor };
    return res;
}

async function Buyer_Shop_Get(cursor: number, id_alliance: number) {
    const batchSize = 5;
    let counter = 0;
    let limiter = 0;
    let res: any[] = [];

    for (const shop of await prisma.allianceShop.findMany({ where: { id_alliance: id_alliance } })) {
        if ((cursor <= counter && batchSize + cursor >= counter) && limiter < batchSize) {
            res.push(shop);
            limiter++;
        }
        counter++;
    }

    return res;
}

export async function AllianceShop_Selector(context: any, id_alliance: number) {
    let shop_tr = false;
    let cursor = 0;
    const shop_counter = await prisma.allianceShop.count({ where: { id_alliance: id_alliance } });

    while (!shop_tr) {
        const keyboard = new KeyboardBuilder();
        let event_logger = '';

        for await (const shop of await Buyer_Shop_Get(cursor, id_alliance)) {
            keyboard.textButton({
                label: `üõç ${shop.name.slice(0, 30)}`,
                payload: { command: 'buyershop_select', cursor, id_shop: shop.id },
                color: 'secondary'
            }).row();

            event_logger += `üõç ${shop.id} - ${shop.name}\n`;
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
        if (cursor >= 5) {
            keyboard.textButton({ label: `‚Üû`, payload: { command: 'buyershop_first', cursor }, color: 'secondary' });
            keyboard.textButton({ label: `‚Üê`, payload: { command: 'buyershop_back', cursor }, color: 'secondary' });
        }

        if (5 + cursor < shop_counter) {
            keyboard.textButton({ label: `‚Üí`, payload: { command: 'buyershop_next', cursor }, color: 'secondary' });
            keyboard.textButton({ label: `‚Ü†`, payload: { command: 'buyershop_last', cursor }, color: 'secondary' });
        }

        if (cursor >= 5 || 5 + cursor < shop_counter) {
            keyboard.row();
        }

        event_logger += `\n${1 + cursor} –∏–∑ ${shop_counter}`;
        const bt = await Send_Message_Question(context, `üõí –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:\n${event_logger}`, keyboard, undefined);
        if (bt.exit) { await context.send(`‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.`, { keyboard: button_alliance_return }); return await Keyboard_Index(context, `‚åõ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ, –≤–¥—Ä—É–≥ –Ω–æ–≤–∏–Ω–∫–∏ –ø–æ—è–≤—è—Ç—Å—è, –∫–∞–∫ –Ω–∞ –≤–∞–ª–¥–±–µ—Ä–∏—Å–µ?`); }
        const config: any = {
            'buyershop_select': Buyershop_Select,
            'buyershop_next': Buyershop_Next,
            'buyershop_back': Buyershop_Back,
            'buyershop_first': Buyershop_First,
            'buyershop_last': Buyershop_Last,
        };

        const ans = await config[bt.payload.command](context, bt.payload, shop_counter);
        cursor = ans?.cursor ?? cursor;
        shop_tr = ans.stop ?? false;
    }
    await Keyboard_Index(context, `‚åõ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ, –≤–¥—Ä—É–≥ –Ω–æ–≤–∏–Ω–∫–∏ –ø–æ—è–≤—è—Ç—Å—è, –∫–∞–∫ –Ω–∞ –≤–∞–ª–¥–±–µ—Ä–∏—Å–µ?`)
}

async function Buyershop_Select(context: any, data: any) {
    const res = { cursor: data.cursor };
    await Buyer_Category_Printer(context, data.id_shop);
    return res;
}

async function Buyershop_Next(context: any, data: any) {
    const res = { cursor: data.cursor + 5 };
    return res;
}

async function Buyershop_Back(context: any, data: any) {
    const res = { cursor: data.cursor - 5 };
    return res;
}

async function Buyershop_First(context: any, data: any) {
    const res = { cursor: 0 };
    return res;
}

async function Buyershop_Last(context: any, data: any, shop_counter: number) {
    const lastCursor = Math.floor((shop_counter - 1) / 5) * 5;
    const res = { cursor: lastCursor };
    return res;
}
