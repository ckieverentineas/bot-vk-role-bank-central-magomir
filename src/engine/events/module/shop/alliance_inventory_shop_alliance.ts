import { Inventory, Prisma, User } from "@prisma/client";
import prisma from "../prisma_client";
import { KeyboardBuilder } from "vk-io";
import { answerTimeLimit, chat_id } from "../../../..";
import { Confirm_User_Success, Input_Number, Keyboard_Index, Logger, Send_Message, Send_Message_Smart } from "../../../core/helper";
import { button_alliance_return, InventoryType } from "../data_center/standart";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
async function groupInventoryItems(user_id: number): Promise<any[]> {
    const items = await prisma.inventory.findMany({
        where: { id_user: user_id }
    });

    const grouped: {[key: string]: any} = {};

    for (const item of items) {
        const key = `${item.type}_${item.id_item}`;
        
        if (!grouped[key]) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
            let itemInfo = null;
            if (item.type == InventoryType.ITEM_SHOP_ALLIANCE) {
                itemInfo = await prisma.allianceShopItem.findFirst({ where: { id: item.id_item } });
            } else if (item.type == InventoryType.ITEM_SHOP) {
                itemInfo = await prisma.item.findFirst({ where: { id: item.id_item } });
            } else if (item.type == InventoryType.ITEM_STORAGE) {
                itemInfo = await prisma.itemStorage.findFirst({ where: { id: item.id_item } });
            }

            grouped[key] = {
                type: item.type,
                id_item: item.id_item,
                name: itemInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç',
                count: 1,
                inventory_ids: [item.id],
                item_info: itemInfo
            };
        } else {
            grouped[key].count++;
            grouped[key].inventory_ids.push(item.id);
        }
    }

    return Object.values(grouped);
}

async function Inventory_Get(cursor: number, user_id: number, group_mode: boolean = false): Promise<{items: Inventory[], grouped: any[]}> {
    const batchSize = 5;
    let counter = 0;
    let limiter = 0;
    let res: Inventory[] = [];

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const items = await prisma.inventory.findMany({
        where: { id_user: user_id }
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∏–ø—É –∏ id_item
    const groupedItems = await groupInventoryItems(user_id);

    if (!group_mode) {
        // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        for (const item of items) {
            if ((cursor <= counter && batchSize + cursor >= counter) && limiter < batchSize) {
                res.push(item);
                limiter++;
            }
            counter++;
        }
    }

    return { items: res, grouped: groupedItems };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
function truncateButtonLabel(text: string, maxLength: number = 40): string {
    if (text.length <= maxLength) return text;
    return text.slice(0, maxLength - 3) + '...';
}

export async function Inventory_Printer(context: any, user: User, user_adm?: User) {
    let inventory_tr = false;
    let cursor = 0;
    let group_mode = false;

    while (!inventory_tr) {
        const keyboard = new KeyboardBuilder();
        let event_logger = '';

        const inventoryData = await Inventory_Get(cursor, user.id, group_mode);
        const items = inventoryData.items;
        const groupedItems = inventoryData.grouped;

        if (group_mode) {
            // –†–µ–∂–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            const displayedGroups = groupedItems.slice(cursor, cursor + 5);
            
            for await (const group of displayedGroups) {
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                const itemName = group.name.length > 25 ? group.name.slice(0, 25) + '...' : group.name;
                let buttonLabel = `üß≥ ${itemName} √ó ${group.count}`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 40 —Å–∏–º–≤–æ–ª–æ–≤
                if (buttonLabel.length > 40) {
                    // –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ–º
                    const maxNameLength = 35 - group.count.toString().length - 5; // 5 –¥–ª—è —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª–æ–≤
                    const truncatedName = group.name.slice(0, maxNameLength) + '...';
                    buttonLabel = `üß≥ ${truncatedName} √ó ${group.count}`;
                    
                    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    if (buttonLabel.length > 40) {
                        buttonLabel = `üß≥ √ó ${group.count}`;
                    }
                }
                
                // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
                keyboard.textButton({
                    label: buttonLabel,
                    payload: { 
                        command: 'inventory_group_select', 
                        cursor, 
                        type: group.type, 
                        id_item: group.id_item,
                        group_mode: true 
                    },
                    color: 'secondary'
                });
                
                // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–ì–î–ê
                keyboard.textButton({ 
                    label: `üéÅ`, 
                    payload: { 
                        command: 'inventory_group_present', 
                        cursor, 
                        type: group.type, 
                        id_item: group.id_item,
                        group_mode: true 
                    }, 
                    color: 'negative' 
                });
                keyboard.textButton({ 
                    label: `‚õî`, 
                    payload: { 
                        command: 'inventory_group_delete', 
                        cursor, 
                        type: group.type, 
                        id_item: group.id_item,
                        group_mode: true 
                    }, 
                    color: 'negative' 
                });
                keyboard.row(); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
                event_logger += `üß≥ ${group.name} √ó ${group.count}\n`;
            }
        } else {
            // –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—à—Ç—É—á–Ω–æ
            for await (const inv of items) {
                let item = null;
                if (inv.type == InventoryType.ITEM_SHOP_ALLIANCE) {
                    item = await prisma.allianceShopItem.findFirst({ where: { id: inv.id_item } });
                }
                if (inv.type == InventoryType.ITEM_SHOP) {
                    item = await prisma.item.findFirst({ where: { id: inv.id_item } });
                }
                if (inv.type == InventoryType.ITEM_STORAGE) {
                    item = await prisma.itemStorage.findFirst({ where: { id: inv.id_item } });
                }
                
                const itemName = item?.name ? (item.name.length > 25 ? item.name.slice(0, 25) + '...' : item.name) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç';
                let buttonLabel = `üß≥ ${itemName} ‚Äî ${inv.id}`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –¥–ª—è –ø–æ—à—Ç—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                if (buttonLabel.length > 40) {
                    const maxNameLength = 30 - inv.id.toString().length - 5;
                    const truncatedName = item?.name ? (item.name.slice(0, maxNameLength) + '...') : '–ü—Ä–µ–¥–º–µ—Ç';
                    buttonLabel = `üß≥ ${truncatedName} ‚Äî ${inv.id}`;
                    
                    if (buttonLabel.length > 40) {
                        buttonLabel = `üß≥ ID:${inv.id}`;
                    }
                }
                
                // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
                keyboard.textButton({
                    label: buttonLabel,
                    payload: { command: 'inventory_select', cursor, id_item: inv.id, group_mode: false },
                    color: 'secondary'
                });
                
                // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–ì–î–ê
                keyboard.textButton({ 
                    label: `üéÅ`, 
                    payload: { command: 'inventory_present', cursor, id_item: inv.id, group_mode: false }, 
                    color: 'negative' 
                });
                keyboard.textButton({ 
                    label: `‚õî`, 
                    payload: { command: 'inventory_delete', cursor, id_item: inv.id, group_mode: false }, 
                    color: 'negative' 
                });
                keyboard.row(); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
                event_logger += `üß≥ ${inv.id} - ${item?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}\n`;
            }
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è (—Å—Ç–∞—Ä—ã–π –≤–∏–∑—É–∞–ª)
        const totalItems = group_mode ? groupedItems.length : await prisma.inventory.count({ where: { id_user: user.id } });
        
        if (cursor >= 5) {
            keyboard.textButton({ 
                label: `‚Üê`, 
                payload: { command: 'inventory_back', cursor, group_mode }, 
                color: 'secondary' 
            });
        }

        if (5 + cursor < totalItems) {
            keyboard.textButton({ 
                label: `‚Üí`, 
                payload: { command: 'inventory_next', cursor, group_mode }, 
                color: 'secondary' 
            });
        }

        if (cursor >= 5 || 5 + cursor < totalItems) {
            keyboard.row();
        }

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π –≤–∏–∑—É–∞–ª)
        keyboard.textButton({ 
            label: group_mode ? `üìã –ü–æ—à—Ç—É—á–Ω–æ` : `üì¶ –ì—Ä—É–ø–ø–∞–º–∏`, 
            payload: { command: 'inventory_toggle_mode', cursor, group_mode }, 
            color: 'primary' 
        });
        keyboard.textButton({ 
            label: `<üîé>`, 
            payload: { command: 'inventory_target', cursor, group_mode }, 
            color: 'secondary' 
        });
        keyboard.textButton({ 
            label: `üéÅ ‚àû`, 
            payload: { command: 'inventory_mass_present', cursor, group_mode }, 
            color: 'positive' 
        });
        keyboard.textButton({ 
            label: `üö´ –í—ã—Ö–æ–¥`, 
            payload: { command: 'inventory_return', cursor }, 
            color: 'negative' 
        });
        
        keyboard.oneTime();

        const totalCount = await prisma.inventory.count({ where: { id_user: user.id } });
        const uniqueCount = groupedItems.length;
        
        event_logger += `\n${1 + Math.floor(cursor / 5)} –∏–∑ ${Math.ceil(totalItems / 5)}`;
        event_logger += `\nüìä –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${totalCount} | –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueCount}`;
        event_logger += `\nüîß –†–µ–∂–∏–º: ${group_mode ? '–ì—Ä—É–ø–ø—ã' : '–ü–æ—à—Ç—É—á–Ω–æ'}`;

        const inv_bt = await context.question(
            `üéí ${user_adm ? `${user.name}` : '–í–∞—à'} –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n${event_logger}`,
            { keyboard, answerTimeLimit }
        );

        // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        if (inv_bt.isTimeout) {
            await context.send(`‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!`);
            return;
        }

        if (!inv_bt.payload || !inv_bt.payload.command) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–Ω–æ–ø–∫–∏.`);
            continue;
        }

        const config: any = {
            'inventory_select': Inventory_Select,
            'inventory_group_select': Inventory_Group_Select,
            'inventory_delete': Inventory_Delete,
            'inventory_group_delete': Inventory_Group_Delete,
            'inventory_present': Inventory_Present,
            'inventory_group_present': Inventory_Group_Present,
            'inventory_mass_present': Inventory_Mass_Present,
            'inventory_next': Inventory_Next,
            'inventory_back': Inventory_Back,
            'inventory_target': Inventory_Target,
            'inventory_toggle_mode': Inventory_Toggle_Mode,
            'inventory_return': Inventory_Return,
            'mass_present_select_item': Mass_Present_Select_Item,
            'mass_present_mode': Mass_Present_Mode,
            'mass_present_prev_page': Mass_Present_Prev_Page,
            'mass_present_next_page': Mass_Present_Next_Page,
            'mass_present_cancel': Mass_Present_Cancel
        };

        const ans = await config[inv_bt.payload.command](context, inv_bt.payload, user, user_adm);
        cursor = ans?.cursor ?? cursor;
        group_mode = ans?.group_mode ?? group_mode;
        inventory_tr = ans.stop ?? false;
    }
    await Keyboard_Index(context, `‚åõ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞, —ç—Ç–æ –º–∞–≥–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞?`);
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async function Inventory_Page_Info(context: any, data: any, user: User, user_adm?: User) {
    const totalItems = data.group_mode ? 
        (await groupInventoryItems(user.id)).length : 
        await prisma.inventory.count({ where: { id_user: user.id } });
    
    const totalPages = Math.ceil(totalItems / 5);
    const currentPage = Math.floor(data.cursor / 5) + 1;
    
    await context.send(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}\nüìä –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${totalItems}`);
    
    return { cursor: data.cursor, group_mode: data.group_mode };
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–∞—Ä–µ–Ω–∏—è
async function Mass_Present_Cancel(context: any, data: any, user: User, user_adm?: User) {
    await context.send(`‚ùå –ú–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
    return { cursor: data.cursor, group_mode: data.group_mode };
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function Inventory_Toggle_Mode(context: any, data: any, user: User, user_adm?: User) {
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    const new_group_mode = !data.group_mode;
    const res = { cursor: 0, group_mode: new_group_mode }; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    await context.send(`üîß –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${new_group_mode ? '–ì—Ä—É–ø–ø—ã' : '–ü–æ—à—Ç—É—á–Ω–æ'}`);
    return res;
}

// –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async function Inventory_Group_Select(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: data.cursor, group_mode: data.group_mode };
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const groupedItems = await groupInventoryItems(user.id);
    const group = groupedItems.find(g => g.type === data.type && g.id_item === data.id_item);
    
    if (!group) {
        await context.send(`‚ùå –ì—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return res;
    }

    let text = '';
    if (group.type == InventoryType.ITEM_SHOP_ALLIANCE) {
        text = `üõç –ü—Ä–µ–¥–º–µ—Ç: ${group.name}\nüßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${group.count}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${group.item_info?.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${group.item_info?.price || 'N/A'}\nüì¶ –í–µ—Ä—Å–∏—è: ${group.item_info?.limit_tr ? `–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ` : '‚àû –ë–µ–∑–ª–∏–º–∏—Ç'}\nüß≤ –ì–¥–µ –∫—É–ø–ª–µ–Ω–æ: –≤ –†–æ–ª–µ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ`;
    } else if (group.type == InventoryType.ITEM_STORAGE) {
        text = `üõç –ü—Ä–µ–¥–º–µ—Ç: ${group.name}\nüßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${group.count}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${group.item_info?.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüß≤ –ö–∞–∫ –ø–æ–ª—É—á–µ–Ω–æ: –ê—Ä—Ç–µ—Ñ–∞–∫—Ç`;
    } else if (group.type == InventoryType.ITEM_SHOP) {
        text = `üõç –ü—Ä–µ–¥–º–µ—Ç: ${group.name}\nüßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${group.count}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${group.item_info?.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${group.item_info?.price || 'N/A'}\nüß≤ –ì–¥–µ –∫—É–ø–ª–µ–Ω–æ: –≤ –ú–∞–≥–æ–ª–∞–≤–∫–µ`;
    }

    const attached = group.item_info?.image ? group.item_info.image : null;
    const okKeyboard = new KeyboardBuilder()
        .textButton({ label: `‚úÖ –û–ö`, payload: { command: 'inventory_return' }, color: 'positive' })
        .inline().oneTime();

    await Send_Message(context.peerId, text, okKeyboard, attached);

    return res;
}

// –î–∞—Ä–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async function Inventory_Group_Present(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: data.cursor, group_mode: data.group_mode };
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    const groupedItems = await groupInventoryItems(user.id);
    const group = groupedItems.find(g => g.type === data.type && g.id_item === data.id_item);
    
    if (!group) {
        await context.send(`‚ùå –ì—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return res;
    }

    const confirm: { status: boolean, text: string } = await Confirm_User_Success(
        context, 
        `–ø–æ–¥–∞—Ä–∏—Ç—å ${group.count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${group.name}"?`
    );
    
    if (!confirm.status) return res;

    // –ü–æ–ª—É—á–∞–µ–º UID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const person_goten = await Input_Number(context, `–í–≤–µ–¥–∏—Ç–µ UID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –ø–æ–¥–∞—Ä–µ–Ω—ã ${group.count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${group.name}":`, true);
    if (!person_goten) { 
        await context.send(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω.`); 
        return res; 
    }
    
    if (person_goten == user.id) { 
        await context.send(`‚ùå –ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!`); 
        return res;
    }
    
    const person_goten_check = await prisma.user.findFirst({ where: { id: person_goten } });
    if (!person_goten_check) { 
        await context.send(`‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å UID ${person_goten} –Ω–µ –Ω–∞–π–¥–µ–Ω!`); 
        return res; 
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ
    const final_confirm: { status: boolean, text: string } = await Confirm_User_Success(
        context, 
        `–ø–æ–¥–∞—Ä–∏—Ç—å ${group.count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${group.name}" –∏–≥—Ä–æ–∫—É ${person_goten_check.name}?`
    );
    
    if (!final_confirm.status) {
        await context.send(`‚ùå –î–∞—Ä–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
        return res;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∞—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
    let success_count = 0;
    let failed_count = 0;

    for (const inventory_id of group.inventory_ids) {
        try {
            const updated_item = await prisma.inventory.update({
                where: { id: inventory_id },
                data: { 
                    id_user: person_goten_check.id,
                    comment: `–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç ${user.name}${user_adm ? ` (—á–µ—Ä–µ–∑ ${user_adm.name})` : ''}`
                }
            });

            if (updated_item) {
                success_count++;
            } else {
                failed_count++;
            }
        } catch (error) {
            await context.send(`‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ID ${inventory_id}`);
            failed_count++;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const result_message = `üéÅ –î–∞—Ä–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: ${success_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å: ${failed_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n\nüì¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${person_goten_check.name} (UID: ${person_goten_check.id})\nüéØ –ü—Ä–µ–¥–º–µ—Ç: ${group.name} √ó ${success_count}`;

    await context.send(result_message);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    const receiver_message = `üéÅ –í–∞–º –ø–æ–¥–∞—Ä–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –æ—Ç @id${user.idvk}(${user.name}) (UID: ${user.id})!\n\nüéØ –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º: ${person_goten_check.name} (UID: ${person_goten_check.id})\n\n–ë—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ ${success_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${group.name} √ó ${success_count}`;

    await Send_Message(person_goten_check.idvk, receiver_message);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    const log_message = `üéÅ –î–∞—Ä–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤

üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @id${user.idvk}(${user.name}) (UID: ${user.id})
üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @id${person_goten_check.idvk}(${person_goten_check.name}) (UID: ${person_goten_check.id})
üì¶ –ü–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${success_count}
üéØ –ü—Ä–µ–¥–º–µ—Ç: ${group.name} √ó ${success_count}`;

    await Send_Message(chat_id, log_message);

    return res;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async function Inventory_Group_Delete(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: data.cursor, group_mode: data.group_mode };
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    const groupedItems = await groupInventoryItems(user.id);
    const group = groupedItems.find(g => g.type === data.type && g.id_item === data.id_item);
    
    if (!group) {
        await context.send(`‚ùå –ì—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return res;
    }

    const confirm: { status: boolean, text: string } = await Confirm_User_Success(
        context, 
        `—É–¥–∞–ª–∏—Ç—å ${group.count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${group.name}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è?`
    );
    
    if (!confirm.status) return res;

    // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
    let success_count = 0;
    let failed_count = 0;

    for (const inventory_id of group.inventory_ids) {
        try {
            const deleted = await prisma.inventory.delete({
                where: { id: inventory_id }
            });

            if (deleted) {
                success_count++;
            } else {
                failed_count++;
            }
        } catch (error) {
            await context.send(`‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ID ${inventory_id}`);
            failed_count++;
        }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
    if (success_count > 0) {
        await Logger(`–ò–≥—Ä–æ–∫ @id${user_adm?.idvk || user.idvk} —É–¥–∞–ª–∏–ª "${group.name} √ó ${success_count}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`);
        await context.send(`–í—ã —É–¥–∞–ª–∏–ª–∏ "${group.name} √ó ${success_count}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.`);
        
        if(user_adm) {
            await Send_Message(user.idvk, `üéí –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ "${group.name} √ó ${success_count}" –≤—ã–∫—Ä–∞–ª–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏—Ö —Ä–∞–∑–¥–∞–ª–∏ –±–µ–∑–¥–æ–º–Ω—ã–º –¥–µ—Ç—è–º –≤ –ê—Ñ—Ä–∏–∫–µ, –∞ –Ω–µ —Å–µ–±–µ, –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ –≤ –ê–∑–∫–∞–±–∞–Ω.`);
            await Send_Message(chat_id, `üéí @id${user_adm.idvk}(${user_adm.name}) —É–¥–∞–ª—è–µ—Ç "${group.name} √ó ${success_count}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ @id${user.idvk}(${user.name})`);
        } else { 
            await Send_Message(chat_id, `üéí @id${user.idvk}(${user.name}) —É–¥–∞–ª—è–µ—Ç "${group.name} √ó ${success_count}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`);
        }
    }

    await context.send(`üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: ${success_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${failed_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);

    return res;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
async function Inventory_Next(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: data.cursor + 5, group_mode: data.group_mode ?? false };
    return res;
}

async function Inventory_Back(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: Math.max(0, data.cursor - 5), group_mode: data.group_mode ?? false };
    return res;
}

async function Inventory_Target(context: any, data: any, user: User, user_adm?: User) {
    const totalItems = data.group_mode ? 
        (await groupInventoryItems(user.id)).length : 
        await prisma.inventory.count({ where: { id_user: user.id } });
    
    const cursor_change = await Input_Number(context, `–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, —Å–µ–π—á–∞—Å [${Math.floor(data.cursor / 5) + 1}]:`, false);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cursor_change - —á–∏—Å–ª–æ, –∞ –Ω–µ false
    if (cursor_change === false) {
        const res = { cursor: data.cursor, group_mode: data.group_mode ?? false };
        return res;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    const totalPages = Math.ceil(totalItems / 5);
    if (cursor_change > totalPages) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const lastCursor = (totalPages - 1) * 5;
        const res = { cursor: lastCursor, group_mode: data.group_mode ?? false };
        await context.send(`‚ö† –í—ã –≤–≤–µ–ª–∏ –ø–æ–∑–∏—Ü–∏—é ${cursor_change}, –Ω–æ —É –≤–∞—Å –≤—Å–µ–≥–æ ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü. –ö—É—Ä—Å–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.`);
        return res;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
    if (cursor_change < 1) {
        const res = { cursor: 0, group_mode: data.group_mode ?? false };
        await context.send(`‚ö† –ü–æ–∑–∏—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1. –ö—É—Ä—Å–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª–æ.`);
        return res;
    }
    
    const res = { cursor: (cursor_change - 1) * 5, group_mode: data.group_mode ?? false };
    return res;
}

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É group_mode)
async function Inventory_Select(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: data.cursor, group_mode: data.group_mode ?? false };
    const inv = await prisma.inventory.findFirst({
        where: { id: data.id_item },
    });

    if (!inv) {
        await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return res;
    }
    let item = null
    let text = ''
    if (inv.type == InventoryType.ITEM_SHOP_ALLIANCE) {
        item = await prisma.allianceShopItem.findFirst({ where: { id: inv.id_item } })
        if (!item) {
            await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return res;
        }
        text = `üõç –ü—Ä–µ–¥–º–µ—Ç: ${item.name}\nüßæ ID: ${item.id}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.price}\nüì¶ –í–µ—Ä—Å–∏—è: ${item.limit_tr ? `–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ` : '‚àû –ë–µ–∑–ª–∏–º–∏—Ç'}\nüß≤ –ì–¥–µ –∫—É–ø–ª–µ–Ω–æ: –≤ –†–æ–ª–µ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${inv.comment}`;
    }
    if (inv.type == InventoryType.ITEM_STORAGE) {
        item = await prisma.itemStorage.findFirst({ where: { id: inv.id_item } })
        if (!item) {
            await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return res;
        }
        text = `üõç –ü—Ä–µ–¥–º–µ—Ç: ${item.name}\nüßæ ID: ${item.id}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüß≤ –ö–∞–∫ –ø–æ–ª—É—á–µ–Ω–æ: –ê—Ä—Ç–µ—Ñ–∞–∫—Ç\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${inv.comment}`;
    }
    if (inv.type == InventoryType.ITEM_SHOP) {
        item = await prisma.item.findFirst({ where: { id: inv.id_item } })
        if (!item) {
            await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return res;
        }
        text = `üõç –ü—Ä–µ–¥–º–µ—Ç: ${item.name}\nüßæ ID: ${item.id}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.price}\nüß≤ –ì–¥–µ –∫—É–ø–ª–µ–Ω–æ: –≤ –ú–∞–≥–æ–ª–∞–≤–∫–µ`;
    }
    const attached = item?.image ? item?.image : null;
    const okKeyboard = new KeyboardBuilder()
        .textButton({ label: `‚úÖ –û–ö`, payload: { command: 'inventory_return' }, color: 'positive' })
        .inline().oneTime();

    await Send_Message(context.peerId, text, okKeyboard, attached);

    return res;
}

async function Inventory_Delete(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: data.cursor, group_mode: data.group_mode ?? false };
    const inv = await prisma.inventory.findFirst({
        where: { id: data.id_item },
    });
    if (!inv) {
        await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return res;
    }
    let item = null
    if (inv.type == InventoryType.ITEM_SHOP_ALLIANCE) {
        item = await prisma.allianceShopItem.findFirst({ where: { id: inv.id_item } })
        if (!item) {
            await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return res;
        }
    }
    if (inv.type == InventoryType.ITEM_SHOP) {
        item = await prisma.item.findFirst({ where: { id: inv.id_item } })
        if (!item) {
            await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return res;
        }
    }
    const confirm: { status: boolean, text: string } = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å "${item?.name}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è?`);

    await context.send(confirm.text);
    if (!confirm.status) return res;
    const deleted = await prisma.inventory.delete({
        where: { id: inv.id }
    });

    if (deleted) {
        await Logger(`–ò–≥—Ä–æ–∫ @id${user_adm?.idvk} —É–¥–∞–ª–∏–ª "${deleted.id}-${item?.name}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`);
        await context.send(`–í—ã —É–¥–∞–ª–∏–ª–∏ "${deleted.id}-${item?.name}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.`);
        if(user_adm) {
            await Send_Message(user.idvk, `üéí –í–∞—à—É –ø–æ–∫—É–ø–∫—É "${deleted.id}-${item?.name}" –≤—ã–∫—Ä–∞–ª–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –µ–µ —Ä–∞–∑–¥–∞–ª–∏ –±–µ–∑–¥–æ–º–Ω—ã–º –¥–µ—Ç—è–º –≤ –ê—Ñ—Ä–∏–∫–µ, –∞ –Ω–µ —Å–µ–±–µ, –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ –≤ –ê–∑–∫–∞–±–∞–Ω.`);
            await Send_Message(chat_id, `üéí @id${user_adm.idvk}(${user_adm.name}) —É–¥–∞–ª—è–µ—Ç "${deleted.id}-${item?.name}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ @id${user.idvk}(${user.name})`);
        } else { 
            await Send_Message(chat_id, `üéí @id${user.idvk}(${user.name}) —É–¥–∞–ª—è–µ—Ç "${deleted.id}-${item?.name}" –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è`);
        }
    }

    return res;
}

async function Inventory_Present(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: data.cursor, group_mode: data.group_mode ?? false };
    const inv = await prisma.inventory.findFirst({
        where: { id: data.id_item },
    });
    if (!inv) {
        await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return res;
    }
    let item = null
    let text = ''
    if (inv.type == InventoryType.ITEM_SHOP_ALLIANCE) {
        item = await prisma.allianceShopItem.findFirst({ where: { id: inv.id_item } })
        if (!item) {
            await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return res;
        }
        text = `üõç –ü—Ä–µ–¥–º–µ—Ç: ${item.name}\nüßæ ID: ${item.id}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.price}\nüì¶ –í–µ—Ä—Å–∏—è: ${item.limit_tr ? `–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ` : '‚àû –ë–µ–∑–ª–∏–º–∏—Ç'}\nüß≤ –ì–¥–µ –∫—É–ø–ª–µ–Ω–æ: –≤ –†–æ–ª–µ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${inv.comment}`;
    }
    if (inv.type == InventoryType.ITEM_SHOP) {
        item = await prisma.item.findFirst({ where: { id: inv.id_item } })
        if (!item) {
            await context.send(`‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return res;
        }
        text = `üõç –ü—Ä–µ–¥–º–µ—Ç: ${item.name}\nüßæ ID: ${item.id}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.price}\nüß≤ –ì–¥–µ –∫—É–ø–ª–µ–Ω–æ: –≤ –ú–∞–≥–æ–ª–∞–≤–∫–µ`;
    }
    const confirm: { status: boolean, text: string } = await Confirm_User_Success(context, `–ø–æ–¥–∞—Ä–∏—Ç—å –∫–æ–º—É-—Ç–æ "${item?.name}" –∏–∑ —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è?`);
    await context.send(confirm.text);
    if (!confirm.status) return res;
    const person_goten = await Input_Number(context, `–í–≤–µ–¥–∏—Ç–µ UID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø–æ–¥–∞—Ä–µ–Ω–æ:\n ${text}`, true)
    if (!person_goten) { await context.send(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`); return res }
    if (person_goten == user.id) { await context.send(`–°–∞–º–æ–º—É —Å–µ–±–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —à–æ–ø–∏–Ω–≥:)`); return res}
    const person_goten_check = await prisma.user.findFirst({ where: { id: person_goten } })
    if (!person_goten_check) { await context.send(`–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è!`); return res }
    const confirm_gift: { status: boolean, text: string } = await Confirm_User_Success(context, `–ø–æ–¥–∞—Ä–∏—Ç—å "${item?.name}" ${person_goten_check.name} –∏–∑ —Å–≤–æ–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è?`);
    if (!confirm_gift.status) return res;
    const item_update = await prisma.inventory.update({ where: { id: inv.id }, data: { id_user: person_goten_check.id } });
    if (!item_update) { return res }
    const notif = `"<üéÅ>" --> –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ "${item?.name}" –æ—Ç –∏–≥—Ä–æ–∫–∞ @id${user.idvk}(${user.name}) –∏–≥—Ä–æ–∫—É @id${person_goten_check.idvk}(${person_goten_check.name})${user_adm ? `\nüóø –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @id${user_adm.idvk}(${user_adm.name})` : ''}`
    await Send_Message_Smart(context, notif, 'client_callback', person_goten_check)
    if (user_adm) { await Send_Message(user_adm.idvk, notif) }
    await Send_Message(user.idvk, notif)
    return res;
}

async function Inventory_Return(context: any, data: any, user: User, user_adm?: User) {
    const res = { stop: true };
    await context.send(`‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.`, { keyboard: button_alliance_return });
    return res;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–∞—Ä–µ–Ω–∏—è
async function Mass_Present_Mode(context: any, data: any, user: User, user_adm?: User) {
    return { cursor: data.cursor, group_mode: data.group_mode };
}

async function Mass_Present_Select_Item(context: any, data: any, user: User, user_adm?: User) {
    return { cursor: data.cursor, group_mode: data.group_mode };
}

async function Inventory_Mass_Present(context: any, data: any, user: User, user_adm?: User) {
    const res = { cursor: data.cursor, group_mode: data.group_mode ?? false };
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–∞—Ä–µ–Ω–∏—è
    const confirm: { status: boolean, text: string } = await Confirm_User_Success(
        context, 
        `–º–∞—Å—Å–æ–≤–æ —Ä–∞–∑–¥–∞—Ä–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`
    );
    
    if (!confirm.status) {
        await context.send(`‚ùå –ú–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
        return res;
    }

    // –ü–æ–ª—É—á–∞–µ–º UID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const person_goten = await Input_Number(context, `–í–≤–µ–¥–∏—Ç–µ UID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –ø–æ–¥–∞—Ä–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã:`, true);
    if (!person_goten) { 
        await context.send(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω.`); 
        return res; 
    }
    
    if (person_goten == user.id) { 
        await context.send(`‚ùå –ù–µ–ª—å–∑—è –¥–∞—Ä–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!`); 
        return res;
    }
    
    const person_goten_check = await prisma.user.findFirst({ where: { id: person_goten } });
    if (!person_goten_check) { 
        await context.send(`‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å UID ${person_goten} –Ω–µ –Ω–∞–π–¥–µ–Ω!`); 
        return res; 
    }

    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –¥–∞—Ä–µ–Ω–∏—è
    const modeKeyboard = new KeyboardBuilder()
        .textButton({ 
            label: `üìã –ü–æ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤`, 
            payload: { command: 'mass_present_mode', mode: 'by_ids' }, 
            color: 'primary' 
        })
        .textButton({ 
            label: `üì¶ –ü–æ —Ç–∏–ø—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É`, 
            payload: { command: 'mass_present_mode', mode: 'by_type' }, 
            color: 'primary' 
        })
        .row()
        .textButton({ 
            label: `‚ùå –û—Ç–º–µ–Ω–∞`, 
            payload: { command: 'mass_present_cancel' }, 
            color: 'negative' 
        })
        .oneTime();

    const modeMessage = `üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–∞—Ä–µ–Ω–∏—è:\n\n` +
        `üìã –ü–æ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ‚Äî –≤–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n` +
        `üì¶ –ü–æ —Ç–∏–ø—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –ø–æ–¥–∞—Ä–∏—Ç—å`;

    const modeResponse = await context.question(modeMessage, { keyboard: modeKeyboard, answerTimeLimit });
    
    if (modeResponse.isTimeout) {
        await context.send(`‚è∞ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ!`);
        return res;
    }

    if (!modeResponse.payload || modeResponse.payload.command === 'mass_present_cancel') {
        await context.send(`‚ùå –ú–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
        return res;
    }

    const mode = modeResponse.payload.mode;
    let item_ids: number[] = [];
    let gifted_items_info = '';

    if (mode === 'by_ids') {
        // –†–µ–∂–∏–º –ø–æ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const instructionMessage = `üìù –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–∞—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 14 374 85 92\n\nüí° ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É–∫–∞–∑–∞–Ω—ã –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞`;
        
        const items_input = await context.question(instructionMessage, { answerTimeLimit });
        if (items_input.isTimeout) {
            await context.send(`‚è∞ –í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ!`);
            return res;
        }

        item_ids = items_input.text.trim().split(/\s+/).map(id => parseInt(id)).filter(id => !isNaN(id));
        
        if (item_ids.length === 0) {
            await context.send(`‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–∞—Ä–µ–Ω–∏—è.`);
            return res;
        }

    } else if (mode === 'by_type') {
        // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ —Ç–∏–ø—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        let item_cursor = 0;
        let item_selection_complete = false;
        
        while (!item_selection_complete) {
            const groupedItems = await groupInventoryItems(user.id);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 1 —à—Ç—É–∫–∏
            const multipleItems = groupedItems.filter(group => group.count > 1);
            
            if (multipleItems.length === 0) {
                await context.send(`‚ùå –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ 1 —à—Ç—É–∫–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "–ü–æ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤" –¥–ª—è –¥–∞—Ä–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.`);
                return res;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            const itemKeyboard = new KeyboardBuilder();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 6 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
            const itemsPerPage = 6;
            const startIndex = item_cursor;
            const endIndex = Math.min(startIndex + itemsPerPage, multipleItems.length);
            const currentPageItems = multipleItems.slice(startIndex, endIndex);

            for (const group of currentPageItems) {
                const itemName = group.name.length > 20 ? group.name.slice(0, 20) + '...' : group.name;
                const buttonLabel = `${itemName} √ó ${group.count}`;
                
                itemKeyboard.textButton({
                    label: buttonLabel,
                    payload: { 
                        command: 'mass_present_select_item', 
                        type: group.type, 
                        id_item: group.id_item,
                        max_count: group.count,
                        item_cursor: item_cursor
                    },
                    color: 'secondary'
                });
                itemKeyboard.row();
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if (item_cursor > 0) {
                itemKeyboard.textButton({ 
                    label: `‚Üê`, 
                    payload: { command: 'mass_present_prev_page', item_cursor }, 
                    color: 'secondary' 
                });
            }

            if (endIndex < multipleItems.length) {
                itemKeyboard.textButton({ 
                    label: `‚Üí`, 
                    payload: { command: 'mass_present_next_page', item_cursor }, 
                    color: 'secondary' 
                });
            }

            if (item_cursor > 0 || endIndex < multipleItems.length) {
                itemKeyboard.row();
            }

            itemKeyboard.textButton({ 
                label: `‚ùå –û—Ç–º–µ–Ω–∞`, 
                payload: { command: 'mass_present_cancel' }, 
                color: 'negative' 
            });
            itemKeyboard.oneTime();

            const currentPage = Math.floor(item_cursor / itemsPerPage) + 1;
            const totalPages = Math.ceil(multipleItems.length / itemsPerPage);
            
            const itemMessage = `üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–∞—Ä–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}):\n\n` +
                `üí° –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö —É –≤–∞—Å –±–æ–ª—å—à–µ 1 —à—Ç—É–∫–∏\n` +
                `üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${multipleItems.length}`;

            const itemResponse = await context.question(itemMessage, { keyboard: itemKeyboard, answerTimeLimit });
            
            if (itemResponse.isTimeout || !itemResponse.payload) {
                await context.send(`‚è∞ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ!`);
                return res;
            }

            if (itemResponse.payload.command === 'mass_present_cancel') {
                await context.send(`‚ùå –ú–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
                return res;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (itemResponse.payload.command === 'mass_present_prev_page') {
                item_cursor = Math.max(0, item_cursor - itemsPerPage);
                continue;
            }

            if (itemResponse.payload.command === 'mass_present_next_page') {
                item_cursor = item_cursor + itemsPerPage;
                continue;
            }

            if (itemResponse.payload.command === 'mass_present_select_item') {
                const selectedGroup = multipleItems.find(g => 
                    g.type === itemResponse.payload.type && 
                    g.id_item === itemResponse.payload.id_item
                );

                if (!selectedGroup) {
                    await context.send(`‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                    continue;
                }

                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                const countMessage = `üî¢ –£ –≤–∞—Å –µ—Å—Ç—å ${selectedGroup.count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${selectedGroup.name}"\n\n` +
                    `–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${selectedGroup.count})`;

                const countResponse = await context.question(countMessage, { answerTimeLimit });
                
                if (countResponse.isTimeout) {
                    await context.send(`‚è∞ –í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ!`);
                    return res;
                }

                const giftCount = parseInt(countResponse.text.trim());
                
                if (isNaN(giftCount) || giftCount < 1 || giftCount > selectedGroup.count) {
                    await context.send(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${selectedGroup.count}`);
                    continue;
                }

                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
                item_ids = selectedGroup.inventory_ids.slice(0, giftCount);
                gifted_items_info = `\nüéÅ ${selectedGroup.name} √ó ${giftCount}`;
                item_selection_complete = true;
            }
        }
    } else {
        await context.send(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–∞—Ä–µ–Ω–∏—è.`);
        return res;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ
    const finalConfirmMessage = mode === 'by_ids' 
        ? `–ø–æ–¥–∞—Ä–∏—Ç—å ${item_ids.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫—É ${person_goten_check.name}?`
        : `–ø–æ–¥–∞—Ä–∏—Ç—å ${item_ids.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "${gifted_items_info.split('√ó')[0].trim()}" –∏–≥—Ä–æ–∫—É ${person_goten_check.name}?`;

    const final_confirm: { status: boolean, text: string } = await Confirm_User_Success(
        context, 
        finalConfirmMessage
    );
    
    if (!final_confirm.status) {
        await context.send(`‚ùå –ú–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
        return res;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ
    let success_count = 0;
    let failed_count = 0;

    // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø–æ —Ç–∏–ø—É –º—ã –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö, –¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–µ–π—á–∞—Å
    if (mode === 'by_ids') {
        gifted_items_info = '';
    }

    for (const item_id of item_ids) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const inv = await prisma.inventory.findFirst({
                where: { 
                    id: item_id,
                    id_user: user.id 
                }
            });

            if (!inv) {
                await context.send(`‚ö† –ü—Ä–µ–¥–º–µ—Ç —Å ID ${item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.`);
                failed_count++;
                continue;
            }

            // –î–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ ID —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
            if (mode === 'by_ids') {
                let item_info = null;
                if (inv.type == InventoryType.ITEM_SHOP_ALLIANCE) {
                    item_info = await prisma.allianceShopItem.findFirst({ where: { id: inv.id_item } });
                } else if (inv.type == InventoryType.ITEM_SHOP) {
                    item_info = await prisma.item.findFirst({ where: { id: inv.id_item } });
                } else if (inv.type == InventoryType.ITEM_STORAGE) {
                    item_info = await prisma.itemStorage.findFirst({ where: { id: inv.id_item } });
                }

                if (success_count === 0) {
                    gifted_items_info += `\nüéÅ ${item_info?.name || `–ü—Ä–µ–¥–º–µ—Ç ${inv.id}`}`;
                }
            }

            // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
            const updated_item = await prisma.inventory.update({
                where: { id: inv.id },
                data: { 
                    id_user: person_goten_check.id,
                    comment: `–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç ${user.name}${user_adm ? ` (—á–µ—Ä–µ–∑ ${user_adm.name})` : ''}`
                }
            });

            if (updated_item) {
                success_count++;
                await Logger(`–ú–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ: ${user.name} -> ${person_goten_check.name}, –ø—Ä–µ–¥–º–µ—Ç ID: ${inv.id}`);
            } else {
                failed_count++;
            }

        } catch (error) {
            await context.send(`‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ID ${item_id}`);
            failed_count++;
        }
    }

    // –î–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ ID –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (mode === 'by_ids' && success_count > 0) {
        gifted_items_info += ` √ó ${success_count}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const result_message = `üéÅ –ú–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n` +
        `‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: ${success_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n` +
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å: ${failed_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n\n` +
        `üì¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${person_goten_check.name} (UID: ${person_goten_check.id})` +
        gifted_items_info;

    await context.send(result_message);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    const receiver_message = `üéÅ –í–∞–º –ø–æ–¥–∞—Ä–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –æ—Ç @id${user.idvk}(${user.name}) (UID: ${user.id})!\n\n` +
        `üéØ –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º: ${person_goten_check.name} (UID: ${person_goten_check.id})\n\n` +
        `–ë—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ ${success_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤:` +
        gifted_items_info;

    await Send_Message(person_goten_check.idvk, receiver_message);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    const log_message = `üéÅ –ú–∞—Å—Å–æ–≤–æ–µ –¥–∞—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n\n` +
        `üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @id${user.idvk}(${user.name}) (UID: ${user.id})\n` +
        `üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @id${person_goten_check.idvk}(${person_goten_check.name}) (UID: ${person_goten_check.id})\n` +
        `üì¶ –ü–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${success_count}\n` +
        `üìù –†–µ–∂–∏–º: ${mode === 'by_ids' ? '–ü–æ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤' : '–ü–æ —Ç–∏–ø—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É'}` +
        gifted_items_info;

    await Send_Message(chat_id, log_message);

    return res;
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –º–∞—Å—Å–æ–≤–æ–º –¥–∞—Ä–µ–Ω–∏–∏
async function Mass_Present_Prev_Page(context: any, data: any, user: User, user_adm?: User) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Inventory_Mass_Present
    return { cursor: data.cursor, group_mode: data.group_mode };
}

async function Mass_Present_Next_Page(context: any, data: any, user: User, user_adm?: User) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Inventory_Mass_Present
    return { cursor: data.cursor, group_mode: data.group_mode };
}
