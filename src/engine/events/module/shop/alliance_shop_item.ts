import { KeyboardBuilder } from "vk-io";
import prisma from "../prisma_client";
import { answerTimeLimit, chat_id, timer_text } from "../../../..";
import { Confirm_User_Success, Fixed_Number_To_Five, Get_Url_Picture, Logger, Select_Alliance_Coin, Send_Message, Send_Message_Smart } from "../../../core/helper";
import { AllianceCoin } from "@prisma/client";
import { ico_list } from "../data_center/icons_lib";

async function AllianceShopItem_Get(cursor: number, id_category: number) {
    const batchSize = 5;
    let counter = 0;
    let limiter = 0;
    let res: any[] = [];

    for (const item of await prisma.allianceShopItem.findMany({ where: { id_shop: id_category } })) {
        if ((cursor <= counter && batchSize + cursor >= counter) && limiter < batchSize) {
            res.push(item);
            limiter++;
        }
        counter++;
    }

    return res;
}

export async function AllianceShopItem_Printer(context: any, id_category: number) {
    const category = await prisma.allianceShopCategory.findFirst({ where: { id: id_category } });
    let item_tr = false;
    let cursor = 0;

    while (!item_tr) {
        const keyboard = new KeyboardBuilder();
        let event_logger = '';

        for await (const item of await AllianceShopItem_Get(cursor, id_category)) {
            keyboard.textButton({
                label: `üß≥ ${item.id}-${item.name.slice(0, 30)}`,
                payload: { command: 'allianceshopitem_select', cursor, id_item: item.id },
                color: 'secondary'
            }).row()

            event_logger += `üí¨ ${item.id} - ${item.name}\n`;
        }

        if (cursor >= 5) {
            keyboard.textButton({ label: `‚Üê`, payload: { command: 'allianceshopitem_back', cursor }, color: 'secondary' });
        }

        const item_counter = await prisma.allianceShopItem.count({ where: { id_shop: id_category } });
        if (5 + cursor < item_counter) {
            keyboard.textButton({ label: `‚Üí`, payload: { command: 'allianceshopitem_next', cursor }, color: 'secondary' });
        }

        keyboard.textButton({ label: `‚ûï`, payload: { command: 'allianceshopitem_create', cursor }, color: 'positive' }).row()
        .textButton({ label: `üö´ –û—Ç–º–µ–Ω–∞`, payload: { command: 'allianceshopitem_return', cursor }, color: 'negative' }).oneTime();

        event_logger += `\n${1 + cursor} –∏–∑ ${item_counter}`;

        const item_bt = await context.question(
            `üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category?.name}:\n${event_logger}`,
            { keyboard, answerTimeLimit }
        );

        if (item_bt.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ!`); return; }

        if (!item_bt.payload) { await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º!`); continue; }

        const config: any = {
            'allianceshopitem_select': AllianceShopItem_Select,
            'allianceshopitem_create': AllianceShopItem_Create,
            'allianceshopitem_next': AllianceShopItem_Next,
            'allianceshopitem_back': AllianceShopItem_Back,
            'allianceshopitem_return': AllianceShopItem_Return,
        };

        const ans = await config[item_bt.payload.command](context, item_bt.payload, category);
        cursor = ans?.cursor ?? cursor;
        item_tr = ans.stop ?? false;
    }
}

async function AllianceShopItem_Create(context: any, data: any, category: any) {
    const res = { cursor: data.cursor };
    let name_loc = null;
    let desc = '';
    let image_url = '';
    let price = 0;
    let limit = 0;
    let limit_tr = false;

    const name = await context.question(`üîñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`, timer_text);
    if (name.isTimeout) return res;
    name_loc = name.text;

    const description = await context.question(`üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`, timer_text);
    if (description.isTimeout) return res;
    desc = description.text;

    const imageUrl = await context.question(`üì∑ –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ "–Ω–µ—Ç"):`, timer_text);
    if (imageUrl.isTimeout) return res;
    image_url = imageUrl.text.toLowerCase() === '–Ω–µ—Ç' ? '' : Get_Url_Picture(imageUrl.text) ?? '';

    const alli_shop_cat = await prisma.allianceShopCategory.findFirst({ where: { id: category.id } })
    if (!alli_shop_cat) { return }
    const alli_shop = await prisma.allianceShop.findFirst({ where: { id: alli_shop_cat.id_alliance_shop } })
    if (!alli_shop) { return }
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(alli_shop.id_alliance) } })
    const selectedCoinId = await Select_Alliance_Coin(context, Number(alli_shop.id_alliance));
    const id_coin = selectedCoinId

    const priceInput = await context.question(`üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:`, timer_text);
    if (priceInput.isTimeout) return res;
    price = parseInt(priceInput.text);

    const confirm: { status: boolean, text: string } = await Confirm_User_Success(context, `—Å–¥–µ–ª–∞—Ç—å —Ç–æ–≤–∞—Ä –ª–∏–º–∏—Ç–Ω—ã–º?`);
    await context.send(confirm.text);
    if (confirm.status) {
        limit_tr = true;
        const limitInput = await context.question(`üî¢ –£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–∞:`, timer_text);
        if (limitInput.isTimeout) return res;
        limit = parseInt(limitInput.text) || 0;
    }

    if (name_loc) {
        const item_cr = await prisma.allianceShopItem.create({
            data: {
                name: name_loc,
                description: desc,
                image: image_url,
                price,
                id_shop: category.id,
                id_coin: id_coin ?? 0,
                limit: limit,
                limit_tr: limit_tr
            }
        });
        await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" -->  –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: ${item_cr.id}-${item_cr.name}`, 'admin_solo')
    }

    return res;
}

async function AllianceShopItem_Delete(context: any, data: any, category: any) {
    const res = { cursor: data.cursor };
    const item = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item) return res;

    const confirm = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${item.name}"?`);
    await context.send(confirm.text);
    if (!confirm.status) return res;
    const confirm2 = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${item.name}", –≤—Å–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Ç–∞–∫–∂–µ –∏—Å—á–µ–∑–Ω—É—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–æ–≤?`);
    await context.send(confirm.text);
    if (!confirm2.status) return res;
    const confirm3 = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${item.name}", –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –≤—ã —É–≤–µ—Ä–µ–Ω—ã?`);
    await context.send(confirm.text);
    if (!confirm3.status) return res;

    const item_del = await prisma.allianceShopItem.delete({ where: { id: item.id } });
    await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" -->  —É–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: ${item_del.id}-${item_del.name}`, 'admin_solo')
    await context.send(`‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞`);

    return res;
}

async function AllianceShopItem_Return(context: any, data: any, category: any) {
    const res = { cursor: data.cursor, stop: true };
    await context.send(`–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤.`);
    return res;
}

async function AllianceShopItem_Next(context: any, data: any, category: any) {
    const res = { cursor: data.cursor + 5 };
    return res;
}

async function AllianceShopItem_Back(context: any, data: any, category: any) {
    const res = { cursor: data.cursor - 5 };
    return res;
}

async function AllianceShopItem_Select(context: any, data: any, category: any) {
    const res = { cursor: data.cursor };
    const item_check = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item_check) { await context.send(`‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.`); return res; }
    const alli_shop_cat = await prisma.allianceShopCategory.findFirst({ where: { id: category.id } })
    if (!alli_shop_cat) { return }
    const alli_shop = await prisma.allianceShop.findFirst({ where: { id: alli_shop_cat.id_alliance_shop } })
    if (!alli_shop) { return }
    const coin_get: AllianceCoin | null = await prisma.allianceCoin.findFirst({ where: { id_alliance: Number(alli_shop.id_alliance), id: item_check.id_coin } })
    let text = `üõç –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞: ${item_check.name}\n\nüßæ ID: ${item_check.id}\n${coin_get?.smile ?? 'üí∞'} –°—Ç–æ–∏–º–æ—Å—Ç—å [${coin_get?.name ?? ''}]: ${item_check.price}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${item_check.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\nüìç –ú–∞–≥–∞–∑–∏–Ω: ${alli_shop?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω'}\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${alli_shop_cat?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n${item_check.limit_tr ? `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${item_check.limit}` : '‚ôæÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: –±–µ–∑–ª–∏–º–∏—Ç'}\nüîä –¢–æ–≤–∞—Ä ${item_check.hidden ? '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' : '–¥–æ—Å—Ç—É–ø–µ–Ω'} –∫ –ø–æ–∫—É–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n‚öô –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    const keyboard = new KeyboardBuilder()
        .textButton({ label: '‚úè –ù–∞–∑–≤–∞–Ω–∏–µ', payload: { command: 'allianceshopitem_edit_name', id_item: item_check.id }, color: 'secondary' })
        .textButton({ label: 'üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞', payload: { command: 'allianceshopitem_edit_image', id_item: item_check.id }, color: 'secondary' }).row()
        .textButton({ label: 'üìâ –õ–∏–º–∏—Ç', payload: { command: 'allianceshopitem_edit_limit', id_item: item_check.id }, color: 'secondary' })
        .textButton({ label: 'üìú –û–ø–∏—Å–∞–Ω–∏–µ', payload: { command: 'allianceshopitem_edit_description', id_item: item_check.id }, color: 'secondary' }).row()
        .textButton({ label: 'üí∞ –¶–µ–Ω–∞', payload: { command: 'allianceshopitem_edit_price', id_item: item_check.id }, color: 'secondary' })
        .textButton({ label: 'üí± –í–∞–ª—é—Ç–∞', payload: { command: 'allianceshopitem_edit_coin', id_item: item_check.id }, color: 'secondary' }).row()
        .textButton({ label: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', payload: { command: 'allianceshopitem_view_stats', id_item: item_check.id }, color: 'secondary' })
        .textButton({ label: '‚õî –£–¥–∞–ª–∏—Ç—å', payload: { command: 'allianceshopitem_delete', id_item: item_check.id }, color: 'negative' }).row()
        .textButton({ label: 'üö´ –°–∫—Ä—ã—Ç—å', payload: { command: 'allianceshopitem_hide', id_item: item_check.id }, color: 'negative' })
        .textButton({ label: '‚úÖ –ì–æ—Ç–æ–≤–æ', payload: { command: 'allianceshopitem_return', id_item: item_check.id }, color: 'positive' }).row().inline();
    const attached = item_check.image ? item_check.image : null;

    const item_bt = await context.question(`${text}`, { keyboard, answerTimeLimit, attachment: attached });

    if (item_bt.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ!`); return res; }

    if (!item_bt.payload) { await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º!`); return res; }

    const config: any = {
        'allianceshopitem_return': AllianceShopItem_Return,
        'allianceshopitem_delete': AllianceShopItem_Delete,
        'allianceshopitem_edit_name': AllianceShopItem_Edit_Name,
        'allianceshopitem_edit_image': AllianceShopItem_Edit_Image,
        'allianceshopitem_edit_limit': AllianceShopItem_Edit_Limit,
        'allianceshopitem_view_stats': AllianceShopItem_View_Stats,
        'allianceshopitem_hide': AllianceShopItem_Hide,
        'allianceshopitem_edit_description': AllianceShopItem_Edit_Description,
        'allianceshopitem_edit_price': AllianceShopItem_Edit_Price,  
        'allianceshopitem_edit_coin': AllianceShopItem_Edit_Coin
    };

    const ans = await config[item_bt.payload.command](context, item_bt.payload, category);

    return res;
}

async function AllianceShopItem_Edit_Name(context: any, data: any) {
    const res = { cursor: data.cursor };
    const item_check = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item_check) return res;

    const newName = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è "${item_check.name}":`, timer_text);
    if (newName.isTimeout || !newName.text) return res;

    const item_name = await prisma.allianceShopItem.update({
        where: { id: item_check.id },
        data: { name: newName.text }
    });
    await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" -->  –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${item_check.id}-${item_check.name} -> ${item_name.id}-${item_name.name}`, 'admin_solo')
    return res;
}

async function AllianceShopItem_Edit_Image(context: any, data: any) {
    const res = { cursor: data.cursor };
    const item_check = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item_check) return res;

    const newImage = await context.question(`üì∑ –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ "–Ω–µ—Ç":`, timer_text);
    if (newImage.isTimeout) return res;
    const imageUrl = newImage.text.toLowerCase() === '–Ω–µ—Ç' ? '' : Get_Url_Picture(newImage.text) ?? '';

    const item_image = await prisma.allianceShopItem.update({ where: { id: item_check.id }, data: { image: imageUrl } });
    await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" -->  –∏–∑–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ [${item_check.id}-${item_check.name}]: https://vk.com/${item_check.image} -> https://vk.com/${item_image?.image}`, 'admin_solo')
    return res;
}

async function AllianceShopItem_Edit_Limit(context: any, data: any) {
    const res = { cursor: data.cursor };
    const item_check = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item_check) return res;
    let limit = item_check?.limit
    let limit_tr = false

    const confirm: { status: boolean, text: string } = await Confirm_User_Success(context, `—Å–¥–µ–ª–∞—Ç—å —Ç–æ–≤–∞—Ä –ª–∏–º–∏—Ç–Ω—ã–º, —Å–µ–π—á–∞—Å [${item_check.limit_tr ? '–ª–∏–º–∏—Ç' : '–±–µ–∑–ª–∏–º–∏—Ç'}]?`);
    await context.send(confirm.text);
    if (confirm.status) {
        limit_tr = true;
        const limitInput = await context.question(`üî¢ –£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–∞, —Å–µ–π—á–∞—Å [${item_check.limit}]:`, timer_text);
        if (limitInput.isTimeout) return res;
        limit = parseInt(limitInput.text) || 0;
    }
    const item_limit = await prisma.allianceShopItem.update({ where: { id: item_check.id }, data: { limit_tr: limit_tr, limit: limit } });
    await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" -->  –∏–∑–º–µ–Ω–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–∞ [${item_limit.id}-${item_limit.name}]: ${item_check.limit_tr ? `–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ ${item_check.limit}` : '–±–µ–∑–ª–∏–º–∏—Ç'} -> ${item_limit.limit_tr ? `–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ ${item_limit.limit}` : '–±–µ–∑–ª–∏–º–∏—Ç'}`, 'admin_solo')
    return res;
}

async function AllianceShopItem_View_Stats(context: any, data: any) {
    const res = { cursor: data.cursor };
    const purchases = await prisma.inventoryAllianceShop.count({
        where: { id_item: data.id_item }
    });

    const item = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item) return res;

    const statsText = `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞ "${item.name}"\nüõí –ö—É–ø–ª–µ–Ω–æ: ${purchases} —Ä–∞–∑(–∞)\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å: ${item.limit_tr ? item.limit : '‚àû –ë–µ–∑–ª–∏–º–∏—Ç'}`;

    await context.send(statsText);
    return res;
}

async function AllianceShopItem_Hide(context: any, data: any) {
    const res = { cursor: data.cursor };
    const item = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item) return res;

    const confirm = await Confirm_User_Success(context, `—Å–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä "${item.name}"?`);
    await context.send(confirm.text);
    if (!confirm.status) return res;

    const item_hidden = await prisma.allianceShopItem.update({ where: { id: item.id }, data: { hidden: item.hidden ? false : true } });
    if (item_hidden) { await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" -->  ${item_hidden.hidden ? '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' : '–¥–æ—Å—Ç—É–ø–µ–Ω'} –∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä: ${item_hidden.id}-${item_hidden.name}`, 'admin_solo') }

    return res;
}

async function AllianceShopItem_Edit_Description(context: any, data: any) {
    const res = { cursor: data.cursor };
    const item = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item) return res;

    const newDescription = await context.question(
        `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "${item.name}"\n(—Ç–µ–∫—Å—Ç –∏–ª–∏ "–Ω–µ—Ç"):\n\n${item.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`,
        timer_text
    );

    if (newDescription.isTimeout) return res;

    const updatedDesc = await prisma.allianceShopItem.update({
        where: { id: item.id },
        data: { description: newDescription.text.toLowerCase() === '–Ω–µ—Ç' ? '' : newDescription.text }
    });

    await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" --> –æ–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ [${updatedDesc.id}-${updatedDesc.name}]: ${item.description || '–±—ã–ª–æ –ø—É—Å—Ç—ã–º'} ‚Üí ${updatedDesc.description || '—Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º'}`, 'admin_solo');
    
    return res;
}

async function AllianceShopItem_Edit_Price(context: any, data: any) {
    const res = { cursor: data.cursor };
    const item = await prisma.allianceShopItem.findFirst({ where: { id: data.id_item } });
    if (!item) return res;
    const coin_get = await prisma.allianceCoin.findFirst({ where: { id: item.id_coin } })
    const newPrice = await context.question(
        `üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è "${item.name}". –°–µ–π—á–∞—Å: ${item.price}${coin_get?.smile}`,
        timer_text
    );

    if (newPrice.isTimeout) return res;

    const priceValue = parseInt(newPrice.text);
    if (isNaN(priceValue)) {
        await context.send(`‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!`);
        return res;
    }

    const updated = await prisma.allianceShopItem.update({
        where: { id: item.id },
        data: { price: priceValue }
    });

    await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" --> –∏–∑–º–µ–Ω–µ–Ω–∞ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: ${item.price} ‚Üí ${updated.price} (${item.name})`, 'admin_solo');
    
    return res;
}

async function AllianceShopItem_Edit_Coin(context: any, data: any) {
    const res = { cursor: data.cursor };
    const item_check = await prisma.allianceShopItem.findFirst({
        where: { id: data.id_item },
        include: {
            shop: {
                include: {
                    Alliance_Shop: {
                        include: {
                            Alliance: true
                        }
                    }
                }
            }
        }
    });

    if (!item_check || !item_check.shop || !item_check.shop.Alliance_Shop || !item_check.shop.Alliance_Shop.Alliance) {
        await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –∞–ª—å—è–Ω—Å–µ`);
        return res;
    }

    const id_alliance = item_check.shop.Alliance_Shop.Alliance.id;

    // –í—ã–∑—ã–≤–∞–µ–º —Ç–≤–æ—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
    const selectedCoinId = await Select_Alliance_Coin(context, id_alliance);
    if (!selectedCoinId) {
        await context.send(`${ico_list['warn'].ico} –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω.`);
        return res;
    }
    const coin_get_old = await prisma.allianceCoin.findFirst({ where: { id: item_check.id_coin } })
    const coin_get = await prisma.allianceCoin.findFirst({ where: { id: selectedCoinId } })
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    const updatedItem = await prisma.allianceShopItem.update({
        where: { id: item_check.id },
        data: {
            id_coin: selectedCoinId
        }
    });
    await Send_Message_Smart(context, `"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞" --> –∏–∑–º–µ–Ω–µ–Ω–∞ –≤–∞–ª—é—Ç–∞ —Ç–æ–≤–∞—Ä–∞ [${item_check.id}-${item_check.name}]: ${item_check.id_coin}-${coin_get_old?.name} ‚Üí ${updatedItem.id_coin}-${coin_get?.name}`, 'admin_solo');

    //await context.send(`${ico_list['success'].ico} –í–∞–ª—é—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ID: ${selectedCoinId}`);

    return res;
}