import { Account } from "@prisma/client"
import { Context } from "vk-io"
import prisma from "../prisma_client"
import { Confirm_User_Success, Input_Number, Select_Alliance_Coin, Send_Message, Send_Message_Smart } from "../../../core/helper"
import { ico_list } from "../data_center/icons_lib"

export async function Operation_SBP(context: Context) {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const account: Account | null = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    if (!account) { return }
	const user_check = await prisma.user.findFirst({ where: { id: account.select_user } })
	if (!user_check) { return }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const person_goten = await Input_Number(context, `–í–≤–µ–¥–∏—Ç–µ UID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${user_check.name}:\n`, true)
    if (!person_goten) { await context.send(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`); return }
    if (person_goten == user_check.id) { await context.send(`–°–∞–º–æ–º—É —Å–µ–±–µ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å:)`); return}
    const person_goten_check = await prisma.user.findFirst({ where: { id: person_goten } })
    if (!person_goten_check) { await context.send(`–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è!`); return }
    // –≤—ã–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É
    const selectedCoinId = await Select_Alliance_Coin(context, user_check.id_alliance ?? 0);
    if (!selectedCoinId) {
        await context.send(`${ico_list['warn'].ico} –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω.`);
        return;
    }
    const coin = await prisma.allianceCoin.findFirst({ where: { id: selectedCoinId } })
    if (!coin) { return await context.send(`–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)}
    if (coin.point) { return await context.send(`–†–µ–π—Ç–∏–Ω–≥–æ–≤—É—é –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–µ–ª—å–∑—è`) }
    if (coin.sbp_on == false) { return await context.send(`–î–ª—è –≤–∞–ª—é—Ç—ã –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –°–ë–ü –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤–∞—à–µ–π —Ä–æ–ª–µ–≤–æ–π`) }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const coin_me = await prisma.balanceCoin.findFirst({ where: { id_coin: coin.id, id_user: user_check.id } })
    if (!coin_me) { return await context.send(`–£ –≤–∞—Å –Ω–µ –æ—Ç–∫—Ä—ã—Ç —Å—á–µ—Ç –ø–æ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ`) }
    const coin_other = await prisma.balanceCoin.findFirst({ where: { id_coin: coin.id, id_user: person_goten_check.id } })
    if (!coin_other) { return await context.send(`–£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç —Å—á–µ—Ç –ø–æ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ`) }
    const count_coin = await Input_Number(context, `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${coin.name} –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ [${coin_me.amount}${coin.smile}]:\n`, true)
    if (!count_coin) { await context.send(`–î–µ–Ω—å–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω`); return }
    if (coin_me.amount < count_coin || coin_me.amount < 0) {
        return await context.send(`–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!`)
    }
    const confirm_gift: { status: boolean, text: string } = await Confirm_User_Success(context, `–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ "${coin.name}" –≤ —Ä–∞–∑–º–µ—Ä–µ [${count_coin}${coin.smile}] –∏–≥—Ä–æ–∫—É ${person_goten_check.name} —Å–æ —Å—á–µ—Ç–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${user_check.name}?`);
    //await context.send(confirm.text);
    if (!confirm_gift.status) return;
    const coin_other_change = await prisma.balanceCoin.update({ where: { id: coin_other.id }, data: { amount: { increment: count_coin } } })
    if (!coin_other_change) { return await context.send(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞`) }
    const coin_me_change = await prisma.balanceCoin.update({ where: { id: coin_me.id }, data: { amount: { decrement: count_coin } } })
    if (!coin_me_change) { return await context.send(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞`) }
    const notif = `"üí∑–°–ë–ü" --> —Å–æ–≤–µ—Ä—à–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ –≤–∞–ª—é—Ç–µ "${coin.name}":\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å @id${user_check.idvk}(${user_check.name}) --> ${coin_me.amount} - ${count_coin} = ${coin_me_change.amount}${coin.smile}\nüë• –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @id${person_goten_check.idvk}(${person_goten_check.name}) --> ${coin_other.amount} + ${count_coin} = ${coin_other_change.amount}${coin.smile}\n`
    await Send_Message_Smart(context, notif, 'client_callback', person_goten_check)
    await Send_Message(user_check.idvk, notif)
}