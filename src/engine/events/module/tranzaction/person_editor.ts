import { Alliance, AllianceFacult, User } from "@prisma/client"
import prisma from "../prisma_client"
import { Keyboard, KeyboardBuilder } from "vk-io"
import { Accessed, Fixed_Number_To_Five, Logger, Send_Message } from "../../../core/helper"
import { answerTimeLimit, chat_id, timer_text } from "../../../.."
import { Ipnut_Gold } from "./operation_global"

//–ú–æ–¥—É–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
export async function Editor(id: number, context: any, user_adm: User) {
    const user: User | null = await prisma.user.findFirst({ where: { id: id } })
    if (!user) { return }
    let answer_check = false
    while (answer_check == false) {
        const keyboard = new KeyboardBuilder()
        keyboard.textButton({ label: '‚úè–ü–æ–ª–æ–∂–µ–Ω–∏–µ', payload: { command: 'edit_class' }, color: 'secondary' }).row()
        .textButton({ label: '‚úè–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', payload: { command: 'edit_spec' }, color: 'secondary' }).row()
        .textButton({ label: '‚úè–§–ò–û', payload: { command: 'edit_name' }, color: 'secondary' }).row()
        .textButton({ label: '‚úè–§–∞–∫—É–ª—å—Ç–µ—Ç', payload: { command: 'edit_facult' }, color: 'secondary' }).row()
        if (await Accessed(context) == 3 || user.id_alliance == 0 || user.id_alliance == -1 ) { keyboard.textButton({ label: '‚úè–ê–ª—å—è–Ω—Å', payload: { command: 'edit_alliance' }, color: 'secondary' }).row() }
        keyboard.textButton({ label: 'üîô', payload: { command: 'back' }, color: 'secondary' }).oneTime().inline()
        const answer1: any = await context.question(`‚åõ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏–µ –∑–ª–æ–¥–µ–π—Å—Ç–≤–æ: `, { keyboard: keyboard, answerTimeLimit })
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            if (answer1.payload && answer1.payload.command != 'back') {
                answer_check = true
                const config: any = {
                    'edit_class': Edit_Class,
                    'edit_spec': Edit_Spec,
                    'edit_name': Edit_Name,
                    'edit_alliance': Edit_Alliance,
                    'edit_facult': Edit_Facult
                }
                await config[answer1.payload.command](id, context, user_adm)
            } else {
                answer_check = true
                await context.send(`‚öô –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`)
            }
        }
    }
}

async function Edit_Name(id: number, context: any, user_adm: User){
    const user: User | null = await prisma.user.findFirst({ where: { id: id } })
    if (!user) { return }
    let name_check = false
    const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
    const alli_sel = `${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}`
    while (name_check == false) {
        const name: any = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤ ${alli_sel}. –î–ª—è ${user.name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤:`, timer_text)
        if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è ${user.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (name.text.length <= 64) {
            name_check = true
            const update_name = await prisma.user.update({ where: { id: user.id }, data: { name: name.text } })
            if (update_name) {
                await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ –∏–º–µ–Ω–∏ —Å ${user.name} –Ω–∞ ${update_name.name}.`)
                const notif_ans = await Send_Message(user.idvk, `‚öô –í–∞—à–µ –∏–º—è –≤ ${alli_sel} –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.name} –Ω–∞ ${update_name.name}.`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "‚úèüë§–§–ò–û" > –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.name} –Ω–∞ ${update_name.name} –¥–ª—è @id${user.idvk}(${user.name})`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat) { await Send_Message(chat_id, ans_log) } 
                await Logger(`In a private chat, changed name user from ${user.name} on ${update_name.name} for ${update_name.idvk} by admin ${context.senderId}`)
            }
            if (name.text.length > 32) {
                await context.send(`‚ö† –ù–æ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞–ª—ã –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–ª–∞–Ω–∫ (32 —Å–∏–º–≤–æ–ª–∞)! –ü—Ä–∏–¥–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã, —Å –¥–æ–ø–ª–∞—Ç–æ–π 1G –∑–∞ –∫–∞–∂–¥—ã–π –Ω–µ –ø–æ–º–µ—Å—Ç–∏–≤—à–∏–π—Å—è —Å–∏–º–≤–æ–ª.`)
            }
        } else {
            await context.send(`‚õî –ù–æ–≤–æ–µ –§–ò–û –Ω–µ –≤–ª–µ–∑–∞—é—Ç –Ω–∞ –±–ª–∞–Ω–∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã (64 —Å–∏–º–≤–æ–ª–∞), –∏ –≤–æ–æ–±—â–µ, –∑–∞–ø—Ä–µ—â–µ–Ω—ã –º–∞–≥–∏—á–µ—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º! –ó–∞—Å—Ç–∞–≤–∏–º –µ–≥–æ/–µ–µ –≤—ã–ø–ª–∞—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ –≤ 30G –∏–ª–∏ —Å –ø–æ–º–æ—â–∏—é –û–ú–û–ù–ê –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –ê–∑–∫–∞–±–∞–Ω.`)
        }
    }
}
async function Edit_Class(id: number, context: any, user_adm: User){
    const user: any = await prisma.user.findFirst({ where: { id: id } })
    let answer_check = false
    const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
    const alli_sel = `${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}`
    while (answer_check == false) {
        const answer1: any = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ ${alli_sel} –¥–ª—è ${user.name}, –∏–º–µ—é—â–µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${user.class}. `,
            {
                keyboard: Keyboard.builder()
                .textButton({ label: '–£—á–µ–Ω–∏–∫', payload: { command: 'student' }, color: 'secondary' })
                .textButton({ label: '–ñ–∏—Ç–µ–ª—å', payload: { command: 'citizen' }, color: 'secondary' }).row()
                .textButton({ label: '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä', payload: { command: 'professor' }, color: 'secondary' })
                .textButton({ label: '–î–µ–∫–∞–Ω', payload: { command: 'professor' }, color: 'secondary' }).row()
                .textButton({ label: '–ë–∏–∑–Ω–µ—Å–≤—É–º–µ–Ω(–º—ç–Ω)', payload: { command: 'professor' }, color: 'secondary' })
                .textButton({ label: '–î—Ä—É–≥–æ–µ', payload: { command: 'citizen' }, color: 'secondary' })
                .oneTime().inline(),
                answerTimeLimit
            }
        )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è ${user.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            const update_class = await prisma.user.update({ where: { id: user.id }, data: { class: answer1.text } })
            if (update_class) {
                await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å ${user.class} –Ω–∞ ${update_class.class}.`)
                const notif_ans = await Send_Message(user.idvk, `‚öô –í–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ ${alli_sel} –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.class} –Ω–∞ ${update_class.class}.`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "‚úèüë§–ü–æ–ª–æ–∂–µ–Ω–∏–µ" > –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å ${user.class} –Ω–∞ ${update_class.class} –¥–ª—è @id${user.idvk}(${user.name})`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat) { await Send_Message(chat_id, ans_log) } 
                await Logger(`In a private chat, changed status user from ${user.class} on ${update_class.class} for ${update_class.idvk} by admin ${context.senderId}`)
            }
            answer_check = true
        }
    }
}
async function Edit_Spec(id: number, context: any, user_adm: User){
    const user: any = await prisma.user.findFirst({ where: { id: id } })
    let spec_check = false
    const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
    const alli_sel = `${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}`
    while (spec_check == false) {
        const spec: any = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ ${alli_sel}. –î–ª—è ${user.name}. –ï—Å–ª–∏ –æ–Ω/–æ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä/–∂–∏—Ç–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç(–∫–∞), —É–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –Ω–æ –Ω–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç. \n–¢–µ–∫—É—â–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${user.spec}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:`, timer_text)
        if (spec.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${user.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (spec.text.length <= 32) {
            spec_check = true
            const update_spec = await prisma.user.update({ where: { id: user.id }, data: { spec: spec.text } })
            if (update_spec) {
                await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å ${user.spec} –Ω–∞ ${update_spec.spec}.`)
                const notif_ans = await Send_Message(user.idvk, `‚öô –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ ${alli_sel} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.spec} –Ω–∞ ${update_spec.spec}.`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
                const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "‚úèüë§–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" > —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.spec} –Ω–∞ ${update_spec.spec} –¥–ª—è @id${user.idvk}(${user.name})`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat) { await Send_Message(chat_id, ans_log) }
                await Logger(`In a private chat, changed specialization user from ${user.spec} on ${update_spec.spec} for ${update_spec.idvk} by admin ${context.senderId}`)
            }
        } else {
            await context.send(`üí° –í–≤–µ–¥–∏—Ç–µ –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`)
        }
    }
}
async function Edit_Alliance(id: number, context: any, user_adm: User){
    const user: User | null = await prisma.user.findFirst({ where: { id: id } })
    if (!user) { return await context.send(`‚ö† –†–æ–ª–µ–≤–∏–∫ –ø–æ–¥ UID${id} –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!`)}
    const person: { id_alliance: null | number, alliance: null | string,  } = { id_alliance: null, alliance: null }
    let answer_check = false
    while (answer_check == false) {
        const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–µ –ú–∞–≥–∏–∏ –¥–ª—è ${user.name}-${user.id}:`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '–°–æ—é–∑–Ω–∏–∫ –ö–Ω–æ–ø–∫–∏', payload: { command: 'student' }, color: 'secondary' }).row()
                .textButton({ label: '–°–æ—é–∑–Ω–∏–∫ –ù–æ–º–µ—Ä', payload: { command: 'student' }, color: 'secondary' }).row()
                .textButton({ label: '–ù–µ —Å–æ—é–∑–Ω–∏–∫', payload: { command: 'professor' }, color: 'secondary' })
                .textButton({ label: '–°–æ–ª–æ', payload: { command: 'citizen' }, color: 'secondary' })
                .oneTime().inline(), answerTimeLimit
            }
        )
        if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer_selector.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            person.alliance = answer_selector.text
            if (answer_selector.text == '–ù–µ —Å–æ—é–∑–Ω–∏–∫') { person.id_alliance = -1 }
            if (answer_selector.text == '–°–æ–ª–æ') { person.id_alliance = 0 }
			answer_check = true
        }
    }
    let alliance_check = false
    if (person.alliance == '–°–æ—é–∑–Ω–∏–∫ –ö–Ω–æ–ø–∫–∏') {
        let id_builder_sent = 0
        while (!alliance_check) {
            const keyboard = new KeyboardBuilder()
            id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
            let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—é–∑–Ω—ã–π —Ä–æ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ${user.name}-${user.id}:\n\n`
            const builder_list: Alliance[] = await prisma.alliance.findMany({})

            if (builder_list.length > 0) {
                const limiter = 5
                let counter = 0
                for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                    const builder = builder_list[i]
                    keyboard.textButton({ label: `üåê ‚Ññ${i}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                    event_logger += `\n\nüîí –†–æ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç ‚Ññ${i} <--\nüìú AUID: ${builder.id}\nüåê –ù–∞–∑–≤–∞–Ω–∏–µ: ${builder.name}\nüß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${builder.idvk}`
                    counter++
                }
                event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
                //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                    keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
                }
                //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                    keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
                }
            } else {
                event_logger = `üí¨ –†–æ–ª–µ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!`
            }
            const answer1: any = await context.question(`${event_logger}`,
                {	
                    keyboard: keyboard.inline(), answerTimeLimit
                }
            )
            if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (!answer1.payload) {
                await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
            } else {
                if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                    id_builder_sent = answer1.payload.id_builder_sent
                } else {
                    person.alliance = answer1.payload.target.name
                    person.id_alliance = answer1.payload.target.id
                    alliance_check = true
                }
            }
        }
    }
    if (person.alliance == '–°–æ—é–∑–Ω–∏–∫ –ù–æ–º–µ—Ä') {
        const input_alliance = await Ipnut_Gold(context, '–≤–≤–æ–¥–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ä–∞ —Ä–æ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ AUIDüìú')
        const alliance = await prisma.alliance.findFirst({ where: { id: Number(input_alliance) } })
        if (!alliance) { return context.send(`–ê–ª—å—è–Ω—Å –ø–æ–¥ AUID ${input_alliance} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –Ω—É–ª—è.`) }
        person.alliance = alliance.name
        person.id_alliance = alliance.id
    }
    const alli_get_was: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
    const update_alliance = await prisma.user.update({ where: { id: user.id }, data: { id_alliance: person.id_alliance, id_facult: 0 } })
    const alli_get_be: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(update_alliance.id_alliance) } })
    if (update_alliance) {
        await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ —Ä–æ–ª–µ–≤–æ–π —Å ${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_was?.name} –Ω–∞ ${update_alliance.id_alliance == 0 ? `–°–æ–ª–æ` : update_alliance.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_be?.name}.`)
        const notif_ans = await Send_Message(user.idvk, `‚öô –í–∞—à–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ä–æ–ª–µ–≤–æ–π —Å–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_was?.name} –Ω–∞ ${update_alliance.id_alliance == 0 ? `–°–æ–ª–æ` : update_alliance.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_be?.name}.`)
        !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã –∞–ª—å—è–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
        const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "‚úèüë§–ê–ª—å—è–Ω—Å" > –†–æ–ª–µ–≤–∞—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_was?.name} –Ω–∞ ${update_alliance.id_alliance == 0 ? `–°–æ–ª–æ` : update_alliance.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_be?.name} –¥–ª—è @id${user.idvk}(${user.name})`
        let tr = 0
        if (alli_get_was) {
            alli_get_was.id_chat ? await Send_Message(alli_get_was.id_chat, ans_log) : tr++
        }
        if (alli_get_be) {
            alli_get_be.id_chat ? await Send_Message(alli_get_be.id_chat, ans_log) : tr++
        }
        if (tr == 2) { await Send_Message(chat_id, ans_log) }
        await Logger(`In a private chat, changed alliance user from ${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_was?.name} on ${update_alliance.id_alliance == 0 ? `–°–æ–ª–æ` : update_alliance.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get_be?.name} for ${update_alliance.idvk} by admin ${context.senderId}`)
    }
}
async function Edit_Facult(id: number, context: any, user_adm: User){
    const user: User | null = await prisma.user.findFirst({ where: { id: id } })
    if (!user) { return }
    const person: { id_facult: null | number, facult: null | string, rank_action: string | null } = { id_facult: null, facult: null, rank_action: null }
    const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(user.id_alliance) } })
    const alli_sel = `${user.id_alliance == 0 ? `–°–æ–ª–æ` : user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}`
    const facult_get: AllianceFacult | null = await prisma.allianceFacult.findFirst({ where: { id: Number(user.id_facult) } })
    const facult_sel = `${facult_get ? facult_get.name : `–ë–µ–∑ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞`}`
    let facult_check = false
    if (await prisma.allianceFacult.findFirst({ where: { id_alliance: Number(user.id_alliance) } })) {
        let id_builder_sent = 0
        while (!facult_check) {
            const keyboard = new KeyboardBuilder()
            id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
            let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è ${user.name} –≤ ${alli_sel}, —Å–µ–π—á–∞—Å –µ–≥–æ(–µ–µ) —Ñ–∞–∫—É–ª—å—Ç–µ—Ç ${facult_sel}:\n\n`
            const builder_list: AllianceFacult[] = await prisma.allianceFacult.findMany({ where: { id_alliance: Number(user.id_alliance) } })
            if (builder_list.length > 0) {
                const limiter = 5
                let counter = 0
                for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                    const builder = builder_list[i]
                    keyboard.textButton({ label: `${builder.smile} ‚Ññ${i}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                    //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                    event_logger += `\n\nüîÆ –†–æ–ª–µ–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç ‚Ññ${i} <--\nüìú FUID: ${builder.id}\n${builder.smile} –ù–∞–∑–≤–∞–Ω–∏–µ: ${builder.name}`
                    /*
                    const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                    counter++
                }
                event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
                //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                    keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
                }
                //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                    keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
                }
                keyboard.textButton({ label: '–ù–∞—Ñ–∏–≥ —É—á–µ–±—É', payload: { command: 'builder_control_multi', target: { id: 0, name: '–ë–µ–∑ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞', smile: 'üî•', id_alliance: user.id_alliance } }, color: 'secondary' })
            } else {
                event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∑–¥–∞–Ω–∏—è, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å??`
            }
            const answer1: any = await context.question(`${event_logger}`,
                {	
                    keyboard: keyboard.inline(), answerTimeLimit
                }
            )
            if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (!answer1.payload) {
                await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
            } else {
                if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                    id_builder_sent = answer1.payload.id_builder_sent
                } else {
                    person.facult = answer1.payload.target.name
                    person.id_facult = answer1.payload.target.id
                    facult_check = true
                }
            }
        }
    } else {
        return await context.send(`‚õî –í —Ä–æ–ª–µ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã`)
    }
    // –º–æ–¥—É–ª—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è —Å –±–∞–ª–ª–∞–º–∏
    let answer_check = false
    while (answer_check == false) {
        const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –±–∞–ª–ª–∞–º–∏ —É—á–µ–Ω–∏–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π —É—á–µ–±–Ω—ã–π –≥–æ–¥:`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å', payload: { command: 'student' }, color: 'secondary' }).row()
                .textButton({ label: '–û–±–Ω—É–ª–∏—Ç—å', payload: { command: 'professor' }, color: 'secondary' }).row()
                .textButton({ label: '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', payload: { command: 'citizen' }, color: 'secondary' }).row()
                .oneTime().inline(), answerTimeLimit
            }
        )
        if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer_selector.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            person.rank_action = answer_selector.text
            answer_check = true
        }
    }
    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    const update_facult = await prisma.user.update({ where: { id: user.id }, data: { id_facult: person.id_facult } })
    if (update_facult) {
        await context.send(`‚öô –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí≥UID –∫–æ—Ç–æ—Ä–æ–≥–æ ${user.id}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Å–º–µ–Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Å ${facult_sel} –Ω–∞ ${person.facult}.`)
        const notif_ans = await Send_Message(user.idvk, `‚öô –í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —Ä–æ–ª–µ–≤–æ–π —Å–º–µ–Ω–∏–ª–∞—Å—å —Å ${facult_sel} –Ω–∞ ${person.facult}.`)
        !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`)
        const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "‚úèüë§–§–∞–∫—É–ª—å—Ç–µ—Ç" > –§–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${facult_sel} –Ω–∞ ${person.facult} –¥–ª—è @id${user.idvk}(${user.name})`
        const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
        if (!notif_ans_chat) { await Send_Message(chat_id, ans_log) }
        await Logger(`In a private chat, changed facult user from ${facult_sel} on ${person.facult} for ${update_facult.idvk} by admin ${context.senderId}`)
    }
    // –î–≤–∏–∂–æ–∫ –º–æ–¥—É–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π —Å –±–∞–ª–ª–∞–º–∏
    const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: user.id_facult! } })
    const alli_fac_tar = await prisma.allianceFacult.findFirst({ where: { id: update_facult.id_facult! } })
    switch (person.rank_action) {
        case '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å':
            break;
        case '–û–±–Ω—É–ª–∏—Ç—å':
            for (const coin of await prisma.allianceCoin.findMany({ where: { id_alliance: update_facult.id_alliance! } })) {
                if (coin.point == false) { continue }
                const bal_fac = await prisma.balanceFacult.findFirst({ where: { id_coin: coin.id, id_facult: user.id_facult! }})
                const bal_usr = await prisma.balanceCoin.findFirst({ where: { id_coin: coin.id, id_user: update_facult.id }})
                if ( !bal_fac || !bal_usr) { continue }
                const bal_fac_ch = await prisma.balanceFacult.update({ where: { id: bal_fac.id }, data: { amount: { decrement: bal_usr.amount } } })
                const bal_usr_ch = await prisma.balanceCoin.update({ where: { id: bal_usr.id }, data: { amount: 0 } })
                const ans_log = `üåê "${person.rank_action}${coin.smile}" > ${bal_fac.amount} - ${bal_usr.amount} = ${bal_fac_ch.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac!.smile} ${alli_fac!.name}], –±–∞–ª–∞–Ω—Å: ${bal_usr_ch.amount}${coin.smile} –¥–ª—è @id${user.idvk}(${user.name})`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat) { await Send_Message(chat_id, ans_log) }
            }
            break;
        case '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏':
            for (const coin of await prisma.allianceCoin.findMany({ where: { id_alliance: update_facult.id_alliance! } })) {
                if (coin.point == false) { continue }
                const bal_fac = await prisma.balanceFacult.findFirst({ where: { id_coin: coin.id, id_facult: user.id_facult! }})
                const bal_usr = await prisma.balanceCoin.findFirst({ where: { id_coin: coin.id, id_user: update_facult.id }})
                const bal_fac_tar = await prisma.balanceFacult.findFirst({ where: { id_coin: coin.id, id_facult: update_facult.id_facult! }})
                if ( !bal_fac || !bal_fac_tar) { continue }
                const bal_fac_ch = await prisma.balanceFacult.update({ where: { id: bal_fac.id }, data: { amount: { decrement: bal_usr!.amount } } })
                const bal_fac_tar_ch = await prisma.balanceFacult.update({ where: { id: bal_fac_tar.id }, data: { amount: { increment: bal_usr!.amount } } })
                const ans_log = `üåê "${person.rank_action}${coin.smile}" >\n ${bal_fac.amount} - ${bal_usr!.amount} = ${bal_fac_ch.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac!.smile} ${alli_fac!.name}],\n ${bal_fac_tar.amount} + ${bal_usr!.amount} = ${bal_fac_tar_ch.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac_tar!.smile} ${alli_fac_tar!.name}] \n–∏–∑-–∑–∞ –∫—Ä—ã—Å—ã —Ç–∞–∫–æ–π @id${user.idvk}(${user.name})`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat) { await Send_Message(chat_id, ans_log) }
            }
            break;
        default:
            break;
    }
}