import { Keyboard, KeyboardBuilder } from "vk-io"
import { Accessed, Fixed_Number_To_Five, Keyboard_Index, Logger, Send_Message, Send_Coin_Operation_Notification } from "../../../core/helper"
import { answerTimeLimit, chat_id, timer_text } from "../../../.."
import prisma from "../prisma_client"
import { Person_Coin_Printer_Self } from "../person/person_coin"
import { Back, Ipnut_Gold, Ipnut_Message } from "./operation_global"
import { AllianceCoin, BalanceCoin, BalanceFacult, User } from "@prisma/client"
import { Facult_Coin_Printer_Self } from "../alliance/facult_rank"
import { ico_list } from "../data_center/icons_lib"

// –í —Ñ—É–Ω–∫—Ü–∏–∏ Operation_Group –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
export async function Operation_Group(context: any) {
    if (context.peerType == 'chat') { return }
    if (await Accessed(context) == 1) { return }
    let name_check = false
    let uids_prefab = null
    while (name_check == false) {
        const uid: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ñ–æ—Ä–º–∞—Ç–∞:\n"UID1 UID2 .. UIDN"`,
            {   
                keyboard: Keyboard.builder()
                .textButton({ label: 'üö´–û—Ç–º–µ–Ω–∞', payload: { command: 'limited' }, color: 'secondary' })
                .oneTime().inline(),
                timer_text
            }
        )
        if (uid.isTimeout) { return await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!')}
        if (/(?:^|\s)(\d+)(?=\s|$)/g.test(uid.text)) {
            uids_prefab = uid.text.match(/(?:^|\s)(\d+)(?=\s|$)/g)
            await context.send(`‚öô –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Å—Å–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º, —Ç–æ–≤–∞—Ä–∏—â –î–û–ö!`)
            name_check = true
        } else {
            if (uid.text == "üö´–û—Ç–º–µ–Ω–∞") { 
                await context.send(`üí° –û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`) 
                return await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)
            }
			await context.send(`üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID!`)
		}
    }
    const account_adm = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    if (!account_adm) { return }
    const person_adm = await prisma.user.findFirst({ where: { id: account_adm.select_user } })
    if (!person_adm) { return }
    let info_coin: { text: string, smile: string } | undefined = { text: ``, smile: `` }
    info_coin = await Person_Coin_Printer_Self(context, person_adm.id)
    let uids: Array<number> = []
    for (const ui of uids_prefab) {
        const user_gt = await prisma.user.findFirst({ where: { id: Number(ui) } })
        if (!user_gt) { await Send_Message(context.senderId, `‚ö† –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å UID ${ui} –Ω–µ –Ω–∞–π–¥–µ–Ω`); continue }
        if (user_gt.id_alliance != person_adm.id_alliance) {
            await Send_Message(context.senderId, `‚ö† –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å UID ${ui} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π —Ä–æ–ª–µ–≤–æ–π`); 
            if (await Accessed(context) != 3) { continue }
        }
        uids.push(Number(ui))
    }
    const keyboard = new KeyboardBuilder()
    if (await Accessed(context) == 3) { 
        keyboard.textButton({ label: '+üîò', payload: { command: 'medal_up_many' }, color: 'secondary' })
        .textButton({ label: '‚Äîüîò', payload: { command: 'medal_down_many' }, color: 'secondary' }).row()
    }
    const ans: any = await context.question( `‚úâ –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${JSON.stringify(uids)}`,
        {   
            keyboard: keyboard
            .textButton({ label: `‚ûï‚ûñ${info_coin?.smile}`, payload: { command: 'coin_engine_many' }, color: 'secondary' }).row()
            .textButton({ label: `‚ôæÔ∏è${info_coin?.smile}`, payload: { command: 'coin_engine_many_infinity' }, color: 'secondary' })
            .textButton({ label: `üéØ${info_coin?.smile}`, payload: { command: 'coin_engine_many_custom' }, color: 'secondary' }).row() // –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
            .textButton({ label: 'üîô', payload: { command: 'back' }, color: 'secondary' }).row()
            .oneTime().inline(),
            answerTimeLimit                                                                       
        }
    )
    if (ans.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${JSON.stringify(uids)} –∏—Å—Ç–µ–∫–ª–æ!`) }
    const config: any = {
        'back': Back,
        'coin_engine_many': Coin_Engine_Many,
        'coin_engine_many_infinity': Coin_Engine_Many_Infinity,
        'coin_engine_many_custom': Coin_Engine_Many_Custom, // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
        'medal_up_many': Medal_Up_Many,
        'medal_down_many': Medal_Down_Many
    }
    if (ans?.payload?.command in config) {
        const commandHandler = config[ans.payload.command];
        const answergot = await commandHandler(uids, context, person_adm)
    } else {
        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
    }
    await context.send(`‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è "–´" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
    await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
async function Coin_Engine_Many_Custom(uids: number[], context: any, person_adm: User) {
    const user: User | null | undefined = await prisma.user.findFirst({ where: { id: uids[0] } })
    const person: { coin: AllianceCoin | null, operation: string | null } = { coin: null, operation: null }
    if (!user) { return }
    const alli_get = await prisma.alliance.findFirst({ where: { id: user.id_alliance ?? 0 } })
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(user?.id_alliance) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    
    // –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
    let coin_check = false
    let id_builder_sent = 0
    while (!coin_check) {
        const keyboard = new KeyboardBuilder()
        id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
        let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n`
        const builder_list: AllianceCoin[] = coin_pass
        if (builder_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                const builder = builder_list[i]
                keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                counter++
            }
            event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
            }
        } else {
            event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
            return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
        }
        const answer1: any = await context.question(`${event_logger}`,
            {	
                keyboard: keyboard.inline(), answerTimeLimit
            }
        )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                id_builder_sent = answer1.payload.id_builder_sent
            } else {
                person.coin = answer1.payload.target
                coin_check = true
            }
        }
    }
    
    // –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
    let answer_check = false
    while (answer_check == false) {
        const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '+', payload: { command: 'student' }, color: 'secondary' })
                .textButton({ label: '-', payload: { command: 'professor' }, color: 'secondary' })
                .oneTime().inline(), answerTimeLimit
            }
        )
        if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer_selector.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            person.operation = answer_selector.text
            answer_check = true
        }
    }
    
    // –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ UID-–°–£–ú–ú–ê
    const messa: string = await Ipnut_Message(context, `[–º–∞—Å—Å–æ–≤–∞—è ${person.operation}${person.coin?.smile} —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏]`)
    const users_target = await context.question(`üìä –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ UID –∏ —Å—É–º–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nUID1-–°–£–ú–ú–ê1\nUID2-–°–£–ú–ú–ê2\nUID3-–°–£–ú–ú–ê3\n...\n\n–ü—Ä–∏–º–µ—Ä:\n5-3402\n6-23.4\n7-53`, 
        { answerTimeLimit }
    )
    
    if (users_target.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ!`) }

    const lines = users_target.text.split('\n').map((line: string) => line.trim());
    const uid_res: Array<{ id: number, amount: number }> = []

    for (const line of lines) {
        if (!line.includes('-')) {
            await context.send(`‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${line}`);
            continue;
        }

        const [uidStr, amountStr] = line.split('-').map((s: string) => s.trim());
        const uid = parseInt(uidStr);
        const amount = parseFloat(amountStr);

        if (isNaN(uid) || isNaN(amount)) {
            await context.send(`‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${line}`);
            continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UID –µ—Å—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
        if (!uids.includes(uid)) {
            await context.send(`‚ö† UID ${uid} –Ω–µ –±—ã–ª –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);
            continue;
        }

        const user = await prisma.user.findFirst({ where: { id: uid } });
        if (!user) {
            await context.send(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UID ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            continue;
        }

        uid_res.push({ id: uid, amount: amount });
    }

    if (uid_res.length === 0) {
        return await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    let passer = true
    switch (person.operation) {
        case '+':
            for (const ui of uid_res) {
                const pers = await prisma.user.findFirst({ where: { id: ui.id } })
                if (!pers) { await context.send(`UID ${ui.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`); continue }
                const pers_bal_coin: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: pers.id }})
                if (!pers_bal_coin) { await context.send(`UID ${ui.id} –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤–∞–ª—é—Ç–Ω—ã–π —Å—á–µ—Ç`); continue }
                const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: pers.id_facult ?? 0 } })
                const money_put_plus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: pers_bal_coin?.id }, data: { amount: { increment: ui.amount } } })
                let facult_income = ''
                if (person.coin?.point == true && alli_fac) {
                    const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: pers.id_facult! } }) 
                    const rank_put_plus: BalanceFacult | null = rank_put_plus_check ? await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { increment: ui.amount } } }) : null
                    facult_income = rank_put_plus ? `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check?.amount} ${person.operation} ${ui.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]` : ''
                }
                
                const notif_ans = await Send_Coin_Operation_Notification(
                    pers,
                    person.operation!,
                    ui.amount,
                    person.coin?.smile ?? '',
                    pers_bal_coin.amount,
                    money_put_plus.amount,
                    messa,
                    facult_income
                )
                
                const ans_log = `üéØ @id${context.senderId}(${person_adm.name}) > "${person.operation}${person.coin?.smile}" > ${pers_bal_coin.amount} ${person.operation} ${ui.amount} = ${money_put_plus.amount} –¥–ª—è @id${pers.idvk}(${pers.name}) üß∑: ${messa}\n${facult_income}`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) }
                await Logger(`User ${pers.idvk} ${person.operation} ${ui.amount} gold. Him/Her bank now unknown`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UID ${ui.id} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è UID ${ui.id}: +${ui.amount}${person.coin?.smile}`)
            }
            break;
        case '-':
            for (const ui of uid_res) {
                const pers = await prisma.user.findFirst({ where: { id: ui.id } })
                if (!pers) { await context.send(`UID ${ui.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`); continue }
                const pers_bal_coin: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: pers.id }})
                if (!pers_bal_coin) { await context.send(`UID ${ui.id} –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤–∞–ª—é—Ç–Ω—ã–π —Å—á–µ—Ç`); continue }
                const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: pers.id_facult ?? 0 } })
                const money_put_minus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: pers_bal_coin.id }, data: { amount: { decrement: ui.amount } } })
                let facult_income = ''
                if (person.coin?.point == true && alli_fac) {
                    const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: pers.id_facult! } }) 
                    if (rank_put_plus_check) {
                        const rank_put_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { decrement: ui.amount } } })
                        if (rank_put_plus) {
                            facult_income += `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check.amount} ${person.operation} ${ui.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]`
                        }
                    }
                }
                
                const notif_ans = await Send_Coin_Operation_Notification(
                    pers,
                    person.operation!,
                    ui.amount,
                    person.coin?.smile ?? '',
                    pers_bal_coin.amount,
                    money_put_minus.amount,
                    messa,
                    facult_income
                )
                
                const ans_log = `üéØ @id${context.senderId}(${person_adm.name}) > "${person.operation}${person.coin?.smile}" > ${pers_bal_coin.amount} ${person.operation} ${ui.amount} = ${money_put_minus.amount} –¥–ª—è @id${pers.idvk}(${pers.name}) üß∑: ${messa}\n${facult_income}`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) }
                await Logger(`User ${pers.idvk} ${person.operation} ${ui.amount} gold. Him/Her bank now unknown`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UID ${ui.id} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –¥–ª—è UID ${ui.id}: -${ui.amount}${person.coin?.smile}`)
            }
            break;
        default:
            passer = false
            break;
    }
    if (!passer) { return context.send(`‚ö† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!`) }
}

//–ú–æ–¥—É–ª—å –º—É–ª—å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤ —Ü–∏–∫–ª–µ
async function Coin_Engine_Many_Infinity(uids: number[], context: any, person_adm: User) {
    const user: User | null | undefined = await prisma.user.findFirst({ where: { id: uids[0] } })
    const person: { coin: AllianceCoin | null, operation: string | null, amount: number } = { coin: null, operation: null, amount: 0 }
    if (!user) { return }
    const alli_get = await prisma.alliance.findFirst({ where: { id: user.id_alliance ?? 0 } })
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(user?.id_alliance) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    let infinity_pay = false
    while (!infinity_pay) {
        let coin_check = false
        let id_builder_sent = 0
        while (!coin_check) {
            const keyboard = new KeyboardBuilder()
            id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
            let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:\n\n`
            const builder_list: AllianceCoin[] = coin_pass
            if (builder_list.length > 0) {
                const limiter = 5
                let counter = 0
                for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                    const builder = builder_list[i]
                    keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                    event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                    counter++
                }
                event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
                //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                    keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
                }
                //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                    keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
                }
            } else {
                event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
                return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
            }
            const answer1: any = await context.question(`${event_logger}`,
                {	
                    keyboard: keyboard.inline(), answerTimeLimit
                }
            )
            if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (!answer1.payload) {
                await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
            } else {
                if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                    id_builder_sent = answer1.payload.id_builder_sent
                } else {
                    person.coin = answer1.payload.target
                    coin_check = true
                }
            }
        }
        let answer_check = false
        while (answer_check == false) {
            const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:`,
                {	
                    keyboard: Keyboard.builder()
                    .textButton({ label: '+', payload: { command: 'student' }, color: 'secondary' })
                    .textButton({ label: '-', payload: { command: 'professor' }, color: 'secondary' })
                    .oneTime().inline(), answerTimeLimit
                }
            )
            if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (!answer_selector.payload) {
                await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
            } else {
                person.operation = answer_selector.text
                answer_check = true
            }
        }
        person.amount = await Ipnut_Gold(context, `[–º–∞—Å—Å–æ–≤–∞—è ${person.operation}${person.coin?.smile}]`) 
        const messa: string = await Ipnut_Message(context, `[–º–∞—Å—Å–æ–≤–∞—è ${person.operation}${person.coin?.smile}]`)
        let passer = true
        switch (person.operation) {
            case '+':
                for (const ui of uids) {
                    const pers = await prisma.user.findFirst({ where: { id: ui } })
                    if (!pers) { continue }
                    const pers_info_coin = await Person_Coin_Printer_Self(context, pers.id)
                    const pers_info_facult_rank = await Facult_Coin_Printer_Self(context, pers.id)
                    const pers_bal_coin: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: pers.id }})
                    if (!pers_bal_coin) { continue }
                    const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: pers.id_facult ?? 0 } })
                    const money_put_plus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: pers_bal_coin?.id }, data: { amount: { increment: person.amount } } })
                    let facult_income = ''
                    if (person.coin?.point == true && alli_fac) {
                        const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: pers.id_facult! } }) 
                        const rank_put_plus: BalanceFacult | null = rank_put_plus_check ? await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { increment: person.amount } } }) : null
                        facult_income = rank_put_plus ? `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check?.amount} ${person.operation} ${person.amount} = ${rank_put_plus.amount} –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]` : ''
                    }
                    
                    const notif_ans = await Send_Coin_Operation_Notification(
                        pers,
                        person.operation!,
                        person.amount,
                        person.coin?.smile ?? '',
                        pers_bal_coin.amount,
                        money_put_plus.amount,
                        messa,
                        facult_income
                    )
                    
                    const ans_log = `üóø @id${context.senderId}(${person_adm.name}) > "${person.operation}${person.coin?.smile}" > ${pers_bal_coin.amount} ${person.operation} ${person.amount} = ${money_put_plus.amount} –¥–ª—è @id${pers.idvk}(${pers.name}) üß∑: ${messa}\n${facult_income}`
                    const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                    if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) }
                    await Logger(`User ${pers.idvk} ${person.operation} ${person.amount} gold. Him/Her bank now unknown`)
                    !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UID ${ui} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è UID ${ui}`)
                }
                break;
            case '-':
                for (const ui of uids) {
                    const pers = await prisma.user.findFirst({ where: { id: ui } })
                    if (!pers) { continue }
                    const pers_info_coin = await Person_Coin_Printer_Self(context, pers.id)
                    const pers_info_facult_rank = await Facult_Coin_Printer_Self(context, pers.id)
                    const pers_bal_coin: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: pers.id }})
                    if (!pers_bal_coin) { continue }
                    const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: pers.id_facult ?? 0 } })
                    const money_put_minus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: pers_bal_coin.id }, data: { amount: { decrement: person.amount } } })
                    let facult_income = ''
                    if (person.coin?.point == true && alli_fac) {
                        const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: pers.id_facult! } }) 
                        if (rank_put_plus_check) {
                            const rank_put_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { decrement: person.amount } } })
                            if (rank_put_plus) {
                                facult_income += `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check.amount} ${person.operation} ${person.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]`
                            }
                        }
                    }
                    
                    const notif_ans = await Send_Coin_Operation_Notification(
                        pers,
                        person.operation!,
                        person.amount,
                        person.coin?.smile ?? '',
                        pers_bal_coin.amount,
                        money_put_minus.amount,
                        messa,
                        facult_income
                    )
                    
                    const ans_log = `üóø @id${context.senderId}(${person_adm.name}) > "${person.operation}${person.coin?.smile}" > ${pers_bal_coin.amount} ${person.operation} ${person.amount} = ${money_put_minus.amount} –¥–ª—è @id${pers.idvk}(${pers.name}) üß∑: ${messa}\n${facult_income}`
                    const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                    if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) }
                    await Logger(`User ${pers.idvk} ${person.operation} ${person.amount} gold. Him/Her bank now unknown`)
                    !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UID ${ui} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –¥–ª—è UID ${ui}`)
                }
                break;
            default:
                passer = false
                break;
        }
        if (!passer) { infinity_pay = true; return context.send(`‚ö† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!`) }
        const answer = await context.question(`${ico_list['load'].ico} –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è?`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '–ü–æ–ª–Ω–æ—Å—Ç—å—é', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'positive' }).row()
                .textButton({ label: '–ü–µ—Ä–µ–¥—É–º–∞–ª(–∞)', payload: { command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' }, color: 'negative' }).oneTime(),
                answerTimeLimit
            }
        );
        if (answer.isTimeout) { infinity_pay = true; return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!/–¥–∞|yes|–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è|–∫–æ–Ω–µ—á–Ω–æ|‚úè|–ü–æ–ª–Ω–æ—Å—Ç—å—é|–ø–æ–ª–Ω–æ—Å—Ç—å—é/i.test(answer.text|| '{}')) {
            await context.send(`${ico_list['stop'].ico} –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!`)
            infinity_pay = true; 
        }
    }
}

//–ú–æ–¥—É–ª—å –º—É–ª—å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
async function Coin_Engine_Many(uids: number[], context: any, person_adm: User) {
    const user: User | null | undefined = await prisma.user.findFirst({ where: { id: uids[0] } })
    const person: { coin: AllianceCoin | null, operation: string | null, amount: number } = { coin: null, operation: null, amount: 0 }
    if (!user) { return }
    const alli_get = await prisma.alliance.findFirst({ where: { id: user.id_alliance ?? 0 } })
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(user?.id_alliance) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    let coin_check = false
    let id_builder_sent = 0
    while (!coin_check) {
        const keyboard = new KeyboardBuilder()
        id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
        let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:\n\n`
        const builder_list: AllianceCoin[] = coin_pass
        if (builder_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                const builder = builder_list[i]
                keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                counter++
            }
            event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
            }
        } else {
            event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
            return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
        }
        const answer1: any = await context.question(`${event_logger}`,
            {	
                keyboard: keyboard.inline(), answerTimeLimit
            }
        )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                id_builder_sent = answer1.payload.id_builder_sent
            } else {
                person.coin = answer1.payload.target
                coin_check = true
            }
        }
    }
    let answer_check = false
    while (answer_check == false) {
        const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '+', payload: { command: 'student' }, color: 'secondary' })
                .textButton({ label: '-', payload: { command: 'professor' }, color: 'secondary' })
                .oneTime().inline(), answerTimeLimit
            }
        )
        if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer_selector.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            person.operation = answer_selector.text
            answer_check = true
        }
    }
    person.amount = await Ipnut_Gold(context, `[–º–∞—Å—Å–æ–≤–∞—è ${person.operation}${person.coin?.smile}]`) 
    const messa: string = await Ipnut_Message(context, `[–º–∞—Å—Å–æ–≤–∞—è ${person.operation}${person.coin?.smile}]`)
    let passer = true
    switch (person.operation) {
        case '+':
            for (const ui of uids) {
                const pers = await prisma.user.findFirst({ where: { id: ui } })
                if (!pers) { continue }
                const pers_info_coin = await Person_Coin_Printer_Self(context, pers.id)
                const pers_info_facult_rank = await Facult_Coin_Printer_Self(context, pers.id)
                const pers_bal_coin: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: pers.id }})
                if (!pers_bal_coin) { continue }
                const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: pers.id_facult ?? 0 } })
                const money_put_plus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: pers_bal_coin?.id }, data: { amount: { increment: person.amount } } })
                let facult_income = ''
                if (person.coin?.point == true && alli_fac) {
                    const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: pers.id_facult! } }) 
                    const rank_put_plus: BalanceFacult | null = rank_put_plus_check ? await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { increment: person.amount } } }) : null
                    facult_income = rank_put_plus ? `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check?.amount} ${person.operation} ${person.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]` : ''
                }
                
                const notif_ans = await Send_Coin_Operation_Notification(
                    pers,
                    person.operation!,
                    person.amount,
                    person.coin?.smile ?? '',
                    pers_bal_coin.amount,
                    money_put_plus.amount,
                    messa,
                    facult_income
                )
                
                const ans_log = `üóø @id${context.senderId}(${person_adm.name}) > "${person.operation}${person.coin?.smile}" > ${pers_bal_coin.amount} ${person.operation} ${person.amount} = ${money_put_plus.amount} –¥–ª—è @id${pers.idvk}(${pers.name}) üß∑: ${messa}\n${facult_income}`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) }
                await Logger(`User ${pers.idvk} ${person.operation} ${person.amount} gold. Him/Her bank now unknown`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UID ${ui} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è UID ${ui}`)
            }
            break;
        case '-':
            for (const ui of uids) {
                const pers = await prisma.user.findFirst({ where: { id: ui } })
                if (!pers) { continue }
                const pers_info_coin = await Person_Coin_Printer_Self(context, pers.id)
                const pers_info_facult_rank = await Facult_Coin_Printer_Self(context, pers.id)
                const pers_bal_coin: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: pers.id }})
                if (!pers_bal_coin) { continue }
                const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: pers.id_facult ?? 0 } })
                const money_put_minus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: pers_bal_coin.id }, data: { amount: { decrement: person.amount } } })
                let facult_income = ''
                if (person.coin?.point == true && alli_fac) {
                    const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: pers.id_facult! } }) 
                    if (rank_put_plus_check) {
                        const rank_put_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { decrement: person.amount } } })
                        if (rank_put_plus) {
                            facult_income += `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check.amount} ${person.operation} ${person.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]`
                        }
                    }
                }
                
                const notif_ans = await Send_Coin_Operation_Notification(
                    pers,
                    person.operation!,
                    person.amount,
                    person.coin?.smile ?? '',
                    pers_bal_coin.amount,
                    money_put_minus.amount,
                    messa,
                    facult_income
                )
                
                const ans_log = `üóø @id${context.senderId}(${person_adm.name}) > "${person.operation}${person.coin?.smile}" > ${pers_bal_coin.amount} ${person.operation} ${person.amount} = ${money_put_minus.amount} –¥–ª—è @id${pers.idvk}(${pers.name}) üß∑: ${messa}\n${facult_income}`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) }
                await Logger(`User ${pers.idvk} ${person.operation} ${person.amount} gold. Him/Her bank now unknown`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UID ${ui} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –¥–ª—è UID ${ui}`)
            }
            break;
        default:
            passer = false
            break;
    }
    if (!passer) { return context.send(`‚ö† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!`) }
}

// –º–æ–¥—É–ª—å –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
async function Medal_Up_Many(uids: number[], context: any, person_adm: User) {
    const count: number = await Ipnut_Gold(context, '–º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤') 
    const messa: string = await Ipnut_Message(context, '–º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤')
    for (const ids of uids) {
        const id = Number(ids)
        const user_get: any = await prisma.user.findFirst({ where: { id } })
        if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
        const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal + count } })
        const notif_ans = await Send_Message(user_get.idvk, `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${user_get.name} (UID: ${user_get.id})\nüí¨ "+ ${count}üîò" --> ${user_get.medal} + ${count} = ${money_put.medal}\nüß∑ –°–æ–æ–±—â–µ–Ω–∏–µ: ${messa}`)
        !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å üí≥UID ${id} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        const ans_log = `üóø @id${context.senderId}(${person_adm.name}) > "+üîò" > ${money_put.medal-count}üîò+${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
        await Send_Message(chat_id, ans_log)
        await Logger(`In a private chat, user ${user_get.idvk} got ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
    }
}
async function Medal_Down_Many(uids: number[], context: any, person_adm: User) {
    const count: number = await Ipnut_Gold(context, '–º–∞—Å—Å–æ–≤–æ–≥–æ —Å–Ω—è—Ç–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤') 
    const messa: string = await Ipnut_Message(context, '–º–∞—Å—Å–æ–≤–æ–≥–æ —Å–Ω—è—Ç–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤')
    for (const ids of uids) {
        const id = Number(ids)
        const user_get: any = await prisma.user.findFirst({ where: { id } })
        if (!user_get) { await context.send(`‚õî –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å üí≥UID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`); continue }
        if (user_get.medal-count >= 0) {
            const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal - count } })
            const notif_ans = await Send_Message(user_get.idvk, `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${user_get.name} (UID: ${user_get.id})\nüí¨ "- ${count}üîò" --> ${user_get.medal} - ${count} = ${money_put.medal}\nüß∑ –°–æ–æ–±—â–µ–Ω–∏–µ: ${messa}`)
            !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å üí≥UID ${id} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å üí≥UID ${id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            const ans_log = `üóø @id${context.senderId}(${person_adm.name}) > "-üîò" > ${money_put.medal+count}üîò-${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
            await Send_Message(chat_id, ans_log)
            await Logger(`In a private chat, user ${user_get.idvk} lost ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
        } else {
            const confirmq = await context.question(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count}üîò –∂–µ—Ç–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç —ç—Ç–æ–≥–æ ${user_get.spec} ${user_get.medal}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.medal-count}`,
                {
                    keyboard: Keyboard.builder()
                    .textButton({ label: '–î–∞', payload: { command: 'confirm' }, color: 'secondary' })
                    .textButton({ label: '–ù–µ—Ç', payload: { command: 'medal_down' }, color: 'secondary' })
                    .oneTime().inline(),
                    answerTimeLimit
                }
            )
            if (confirmq.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–Ω—è—Ç–∏–µ –∂–µ—Ç–æ–Ω–æ–≤ —Å ${user_get.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (confirmq.payload.command === 'confirm') {
                const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal - count } })
                const notif_ans = await Send_Message(user_get.idvk, `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${user_get.name} (UID: ${user_get.id})\nüí¨ "- ${count}üîò" --> ${user_get.medal} - ${count} = ${money_put.medal}\nüß∑ –°–æ–æ–±—â–µ–Ω–∏–µ: ${messa}`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å üí≥UID ${id} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
                const ans_log = `üóø @id${context.senderId}(${person_adm.name}) > "-üîò" > ${money_put.medal+count}üîò-${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
                await Send_Message(chat_id, ans_log)
                await Logger(`In a private chat, user ${user_get.idvk} lost ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
            } else {
                await context.send(`üí° –ù—É–∂–Ω–æ –±—ã—Ç—å –∂–µ—Å—Ç—á–µ! –ì—Ä–µ–±–∏ –∂–µ—Ç–æ–Ω—ã`)
            }
        }
    }
}
        }
    }
}
