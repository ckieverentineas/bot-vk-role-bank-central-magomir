import { Alliance, AllianceCoin, AllianceFacult, BalanceCoin, BalanceFacult, ItemStorage, User } from "@prisma/client"
import { Person_Get } from "../person/person"
import { Accessed, Confirm_User_Success, Fixed_Number_To_Five, Get_Url_Picture, Keyboard_Index, Logger, Send_Message, Send_Message_Smart } from "../../../core/helper"
import { Keyboard, KeyboardBuilder } from "vk-io"
import { answerTimeLimit, chat_id, timer_text } from "../../../.."
import { Person_Coin_Printer_Self } from "../person/person_coin"
import { Facult_Coin_Printer_Self } from "../alliance/facult_rank"
import prisma from "../prisma_client"
import { Back, Ipnut_Gold, Ipnut_Message } from "./operation_global"
import { Sub_Menu } from "./operation_sub"
import { ico_list } from "../data_center/icons_lib"
import { InventoryType } from "../data_center/standart"

export async function Operation_Solo(context: any) {
    if (context.peerType == 'chat') { return }
    const user_adm: User | null | undefined = await Person_Get(context)
    if (await Accessed(context) == 1) { return }
    let name_check = false
	let datas: any = []
    let info_coin: { text: string, smile: string } | undefined = { text: ``, smile: `` }
	while (name_check == false) {
		const uid: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ üí≥UID –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:`,
            {   
                keyboard: Keyboard.builder()
                .textButton({ label: 'üö´–û—Ç–º–µ–Ω–∞', payload: { command: 'limited' }, color: 'secondary' })
                .oneTime().inline(),
                timer_text
            }
        )
        if (uid.isTimeout) { return await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!')}
		if (/^(0|-?[1-9]\d{0,5})$/.test(uid.text)) {
            const get_user = await prisma.user.findFirst({ where: { id: Number(uid.text) } })
            if (get_user && (user_adm?.id_alliance == get_user.id_alliance || get_user.id_alliance == 0 || get_user.id_alliance == -1 || await Accessed(context) == 3)) {
                info_coin = await Person_Coin_Printer_Self(context, get_user.id)
                const info_facult_rank = await Facult_Coin_Printer_Self(context, get_user.id)
                await Logger(`In a private chat, opened ${get_user.idvk} card UID ${get_user.id} is viewed by admin ${context.senderId}`)
                name_check = true
			    datas.push({id: `${uid.text}`})
                const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(get_user.id_alliance) } })
                const facult_get: AllianceFacult | null = await prisma.allianceFacult.findFirst({ where: { id: Number(get_user.id_facult) } })
                await context.send(`üè¶ –û—Ç–∫—Ä—ã—Ç–∞ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: \n\nüí≥ UID: ${get_user.id} \nüïØ GUID: ${get_user.id_account} \nüîò –ñ–µ—Ç–æ–Ω—ã: ${get_user.medal} \nüë§ –ò–º—è: ${get_user.name} \nüëë –°—Ç–∞—Ç—É—Å: ${get_user.class}  \nüî® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${get_user?.spec} \nüè† –†–æ–ª–µ–≤–∞—è: ${get_user.id_alliance == 0 ? `–°–æ–ª–æ` : get_user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name}\n${facult_get ? facult_get.smile : `üîÆ`} –§–∞–∫—É–ª—å—Ç–µ—Ç: ${facult_get ? facult_get.name : `–ë–µ–∑ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞`} \nüß∑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: https://vk.com/id${get_user.idvk}\n${info_coin?.text}` )
                //await context.send(`–†–µ–π—Ç–∏–Ω–≥–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:\n\n ${info_facult_rank?.text}`)
            } else { 
                if (user_adm?.id_alliance != get_user?.id_alliance) {
                    await context.send(`üí° –ò–≥—Ä–æ–∫ ${get_user?.name} ${get_user?.id} –≤ —Ä–æ–ª–µ–≤–æ–π AUID: ${get_user?.id_alliance}, –≤ —Ç–æ –≤—Ä–µ–º—è, –∫–∞–∫ –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ AUID: ${user_adm?.id_alliance}`)
                } else {
                    await context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞!`) 
                }
            }
		} else {
            if (uid.text == "üö´–û—Ç–º–µ–Ω–∞") { 
                await context.send(`üí° –û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`) 
                return await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)
            }
			await context.send(`üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID!`)
		}
	}
    const keyboard = new KeyboardBuilder()
    if (await Accessed(context) == 3) {
        keyboard.textButton({ label: '‚ûïüîò', payload: { command: 'medal_up' }, color: 'secondary' })
        .textButton({ label: '‚ûñüîò', payload: { command: 'medal_down' }, color: 'secondary' }).row()
    }
    keyboard.textButton({ label: `‚ûï‚ûñ${info_coin?.smile.slice(0,30)}`, payload: { command: 'coin_engine' }, color: 'secondary' }).row()
    .textButton({ label: `‚ôæÔ∏è${info_coin?.smile.slice(0,30)}`, payload: { command: 'coin_engine_infinity' }, color: 'secondary' })
    .textButton({ label: `üë•‚ûï‚ûñ${info_coin?.smile.slice(0,30)}`, payload: { command: 'coin_engine_multi' }, color: 'secondary' }).row()
    .textButton({ label: 'üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ', payload: { command: 'storage_engine' }, color: 'secondary' })
    .textButton({ label: '‚öô', payload: { command: 'sub_menu' }, color: 'secondary' }).row()
    .textButton({ label: `üõç –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω`, payload: { command: 'alliance_shop_owner_sel' }, color: 'secondary' })
    .textButton({ label: 'üîô', payload: { command: 'back' }, color: 'secondary' }).row()
    .oneTime().inline()
    const ans: any = await context.question(`‚úâ –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id}`, { keyboard: keyboard, answerTimeLimit })
    if (ans.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å üí≥UID: ${datas[0].id} –∏—Å—Ç–µ–∫–ª–æ!`) }
    const config: any = {
        'back': Back,
        'sub_menu': Sub_Menu,
        'medal_up': Medal_Up,
        'medal_down': Medal_Down,
        'coin_engine': Coin_Engine,
        'coin_engine_infinity': Coin_Engine_Infinity,
        'coin_engine_multi': Coin_Engine_Multi,
        'alliance_shop_owner_sel': Alliance_Shop_Owner_Selector,
        'storage_engine': Storage_Engine
    }
    if (ans?.payload?.command in config) {
        const commandHandler = config[ans.payload.command];
        const answergot = await commandHandler(Number(datas[0].id), context, user_adm)
    } else {
        await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`)
    }
    await Keyboard_Index(context, `üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? –ú–æ–∂–µ—Ç –ø–æ–∑–≤–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–∞?`)
}

async function Storage_Engine(id: number, context: any, user_adm: User) {
    const user_get: User | null = await prisma.user.findFirst({ where: { id } });
    if (!user_get) {
        return await context.send("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const alliance = await prisma.alliance.findFirst({
        where: { id: user_get.id_alliance ?? 0 }
    });

    if (!alliance) {
        return await context.send("‚ùå –°–æ—é–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    let cursor = 0;
    const limit = 5;

    while (true) {
        const batchSize = 5;
        let counter = 0;
        let limiter = 0;
        let items_storage: ItemStorage[] = [];

        const items= await prisma.itemStorage.findMany({
            where: {
                id_alliance: user_get.id_alliance ?? 0,
                hidden: false
            },
            orderBy: { id: "desc" }
        });

        for (const item of items) {
            if ((cursor <= counter && batchSize + cursor >= counter) && limiter < batchSize) {
                items_storage.push(item);
                limiter++;
            }
            counter++;
        }

        if (items_storage.length === 0) {
            await context.send("üì¶ –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.");
            //break;
        }

        const keyboard = new KeyboardBuilder();

        for (const item of items_storage) {
            keyboard.textButton({
                label: `${item.name} (${item.id})`,
                payload: { command: 'give_item', item_id: item.id },
                color: 'secondary'
            }).row();
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if (cursor >= 5) {
            keyboard.textButton({
                label: '<',
                payload: { command: 'navigate', cursor: cursor - 5 },
                color: 'secondary'
            });
        }

        if (5 + cursor < items.length) {
            keyboard.textButton({
                label: '>',
                payload: { command: 'navigate', cursor: cursor + 5 },
                color: 'secondary'
            });
        }

        keyboard
            .textButton({
                label: 'üÜï –°–æ–∑–¥–∞—Ç—å',
                payload: { command: 'create_item' },
                color: 'positive'
            })
            .textButton({
                label: '‚ùå –í—ã—Ö–æ–¥',
                payload: { command: 'exit' },
                color: 'negative'
            });
            //console.log(keyboard)
        const answer = await context.question("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏:", {
            keyboard: keyboard.inline(),
            answerTimeLimit
        });

        if (answer.isTimeout) {
            await context.send("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.");
            break;
        }

        if (answer.payload?.command === 'navigate') {
            cursor = answer.payload.cursor;
            continue;
        }

        if (answer.payload?.command === 'give_item') {
            const itemId = answer.payload.item_id;

            const item = await prisma.itemStorage.findFirst({
                where: { id: itemId }
            });

            if (!item) {
                await context.send("‚ö† –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                continue;
            }
            const confirm: { status: boolean, text: string } = await Confirm_User_Success(context, `–≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç "${item?.name}" –∏–≥—Ä–æ–∫—É ${user_get.name}?`);
            //await context.send(confirm.text);
            if (!confirm.status) return;
            // –í—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            await prisma.inventory.create({
                data: {
                    id_user: user_get.id,
                    id_item: item.id,
                    type: InventoryType.ITEM_STORAGE,
                    comment: `–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ${user_adm.name}`
                }
            });
            const notif = `"üéÅ" --> –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ "${item?.name}" –∏–≥—Ä–æ–∫—É @id${user_get.idvk}(${user_get.name})${user_adm ? `\nüóø –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @id${user_adm.idvk}(${user_adm.name})` : ''}`
            await Send_Message_Smart(context, notif, 'client_callback', user_get)
            if (user_adm) { await Send_Message(user_adm.idvk, notif) }
            //await context.send(`üéÅ –ü—Ä–µ–¥–º–µ—Ç "${item.name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${user_get.name}.`);
            continue;
        }

        if (answer.payload?.command === 'create_item') {
            const name_answer = await context.question("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:");
            if (name_answer.isTimeout) {
                await context.send("‚è∞ –í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.");
                continue;
            }

            const desc_answer = await context.question("‚úè –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:");
            if (desc_answer.isTimeout) {
                await context.send("‚è∞ –í—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.");
                continue;
            }
            const imageUrl = await context.question(`üì∑ –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ "–Ω–µ—Ç"):`, timer_text);
            if (imageUrl.isTimeout) return;
            const image_url = imageUrl.text.toLowerCase() === '–Ω–µ—Ç' ? '' : Get_Url_Picture(imageUrl.text) ?? '';
            const newItem = await prisma.itemStorage.create({
                data: {
                    name: name_answer.text.trim(),
                    description: desc_answer.text.trim(),
                    id_alliance: user_get.id_alliance,
                    hidden: false,
                    image: image_url
                }
            });

            await context.send(`üÜï –ü—Ä–µ–¥–º–µ—Ç "${newItem.name}" —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.`);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?
            const confirm_answer = await context.question(
                `‚ùì –í—ã–¥–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–≥—Ä–æ–∫—É ${user_get.name}?`,
                {
                    keyboard: Keyboard.builder()
                        .textButton({ label: '–î–∞', payload: { command: 'give_created' }, color: 'positive' })
                        .textButton({ label: '–ù–µ—Ç', payload: { command: 'skip_give' }, color: 'negative' })
                        .oneTime().inline(),
                    answerTimeLimit
                }
            );

            if (confirm_answer.payload?.command === 'give_created') {
                await prisma.inventory.create({
                    data: {
                        id_user: user_get.id,
                        id_item: newItem.id,
                        type: "item_shop",
                        comment: `–í—ã–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º @id${context.senderId}`
                    }
                });
                const notif = `"üéÅ" --> –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ "${newItem?.name}" –∏–≥—Ä–æ–∫—É @id${user_get.idvk}(${user_get.name})${user_adm ? `\nüóø –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @id${user_adm.idvk}(${user_adm.name})` : ''}`
                await Send_Message_Smart(context, notif, 'client_callback', user_get)
                if (user_adm) { await Send_Message(user_adm.idvk, notif) }
                //await context.send(`üéÅ –ü—Ä–µ–¥–º–µ—Ç "${newItem.name}" –≤—ã–¥–∞–Ω –∏–≥—Ä–æ–∫—É.`);
            }

            continue;
        }

        if (answer.payload?.command === 'exit') {
            await context.send("üö™ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
            break;
        }
    }

    await Keyboard_Index(context, "üí° –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏?");
}

async function Alliance_Shop_Owner_Selector(id: number, context: any, user_adm: User) {
    const user_get: User | null = await prisma.user.findFirst({ where: { id } })
    if (!user_get) { return }
    const uid: any = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ SUID –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º:`,
        {   
            keyboard: Keyboard.builder()
            .textButton({ label: 'üö´–û—Ç–º–µ–Ω–∞', payload: { command: 'limited' }, color: 'secondary' })
            .oneTime().inline(),
            timer_text
        }
    )
    if (uid.isTimeout) { return await context.send('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ!')}
    if (/^(0|-?[1-9]\d{0,5})$/.test(uid.text)) {
        const get_alliance_shop = await prisma.allianceShop.findFirst({ where: { id: Number(uid.text) } })
        if (get_alliance_shop && (user_adm?.id_alliance == get_alliance_shop.id_alliance || user_get?.id_alliance == get_alliance_shop.id_alliance)) {
            const shop_up = await prisma.allianceShop.update({ where: { id: get_alliance_shop.id }, data: { id_user_owner: user_get.id } })
            const owner_old = await prisma.user.findFirst({ where: { id: get_alliance_shop.id_user_owner } })
            await Send_Message_Smart(context, `"üõç –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º [${shop_up?.name}]" --> –∏–∑–º–µ–Ω–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ ${owner_old?.id}-${owner_old?.name} -> ${shop_up.id_user_owner}-${user_get.name}`, 'admin_and_client', user_get)
        } else { 
            if (get_alliance_shop?.id_alliance != user_get?.id_alliance) {
                await context.send(`üí° –ò–≥—Ä–æ–∫ ${user_get?.name} ${user_get?.id} –≤ —Ä–æ–ª–µ–≤–æ–π AUID: ${user_get?.id_alliance}, –≤ —Ç–æ –≤—Ä–µ–º—è, –∫–∞–∫ –º–∞–≥–∞–∑–∏–Ω —Å–æ—Å—Ç–æ–∏—Ç –≤ AUID: ${get_alliance_shop?.id_alliance}`)
            } else {
                await context.send(`üí° –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞!`) 
            }
        }
    } else {
        if (uid.text == "üö´–û—Ç–º–µ–Ω–∞") { 
            return await context.send(`üí° –û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!`) 
            
        }
        await context.send(`üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID!`)
    }
}
// –º–æ–¥—É–ª—å –ú–∏–Ω–∏—Å—Ç—Ä–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
async function Medal_Up(id: number, context: any, user_adm: User) {
    const count: number = await Ipnut_Gold(context, '–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤') 
    const messa: string = await Ipnut_Message(context, '–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤')
    const user_get: User | null = await prisma.user.findFirst({ where: { id } })
    if (!user_get) { return }
    const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal + count } })
    const notif_ans = await Send_Message(user_get.idvk, `‚öô –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç ${user_get.name}: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`)
    !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_get.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
    const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "+üîò" > ${money_put.medal-count}üîò+${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
    await Send_Message(chat_id, ans_log)
    await Logger(`In private chat, user ${user_get.idvk} got ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
}
async function Medal_Down(id: number, context: any, user_adm: User) {
    const count: number = await Ipnut_Gold(context, '—Å–Ω—è—Ç–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤') 
    const messa: string = await Ipnut_Message(context, '—Å–Ω—è—Ç–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤')
    const user_get: any = await prisma.user.findFirst({ where: { id } })
    if (user_get.medal-count >= 0) {
        const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal - count } })
        const notif_ans = await Send_Message(user_get.idvk, `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç ${user_get.name}: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`)
        !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_get.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–Ω—è—Ç–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "-üîò" > ${money_put.medal+count}üîò-${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
        await Send_Message(chat_id, ans_log)
        await Logger(`In private chat, user ${user_get.idvk} lost ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
    } else {
        const confirmq = await context.question(`‚åõ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å ${count}üîò –∂–µ—Ç–æ–Ω–æ–≤ c —Å—á–µ—Ç–∞ ${user_get.name}, –Ω–æ —Å—á–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_get.medal}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–∞–ª–∞–Ω—Å: ${user_get.medal-count}`,
            {
                keyboard: Keyboard.builder()
                .textButton({ label: '–î–∞', payload: { command: 'confirm' }, color: 'secondary' })
                .textButton({ label: '–ù–µ—Ç', payload: { command: 'gold_down' }, color: 'secondary' })
                .oneTime().inline(),
                answerTimeLimit
            }
        )
        if (confirmq.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–Ω—è—Ç–∏–µ –≥–∞–ª–ª–µ–æ–Ω–æ–≤ —Å ${user_get.name} –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (confirmq.payload.command === 'confirm') {
            const money_put = await prisma.user.update({ where: { id: user_get.id }, data: { medal: user_get.medal - count } })
            const notif_ans = await Send_Message(user_get.idvk, `‚öô –° –≤–∞—Å —Å–Ω—è—Ç–æ ${count}üîò, ${money_put.name}. \n–í–∞—à —Å—á—ë—Ç: ${money_put.medal}üîò \n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}`)
            !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_get.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è —Å–Ω—è—Ç–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –∂–µ—Ç–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
            const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "-üîò" > ${money_put.medal+count}üîò-${count}üîò=${money_put.medal}üîò –¥–ª—è @id${user_get.idvk}(${user_get.name}) üß∑: ${messa}`
            await Send_Message(chat_id, ans_log)
            await Logger(`In private chat, user ${user_get.idvk} lost ${count} medal. Him/Her bank now ${money_put.medal} by admin ${context.senderId}`)
        } else {
            await context.send(`üí° –ù—É–∂–Ω–æ –±—ã—Ç—å –∂–µ—Å—Ç—á–µ! –ì—Ä–µ–±–∏ –∂–µ—Ç–æ–Ω—ã`)
        }
    }
}
//–ú–æ–¥—É–ª—å –º—É–ª—å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
async function Coin_Engine_Multi(id: number, context: any, user_adm: User) {
    const user: User | null | undefined = await prisma.user.findFirst({ where: { id: id } })
    const person: { coin: AllianceCoin | null, operation: String | null, amount: number } = { coin: null, operation: null, amount: 0 }
    if (!user) { return }
    const alli_get = await prisma.alliance.findFirst({ where: { id: user.id_alliance ?? 0 } })
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(user?.id_alliance) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    let coin_check = false
    let id_builder_sent = 0
    while (!coin_check) {
        const keyboard = new KeyboardBuilder()
        id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
        let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:\n\n`
        const builder_list: AllianceCoin[] = coin_pass
        if (builder_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                const builder = builder_list[i]
                keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                /*
                const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                counter++
            }
            event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
            }
        } else {
            event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
            return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
        }
        const answer1: any = await context.question(`${event_logger}`,
            {	
                keyboard: keyboard.inline(), answerTimeLimit
            }
        )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                id_builder_sent = answer1.payload.id_builder_sent
            } else {
                person.coin = answer1.payload.target
                coin_check = true
            }
        }
    }
    let answer_check = false
    while (answer_check == false) {
        const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '+', payload: { command: 'student' }, color: 'secondary' })
                .textButton({ label: '-', payload: { command: 'professor' }, color: 'secondary' })
                //.textButton({ label: '/', payload: { command: 'citizen' }, color: 'secondary' })
                //.textButton({ label: '*', payload: { command: 'citizen' }, color: 'secondary' }).row()
                //.textButton({ label: '!', payload: { command: 'citizen' }, color: 'secondary' })
                //.textButton({ label: '‚àö', payload: { command: 'citizen' }, color: 'secondary' })
                //.textButton({ label: 'log', payload: { command: 'citizen' }, color: 'secondary' })
                //.textButton({ label: 'log10', payload: { command: 'citizen' }, color: 'secondary' })
                .oneTime().inline(), answerTimeLimit
            }
        )
        if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer_selector.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            person.operation = answer_selector.text
            answer_check = true
        }
    }
    const messa: string = await Ipnut_Message(context, `[–º–∞—Å—Å–æ–≤–∞—è ${person.operation}${person.coin?.smile}]`)
    const users_target = await Ipnut_Message(context, `–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ UID –∏ —Å—É–º–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n5-3402\n6-23.4\n7-53\n...`) 

    const lines = users_target.split('\n').map(line => line.trim());
    const uid_res: Array<{ id: number, amount: number }> = []

    for (const line of lines) {
        if (!line.includes('-')) {
            await context.send(`‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${line}`);
            continue;
        }

        const [uidStr, amountStr] = line.split('-').map(s => s.trim());
        const uid = parseInt(uidStr);
        const amount = parseFloat(amountStr);

        if (isNaN(uid) || isNaN(amount)) {
            await context.send(`‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${line}`);
            continue;
        }

        const user = await prisma.user.findFirst({ where: { id: uid } });
        if (!user) {
            await context.send(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UID ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            continue;
        }

        uid_res.push({ id: uid, amount: amount });
    }
    let passer = true
    switch (person.operation) {
        case '+':
            for (const ui of uid_res) {
                const pers = await prisma.user.findFirst({ where: { id: ui.id } })
                if (!pers) { await context.send(`UID ${ui.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`); continue }
                const pers_info_coin = await Person_Coin_Printer_Self(context, pers.id)
                const pers_info_facult_rank = await Facult_Coin_Printer_Self(context, pers.id)
                const pers_bal_coin: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: pers.id }})
                if (!pers_bal_coin) { await context.send(`UID ${ui.id} –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤–∞–ª—é—Ç–Ω—ã–π —Å—á–µ—Ç`); continue }
                const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: pers.id_facult ?? 0 } })
                const money_put_plus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: pers_bal_coin?.id }, data: { amount: { increment: ui.amount } } })
                let facult_income = ''
                if (person.coin?.point == true && alli_fac) {
                    const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: pers.id_facult! } }) 
                    const rank_put_plus: BalanceFacult | null = rank_put_plus_check ? await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { increment: ui.amount } } }) : null
                    facult_income = rank_put_plus ? `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check?.amount} ${person.operation} ${ui.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]` : ''
                }
                const notif_ans = await Send_Message(pers.idvk, `‚öô –í–∞–º ${person.operation} ${ui.amount}${person.coin?.smile}. \n–í–∞—à —Å—á—ë—Ç –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–º –æ–±—Ä–∞–∑–æ–º: ${pers_bal_coin.amount} ${person.operation} ${ui.amount} = ${money_put_plus.amount}\n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}\n${facult_income}`)
                const ans_log = `üóø @id${context.senderId}(${user_adm.name}) > "${person.operation}${person.coin?.smile}" > ${pers_bal_coin.amount} ${person.operation} ${ui.amount} = ${money_put_plus.amount} –¥–ª—è @id${pers.idvk}(${pers.name}) üß∑: ${messa}\n${facult_income}`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) }
                await Logger(`User ${pers.idvk} ${person.operation} ${ui.amount} gold. Him/Her bank now unknown`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UID ${ui.id} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è UID ${ui.id}`)
            }
            break;
        case '-':
            for (const ui of uid_res) {
                const pers = await prisma.user.findFirst({ where: { id: ui.id } })
                if (!pers) { await context.send(`UID ${ui.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`); continue }
                const pers_info_coin = await Person_Coin_Printer_Self(context, pers.id)
                const pers_info_facult_rank = await Facult_Coin_Printer_Self(context, pers.id)
                const pers_bal_coin: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: pers.id }})
                if (!pers_bal_coin) { await context.send(`UID ${ui.id} –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤–∞–ª—é—Ç–Ω—ã–π —Å—á–µ—Ç`); continue }
                const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: pers.id_facult ?? 0 } })
                const money_put_minus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: pers_bal_coin.id }, data: { amount: { decrement: ui.amount } } })
                let facult_income = ''
                if (person.coin?.point == true && alli_fac) {
                    const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: pers.id_facult! } }) 
                    if (rank_put_plus_check) {
                        const rank_put_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { decrement: ui.amount } } })
                        if (rank_put_plus) {
                            facult_income += `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check.amount} ${person.operation} ${ui.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]`
                        }
                    }
                }
                const notif_ans = await Send_Message(pers.idvk, `‚öô –í–∞–º ${person.operation} ${ui.amount}${person.coin?.smile}. \n–í–∞—à —Å—á—ë—Ç –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–º –æ–±—Ä–∞–∑–æ–º: ${pers_bal_coin.amount} ${person.operation} ${ui.amount} = ${money_put_minus.amount}\n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}\n${facult_income}`)
                const ans_log = `üóø @id${context.senderId}(${user_adm.name}) > "${person.operation}${person.coin?.smile}" > ${pers_bal_coin.amount} ${person.operation} ${ui.amount} = ${money_put_minus.amount} –¥–ª—è @id${pers.idvk}(${pers.name}) üß∑: ${messa}\n${facult_income}`
                const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
                if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) }
                await Logger(`User ${pers.idvk} ${person.operation} ${ui.amount} gold. Him/Her bank now unknown`)
                !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è UID ${ui.id} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –¥–ª—è UID ${ui.id}`)
            }
            break;
        default:
            passer = false
            break;
    }
    if (!passer) { return context.send(`‚ö† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!`) }
}
//–ú–æ–¥—É–ª—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
async function Coin_Engine(id: number, context: any, user_adm: User) {
    const user: User | null | undefined = await prisma.user.findFirst({ where: { id: id } })
    const person: { coin: AllianceCoin | null, operation: String | null, amount: number } = { coin: null, operation: null, amount: 0 }
    if (!user) { return }
    const alli_get = await prisma.alliance.findFirst({ where: { id: user.id_alliance ?? 0 } })
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(user?.id_alliance) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    let coin_check = false
    let id_builder_sent = 0
    while (!coin_check) {
        const keyboard = new KeyboardBuilder()
        id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
        let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:\n\n`
        const builder_list: AllianceCoin[] = coin_pass
        if (builder_list.length > 0) {
            const limiter = 5
            let counter = 0
            for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                const builder = builder_list[i]
                keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                /*
                const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                counter++
            }
            event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
            //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
            }
            //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
            if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
            }
        } else {
            event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
            return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
        }
        const answer1: any = await context.question(`${event_logger}`,
            {	
                keyboard: keyboard.inline(), answerTimeLimit
            }
        )
        if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer1.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                id_builder_sent = answer1.payload.id_builder_sent
            } else {
                person.coin = answer1.payload.target
                coin_check = true
            }
        }
    }
    let answer_check = false
    while (answer_check == false) {
        const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '+', payload: { command: 'student' }, color: 'secondary' })
                .textButton({ label: '-', payload: { command: 'professor' }, color: 'secondary' })
                //.textButton({ label: '/', payload: { command: 'citizen' }, color: 'secondary' })
                //.textButton({ label: '*', payload: { command: 'citizen' }, color: 'secondary' }).row()
                //.textButton({ label: '!', payload: { command: 'citizen' }, color: 'secondary' })
                //.textButton({ label: '‚àö', payload: { command: 'citizen' }, color: 'secondary' })
                //.textButton({ label: 'log', payload: { command: 'citizen' }, color: 'secondary' })
                //.textButton({ label: 'log10', payload: { command: 'citizen' }, color: 'secondary' })
                .oneTime().inline(), answerTimeLimit
            }
        )
        if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!answer_selector.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            person.operation = answer_selector.text
            answer_check = true
        }
    }
    person.amount = await Ipnut_Gold(context, `[${person.operation}${person.coin?.smile}]`) 
    const messa: string = await Ipnut_Message(context, `[${person.operation}${person.coin?.smile}]`)
    const findas: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: user.id }})
    const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: user.id_facult ?? 0 } })
    let incomer = 0
    let facult_income = ``
    let passer = true
    switch (person.operation) {
        case '+':
            const money_put_plus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: findas?.id }, data: { amount: { increment: person.amount } } })
            incomer = money_put_plus.amount
            if (person.coin?.point == true && alli_fac) {
                const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: user.id_facult! } }) 
                if (rank_put_plus_check) {
                    const rank_put_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { increment: person.amount } } })
                    if (rank_put_plus) {
                        facult_income += `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check.amount} ${person.operation} ${person.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]`
                    }
                }
            }
            break;
        case '-':
            const money_put_minus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: findas?.id }, data: { amount: { decrement: person.amount } } })
            incomer = money_put_minus.amount
            if (person.coin?.point == true && alli_fac) {
                const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: user.id_facult! } }) 
                if (rank_put_plus_check) {
                    const rank_put_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { decrement: person.amount } } })
                    if (rank_put_plus) {
                        facult_income += `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check.amount} ${person.operation} ${person.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]`
                    }
                }
            }
            break;
    
        default:
            passer = false
            break;
    }
    if (!passer) { return context.send(`‚ö† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!`) }
    await Send_Message_Smart(context, `"${person.operation} ${person.amount}${person.coin?.smile}" --> ${findas?.amount} ${person.operation} ${person.amount} = ${incomer}\nüß∑ –°–æ–æ–±—â–µ–Ω–∏–µ: ${messa}\n${facult_income}`, 'admin_and_client',user)
    await Logger(`User ${user.idvk} ${person.operation} ${person.amount} gold. Him/Her bank now unknown`)
}

//–ú–æ–¥—É–ª—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω–Ω—ã–π
async function Coin_Engine_Infinity(id: number, context: any, user_adm: User) {
    const user: User | null | undefined = await prisma.user.findFirst({ where: { id: id } })
    const person: { coin: AllianceCoin | null, operation: String | null, amount: number } = { coin: null, operation: null, amount: 0 }
    if (!user) { return }
    const alli_get = await prisma.alliance.findFirst({ where: { id: user.id_alliance ?? 0 } })
    const coin_pass: AllianceCoin[] = await prisma.allianceCoin.findMany({ where: { id_alliance: Number(user?.id_alliance) } })
    if (!coin_pass) { return context.send(`–í–∞–ª—é—Ç —Ä–æ–ª–µ–≤—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å=)`) }
    let infinity_pay = false
    while (!infinity_pay) {
        let coin_check = false
        let id_builder_sent = 0
        while (!coin_check) {
            const keyboard = new KeyboardBuilder()
            id_builder_sent = await Fixed_Number_To_Five(id_builder_sent)
            let event_logger = `‚ùÑ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:\n\n`
            const builder_list: AllianceCoin[] = coin_pass
            if (builder_list.length > 0) {
                const limiter = 5
                let counter = 0
                for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
                    const builder = builder_list[i]
                    keyboard.textButton({ label: `${builder.smile}-${builder.name.slice(0,30)}`, payload: { command: 'builder_control', id_builder_sent: i, target: builder }, color: 'secondary' }).row()
                    //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
                    event_logger += `\n\nüí¨ ${builder.smile} -> ${builder.id} - ${builder.name}\n`
                    /*
                    const services_ans = await Builder_Lifer(user, builder, id_planet)*/
                    counter++
                }
                event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
                //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
                    keyboard.textButton({ label: '‚Üê', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent-limiter}, color: 'secondary' })
                }
                //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
                if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
                    keyboard.textButton({ label: '‚Üí', payload: { command: 'builder_control_multi', id_builder_sent: id_builder_sent+limiter }, color: 'secondary' })
                }
            } else {
                event_logger = `üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`
                return context.send(`üí¨ –ê–¥–º–∏–Ω—ã —Ä–æ–ª–µ–≤–æ–π –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–æ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã`)
            }
            const answer1: any = await context.question(`${event_logger}`,
                {	
                    keyboard: keyboard.inline(), answerTimeLimit
                }
            )
            if (answer1.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (!answer1.payload) {
                await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
            } else {
                if (answer1.text == '‚Üí' || answer1.text =='‚Üê') {
                    id_builder_sent = answer1.payload.id_builder_sent
                } else {
                    person.coin = answer1.payload.target
                    coin_check = true
                }
            }
        }
        let answer_check = false
        while (answer_check == false) {
            const answer_selector = await context.question(`üß∑ –£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:`,
                {	
                    keyboard: Keyboard.builder()
                    .textButton({ label: '+', payload: { command: 'student' }, color: 'secondary' })
                    .textButton({ label: '-', payload: { command: 'professor' }, color: 'secondary' })
                    //.textButton({ label: '/', payload: { command: 'citizen' }, color: 'secondary' })
                    //.textButton({ label: '*', payload: { command: 'citizen' }, color: 'secondary' }).row()
                    //.textButton({ label: '!', payload: { command: 'citizen' }, color: 'secondary' })
                    //.textButton({ label: '‚àö', payload: { command: 'citizen' }, color: 'secondary' })
                    //.textButton({ label: 'log', payload: { command: 'citizen' }, color: 'secondary' })
                    //.textButton({ label: 'log10', payload: { command: 'citizen' }, color: 'secondary' })
                    .oneTime().inline(), answerTimeLimit
                }
            )
            if (answer_selector.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!`) }
            if (!answer_selector.payload) {
                await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
            } else {
                person.operation = answer_selector.text
                answer_check = true
            }
        }
        person.amount = await Ipnut_Gold(context, `[${person.operation}${person.coin?.smile}]`) 
        const messa: string = await Ipnut_Message(context, `[${person.operation}${person.coin?.smile}]`)
        const findas: BalanceCoin | null = await prisma.balanceCoin.findFirst({ where: { id_coin: person.coin?.id, id_user: user.id }})
        const alli_fac = await prisma.allianceFacult.findFirst({ where: { id: user.id_facult ?? 0 } })
        let incomer = 0
        let facult_income = ``
        let passer = true
        switch (person.operation) {
            case '+':
                const money_put_plus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: findas?.id }, data: { amount: { increment: person.amount } } })
                incomer = money_put_plus.amount
                if (person.coin?.point == true && alli_fac) {
                    const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: user.id_facult! } }) 
                    if (rank_put_plus_check) {
                        const rank_put_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { increment: person.amount } } })
                        if (rank_put_plus) {
                            facult_income += `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check.amount} ${person.operation} ${person.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]`
                        }
                    }
                }
                break;
            case '-':
                const money_put_minus: BalanceCoin = await prisma.balanceCoin.update({ where: { id: findas?.id }, data: { amount: { decrement: person.amount } } })
                incomer = money_put_minus.amount
                if (person.coin?.point == true && alli_fac) {
                    const rank_put_plus_check = await prisma.balanceFacult.findFirst({ where: { id_coin: person.coin.id, id_facult: user.id_facult! } }) 
                    if (rank_put_plus_check) {
                        const rank_put_plus: BalanceFacult = await prisma.balanceFacult.update({ where: { id: rank_put_plus_check.id }, data: { amount: { decrement: person.amount } } })
                        if (rank_put_plus) {
                            facult_income += `üåê "${person.operation}${person.coin?.smile}" > ${rank_put_plus_check.amount} ${person.operation} ${person.amount} = ${rank_put_plus.amount} –¥–ª—è –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ [${alli_fac.smile} ${alli_fac.name}]`
                        }
                    }
                }
                break;
            
            default:
                passer = false
                break;
        }
        if (!passer) { return context.send(`‚ö† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!`) }
        const notif_ans = await Send_Message(user.idvk, `‚öô –í–∞–º ${person.operation} ${person.amount}${person.coin?.smile}. \n–í–∞—à —Å—á—ë—Ç –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–º –æ–±—Ä–∞–∑–æ–º, ${user.name}: ${findas?.amount} ${person.operation} ${person.amount} = ${incomer}\n –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${messa}\n${facult_income}`)
        !notif_ans ? await context.send(`‚öô –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`) : await context.send(`‚öô –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        const ans_log = `‚öô @id${context.senderId}(${user_adm.name}) > "${person.operation}${person.coin?.smile}" > ${findas?.amount} ${person.operation} ${person.amount} = ${incomer} –¥–ª—è @id${user.idvk}(${user.name}) üß∑: ${messa}\n${facult_income}`
        const notif_ans_chat = await Send_Message(alli_get?.id_chat ?? 0, ans_log)
        if (!notif_ans_chat ) { await Send_Message(chat_id, ans_log) } 
        await Logger(`User ${user.idvk} ${person.operation} ${person.amount} gold. Him/Her bank now unknown`)
        const answer = await context.question(`${ico_list['load'].ico} –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è?`,
            {	
                keyboard: Keyboard.builder()
                .textButton({ label: '–ü–æ–ª–Ω–æ—Å—Ç—å—é', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'positive' }).row()
                .textButton({ label: '–ü–µ—Ä–µ–¥—É–º–∞–ª(–∞)', payload: { command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' }, color: 'negative' }).oneTime(),
                answerTimeLimit
            }
        );
        if (answer.isTimeout) { infinity_pay = true; return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!/–¥–∞|yes|–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è|–∫–æ–Ω–µ—á–Ω–æ|‚úè|–ü–æ–ª–Ω–æ—Å—Ç—å—é|–ø–æ–ª–Ω–æ—Å—Ç—å—é/i.test(answer.text|| '{}')) {
            await context.send(`${ico_list['cancel'].ico} –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!`)
            infinity_pay = true; 
        }
    }
}