import { Context, KeyboardBuilder } from "vk-io"
import { Fixed_Number_To_Five, Logger } from "../../core/helper"
import prisma from "./prisma_client"
import { Alliance } from "@prisma/client"
import { chat_id, timer_text, vk } from "../../.."

export async function Alliance_Control_Multi(context: Context) {
    const keyboard = new KeyboardBuilder()
    let id_builder_sent = await Fixed_Number_To_Five(context.eventPayload.id_builder_sent ?? 0)
    let id_planet = context.eventPayload.id_planet ?? 0
    let event_logger = `‚ùÑ –û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–æ—é–∑–∞–º–∏:\n\n`
    const builder_list: Alliance[] = await prisma.alliance.findMany({})
    if (builder_list.length > 0) {
        const limiter = 5
        let counter = 0
        
        for (let i=id_builder_sent; i < builder_list.length && counter < limiter; i++) {
            const builder = builder_list[i]
            
            keyboard.callbackButton({ label: `üëÄ ${builder.id}-${builder.name.slice(0,30)}`, payload: { command: 'alliance_control', id_builder_sent: i, id_planet: builder.id }, color: 'secondary' }).row()
            //.callbackButton({ label: 'üëÄ', payload: { command: 'builder_controller', command_sub: 'builder_open', office_current: i, target: builder.id }, color: 'secondary' })
            event_logger += `\n\nüí¨ ${builder.id} - ${builder.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${builder.idvk}`
            /*
            const services_ans = await Builder_Lifer(user, builder, id_planet)*/
            counter++
        }
        event_logger += `\n\n${builder_list.length > 1 ? `~~~~ ${builder_list.length > limiter ? id_builder_sent+limiter : limiter-(builder_list.length-id_builder_sent)} –∏–∑ ${builder_list.length} ~~~~` : ''}`
        //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
        if (builder_list.length > limiter && id_builder_sent > limiter-1 ) {
            keyboard.callbackButton({ label: '‚Üê', payload: { command: 'alliance_control_multi', id_builder_sent: id_builder_sent-limiter, id_planet: id_planet }, color: 'secondary' })
        }
        //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
        if (builder_list.length > limiter && id_builder_sent < builder_list.length-limiter) {
            keyboard.callbackButton({ label: '‚Üí', payload: { command: 'alliance_control_multi', id_builder_sent: id_builder_sent+limiter, id_planet: id_planet }, color: 'secondary' })
        }
    } else {
        event_logger = `üí¨ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–ª—å—è–Ω—Å–æ–≤!`
    }
    //–Ω–æ–≤—ã–π –æ—Ñ–∏—Å
    keyboard.textButton({ label: '‚ûïüåê', payload: { command: 'alliance_controller', command_sub: 'alliance_add', id_builder_sent: id_builder_sent, id_planet: id_planet }, color: 'secondary' })
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Alliance_Control(context: Context) {
    const keyboard = new KeyboardBuilder()
    let id_builder_sent = context.eventPayload.id_builder_sent ?? 0
    let id_planet = context.eventPayload.id_planet ?? 0
    let event_logger = `‚ùÑ –û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ —Å —Å–æ—é–∑–Ω–∏–∫–æ–º ‚Ññ${id_planet}:\n\n`
    const builder_list: Alliance[] = await prisma.alliance.findMany({})
    const builder = builder_list[id_builder_sent]
    if (builder_list.length > 0) {
        //const sel = buildin[0]
        keyboard.callbackButton({ label: 'üí• –†–∞–∑–æ—Ä–≤–∞—Ç—å', payload: { command: 'alliance_controller', command_sub: 'alliance_destroy', id_builder_sent: id_builder_sent, target: builder.id, id_planet: id_planet }, color: 'secondary' }).row()
        event_logger += `\n\nüí¨ ${builder.id} - ${builder.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${builder.idvk}`
        event_logger +=`\n\n${builder_list.length > 1 ? `~~~~ ${1+id_builder_sent} –∏–∑ ${builder_list.length} ~~~~` : ''}`;
        
    } else {
        event_logger = `üí¨ –í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∑–¥–∞–Ω–∏—è, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —á—Ç–æ-—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å??`
    }
    
    //–ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–∏—Å
    if (builder_list.length > 1 && id_builder_sent > 0) {
        keyboard.callbackButton({ label: '‚Üê', payload: { command: 'alliance_control', id_builder_sent: id_builder_sent-1, target: builder.id, id_planet: id_planet }, color: 'secondary' })
    }
    //—Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ–∏—Å
    if (builder_list.length > 1 && id_builder_sent < builder_list.length-1) {
        keyboard.callbackButton({ label: '‚Üí', payload: { command: 'alliance_control', id_builder_sent: id_builder_sent+1, target: builder.id, id_planet: id_planet }, color: 'secondary' })
    }
    if (builder_list.length > 5) {
        if ( id_builder_sent < builder_list.length/2) {
            //–ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ñ–∏—Å
            keyboard.callbackButton({ label: '‚ÜíüïØ', payload: { command: 'alliance_control', id_builder_sent: builder_list.length-1, target: builder.id, id_planet: id_planet }, color: 'secondary' })
        } else {
            //–ø–µ—Ä–≤—ã–π –æ—Ñ–∏—Å
            keyboard.callbackButton({ label: '‚ÜêüïØ', payload: { command: 'alliance_control', id_builder_sent: 0, target: builder.id, id_planet: id_planet }, color: 'secondary' })
        }
    }
    //–Ω–æ–≤—ã–π –æ—Ñ–∏—Å
    keyboard.textButton({ label: '‚ûïüåê', payload: { command: 'alliance_controller', command_sub: 'alliance_add', id_builder_sent: id_builder_sent, id_planet: id_planet }, color: 'secondary' })
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'alliance_control_multi', id_builder_sent: id_builder_sent, id_planet: id_planet }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Alliance_Controller(context: Context) {
    const target = context.eventPayload.target ?? 0
    const config: Office_Controller = {
        'alliance_add': Alliance_Add,
        'alliance_destroy': Alliance_Destroy,
    }
    await config[context.eventPayload.command_sub](context, target)
}
type Office_Controller = {
    [key: string]: (context: Context, target: number) => Promise<void>;
}

export async function Alliance_Add(context: Context) {
    let spec_check = false
    let targeta = null
	while (spec_check == false) {
		const name = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–æ–≤–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 256) {
			spec_check = true
			targeta = name.text
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    const temp = targeta.replace(/.*[/]/, "");
    try {
        const [group] = await vk.api.groups.getById({ group_id: temp });
	    if (!group) { return }
	    const alli_check = await prisma.alliance.findFirst({ where: { idvk: group.id } })
	    if (!alli_check) {
	    	const alli_cr = await prisma.alliance.create({ data: { name: group.name!, idvk: group.id!, }})
	    	await Logger(`In database created new alliance id ${alli_cr.id} name ${alli_cr.name} by user ${context.peerId}`)
	    	await context.send(`‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—é–∑–∞!\n\nüí¨ ${alli_cr.id} - ${alli_cr.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${alli_cr.idvk}`)
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `üåê –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—é–∑–∞!\n\nüí¨ ${alli_cr.id} - ${alli_cr.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${alli_cr.idvk}`
            })
	    } else {
	    	await Logger(`In database already created alliance name ${group.id}`)
            await context.send(`ü§ùüèª –°–æ—é–∑ —É–∂–µ –±—ã–ª –∑–∞–∫–ª—é—á–µ–Ω —Å:\n\nüí¨ ${alli_check.id} - ${alli_check.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${alli_check.idvk}`)
	    }
    } catch (e) {
        await context.send(`‚õî –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –°–æ—é–∑ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`)
    }
}

async function Alliance_Destroy(context: Context, target: number) {
    const keyboard = new KeyboardBuilder()
    const alliance: Alliance | null = await prisma.alliance.findFirst({ where: { id: target }})
    let event_logger = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è —Å–Ω–µ—Å—Ç–∏ –∑–¥–∞–Ω–∏—è...`
    let id_planet = context.eventPayload.id_planet ?? 0
    let id_builder_sent = context.eventPayload.id_builder_sent ?? 0
    if (alliance) {
        if (context.eventPayload.status == "ok") {
            await prisma.$transaction([
                prisma.alliance.delete({ where: { id: alliance.id } }),
            ]).then(([alli_del]) => {
                event_logger = `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º —Å–æ—é–∑–∞ –¥–ª—è:\n\nüí¨ ${alli_del.id} - ${alli_del.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${alli_del.idvk}` 
                Logger(`In database deleted alliance ${alli_del.name}-${alli_del.id} by user ${context.peerId}`);
                vk.api.messages.send({
                    peer_id: chat_id,
                    random_id: 0,
                    message: `üí• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º —Å–æ—é–∑–∞ –¥–ª—è:\n\nüí¨ ${alli_del.id} - ${alli_del.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${alli_del.idvk}`
                })
            })
            .catch((error) => {
                event_logger = `‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —Å–æ—é–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ` 
                Logger(`Error delete alliance from database: ${error.message}`);
            });
        } else {
            event_logger = `üåê –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—Ä–≥–Ω—É—Ç—å —Å–æ—é–∑ —Å:\n\nüí¨ ${alliance.id} - ${alliance.name}\n üß∑ –°—Å—ã–ª–∫–∞: https://vk.com/club${alliance.idvk}`
            keyboard.callbackButton({ label: '–•–æ—á—É', payload: { command: 'alliance_controller', command_sub: 'alliance_destroy', id_builder_sent: id_builder_sent, office_current: 0, target: alliance.id, status: "ok", id_planet: id_planet }, color: 'secondary' })
        } 
    }
    //–Ω–∞–∑–∞–¥ —Ö–∑ –∫—É–¥–∞
    keyboard.callbackButton({ label: '‚ùå', payload: { command: 'alliance_control', office_current: 0, id_builder_sent, target: undefined, id_planet: id_planet }, color: 'secondary' }).inline().oneTime() 
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}