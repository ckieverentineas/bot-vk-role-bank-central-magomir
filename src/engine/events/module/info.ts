import { KeyboardBuilder } from "vk-io"
import prisma from "./prisma_client"
import { chat_id, vk } from "../../.."
import { Alliance, Trigger, User } from "@prisma/client"
import { Image_Interface_Inventory, Image_Random, Image_Text_Add_Card } from "../../core/imagecpu"
import { randomInt } from "crypto"
import { Analyzer_Birthday_Counter } from "./analyzer"
import { Person_Get } from "../../core/person"
import { Logger } from "../../core/helper"

export async function Card_Enter(context:any) {
    const get_user: User | null | undefined = await Person_Get(context)
    if (get_user) {
        const attached = await Image_Text_Add_Card(context, 50, 650, get_user)
        const alli_get: Alliance | null = await prisma.alliance.findFirst({ where: { id: Number(get_user.id_alliance) } })
        const text = `‚úâ –í—ã –¥–æ—Å—Ç–∞–ª–∏ —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É: \n\n üí≥ UID: ${get_user.id} \n üïØ GUID: ${get_user.id_account} \n üîò –ñ–µ—Ç–æ–Ω—ã: ${get_user.medal} \n üë§ –ò–º—è: ${get_user.name} \n üëë –°—Ç–∞—Ç—É—Å: ${get_user.class}  \n üî® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${get_user?.spec} \n üè† –†–æ–ª–µ–≤–∞—è: ${get_user.id_alliance == 0 ? `–°–æ–ª–æ` : get_user.id_alliance == -1 ? `–ù–µ —Å–æ—é–∑–Ω–∏–∫` : alli_get?.name} `
        //üóÑ \n üí∞–ì–∞–ª–ª–µ–æ–Ω—ã: ${get_user.gold} \n üßô–ú–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: ${get_user.xp} \n üìà–£—Ä–æ–≤–µ–Ω—å: ${get_user.lvl} \n üåü–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievement_counter} \n üîÆ–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${artefact_counter} \n ‚öô${get_user.private ? "–í—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å —Ä–æ–ª–∏—Ç—å" : "–í—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –æ—Ç—Ä–æ–ª—ã"}
        const keyboard = new KeyboardBuilder()
        //.callbackButton({ label: 'üéÅ', payload: { command: 'birthday_enter' }, color: 'secondary' })
        //.callbackButton({ label: 'üìä', payload: { command: 'statistics_enter' }, color: 'secondary' })
        .textButton({ label: '‚ûïüë§', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'secondary' })
        if (await prisma.user.count({ where: { idvk: get_user.idvk } }) > 1) {
            keyboard.textButton({ label: 'üîÉüë•', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'secondary' })
        }
        keyboard.callbackButton({ label: 'üèÜ', payload: { command: 'rank_enter' }, color: 'secondary' })
        .callbackButton({ label: 'üö´', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
        await Logger(`In a private chat, the card is viewed by user ${get_user.idvk}`)
        let ii = `–í –æ–±—â–µ–º –≤—ã ${get_user.medal > 100 ? "–ø—Ä–∏ –∂–µ—Ç–æ–Ω–∞—Ö" : "–±–µ–∑ –∂–µ—Ç–æ–Ω–æ–≤"}.`
        await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${text}`, keyboard: keyboard, attachment: attached?.toString()})
        if (context?.eventPayload?.command == "card_enter") {
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî ${ii}`
                })
            })
        }
    }
}

export async function Artefact_Enter(context: any) {
    const get_user: User | null | undefined = await Person_Get(context)
    if (!get_user) { return }
    const attached = await Image_Random(context, "artefact")
    let artefact_list = `‚úâ –í–∞—à–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, ${get_user.class} ${get_user.name}, ${get_user.spec}: \n`
    const artefact = await prisma.artefact.findMany({ where: { id_user: get_user.id } })
    if (artefact.length > 0) {
        for (const i in artefact) { artefact_list += `\nüí¨: ${artefact[i].name} \n üîß: ${artefact[i].type}${artefact[i].label} \n üß∑:  ${artefact[i].description}` }
    } else { artefact_list += `\n‚úâ –£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ =(` }
    console.log(`User ${get_user.idvk} see artefacts`)
    const keyboard = new KeyboardBuilder().callbackButton({ label: 'üö´', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${artefact_list}`, keyboard: keyboard, attachment: attached?.toString()})
    let ii = ''
    if (artefact.length > 0) {
        ii += `${artefact.length > 2 ? '–í—ã —Ç–æ–∂–µ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —ç—Ç—É —Å–∏–ª—É –º–æ—â–∏?' : '–°–ª–∞–±–æ–µ –ø—Ä–æ–Ω–∏–∑–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–∞–µ—Ç —Å–∏–ª—É.'}`
    } else { 
        ii += `–í–µ—Ä–æ—è—Ç–Ω–æ –≤—ã –º–∞–≥–ª, —Ä–∞–∑ —É –≤–∞—Å –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞..`
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî ${ii}`
        })
    })
} 

export async function Inventory_Enter(context: any) {
    const get_user: User | null | undefined = await Person_Get(context)
    if (!get_user) { return }
    const inventory = await prisma.inventory.findMany({ where: { id_user: get_user.id }, include: { item: true } })
    let cart = ''
    for (const i in inventory) {
        cart += `${inventory[i].item.name};`
    }
    const destructor = cart.split(';').filter(i => i)
    let compile = []
    let compile_rendered: any = []
    for (const i in destructor) {
        let counter = 0
        for (const j in destructor) { if (destructor[i] != null) { if (destructor[i] == destructor[j]) { counter++ } } }
        compile.push(`üëú ${destructor[i]} x ${counter}\n`)
        compile_rendered.push({name: destructor[i], text:`x ${counter}`})
        counter = 0
    }
    const fUArr: any = compile_rendered.filter( (li: ArrayLike<any> | { [s: string]: any; }, idx: any, self: ({ [s: string]: any; } | ArrayLike<any>)[]) => 
        self.map( (itm: { [s: string]: any; } | ArrayLike<any>) => Object.values(itm).reduce((r, c) => r.concat(c), '') )
        .indexOf( Object.values(li).reduce((r, c) => r.concat(c), '') ) === idx
    )
    let attached = null
    if ((fUArr && fUArr[0] != undefined) && fUArr.length <= 20) { attached = await Image_Interface_Inventory(fUArr, context) }
    let final: any = Array.from(new Set(compile));
    const text = final.length > 0 ? `‚úâ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ: \n ${final.toString().replace(/,/g, '')}` : `‚úâ –í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏:(`
    await Logger(`In a private chat, the inventory is viewed by user ${get_user.idvk}`)
    const keyboard = new KeyboardBuilder().callbackButton({ label: 'üö´', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${text}`, keyboard: keyboard, attachment: attached?.toString()})
    let ii = final.length > 0 ? '–ê –≤—ã –∑–∞–∂–∏—Ç–æ—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç' : `–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ —Ç–∞–∫ –ª–æ—Ö–∞–Ω—É—Ç—å—Å—è?`
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî ${ii}`
        })
    })
}
export async function Admin_Enter(context: any) {
    const attached = await Image_Random(context, "admin")
    const user: User | null | undefined = await Person_Get(context)
    if (!user) { return }
    let puller = 'üè¶ –ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —Ä–∞–±–æ–≤... \n'
    if (user?.id_role == 2) {
        const users = await prisma.user.findMany({ where: { id_role: 2 } })
        for (const i in users) { puller += `\nüë§ ${users[i].id} - @id${users[i].idvk}(${users[i].name})` }
    } else {
        puller += `\nüö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n`
    }
    const keyboard = new KeyboardBuilder().callbackButton({ label: 'üö´', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${puller}`, keyboard: keyboard, attachment: attached?.toString()})
    await Logger(`In a private chat, the list administrators is viewed by admin ${user.idvk}`)
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –ò–º –±—ã –µ—â–µ —á–µ—Ä–Ω—ã–µ –æ—á–∫–∏, –∏ —Ç–æ—á–Ω–æ –ª—é–¥–∏ –≤ —á–µ—Ä–Ω–æ–º!`
        })
    })
}

export async function Birthday_Enter(context: any) {
    let attached = await Image_Random(context, "birthday")
    const user: User | null | undefined = await Person_Get(context)
    if (!user) { return }
    const trigger: any = await prisma.trigger.findFirst({ where: { id_user: user.id, name: 'birthday' } })
    if (!trigger) { 
        const trigger_init: any = await prisma.trigger.create({ data: { id_user: user.id, name: 'birthday', value: false, crdate: user.crdate } })
        console.log(`Init birthday for user ${context.peerId}`)
    }
    let text = ''
    const keyboard = new KeyboardBuilder()
    
    const trigger_check: Trigger | null = await prisma.trigger.findFirst({ where: { id_user: user.id, name: 'birthday' } })
    if (!trigger_check) { return }
    const datenow: any = new Date()
    const dateold: any = new Date(trigger_check.crdate)
    const timeouter = 31536000000 //–≤—Ä–µ–º—è –∫–¥ –≤ –¥–Ω—é—Ö–µ
    const year = datenow.getFullYear(); // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    const month = dateold.getMonth(); // –ø–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Date —Å –¥–∞—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const day = dateold.getDate(); // –ø–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Date —Å –¥–∞—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (datenow - dateold >= timeouter) {
        if (context.eventPayload?.command_sub == 'beer_buying') {
            const gold = randomInt(365, 778)
            const xp = randomInt(15, 151)
            const user_update: any = await prisma.user.update({ where: { id: user.id }, data: { gold: { increment: gold }, xp: { increment: xp } } })
            const trigger_update: any = await prisma.trigger.update({ where: { id: trigger_check.id }, data: { crdate: new Date(year, month, day) } })
            text = `‚öô –†–∞–∑–≤—è–∑–∞–≤ –±–∞–Ω—Ç–∏–∫ –±–∞–Ω—Ç–∏–∫–æ–≤ c –∫—Ä–∞—Å–∏–≤–æ–π —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –∫–æ—Ä–æ–±–æ—á–∫–∏, –≤—ã –Ω–∞—à–ª–∏ –≤–Ω—É—Ç—Ä–∏ ${gold}üí∞ –∏ ${xp}üßô. –í —Å–∞–º–æ–º –¥–Ω–µ –∫–æ—Ä–æ–±–∫–∏ –ª–µ–∂–∞–ª–∞ –∑–∞–ø–∏—Å–æ—á–∫–∞: –° –¥–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, —Å—É–∫@!`
            console.log(`User ${context.peerId} get gift for birthday`)
            await vk.api.messages.send({
                peer_id: chat_id,
                random_id: 0,
                message: `üéÅ @id${user.idvk}(${user.name}) –ø—Ä–∞–∑–¥–Ω—É–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∂–∞–¥–Ω—ã—Ö –≥–æ–±–ª–∏–Ω–æ–≤ ${gold}üí∞ –∏ ${xp}üßô.`
            })
            await Analyzer_Birthday_Counter(context)
        } else {
            text += `üéÅ –ö—Ç–æ-–±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, —É –¥–≤–µ—Ä–µ–π –≤–æ–∑–Ω–∏–∫–ª–∞ –ø–æ—Å—ã–ª–∫–∞ —Å –±–∞–Ω—Ç–∏–∫–∞–º–∏, –∫—Ä–∞—Å–∏–≤–æ –æ–±—Ç—è–≥–∏–≤–∞—é—â–∏–º–∏ –∫–æ—Ä–æ–±–∫—É!`
            keyboard.callbackButton({ label: '+üéÅ', payload: { command: 'birthday_enter', command_sub: "beer_buying" }, color: 'secondary' }).row()
        }
    } else {
        attached = await Image_Random(context, "birthday_drop")
        text = `üîî –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—à –¥–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–ª–∏ –≤—Å–µ–º –±–∞–Ω–∫–æ–º: ${dateold.getDate()}-${dateold.getMonth()}-${dateold.getFullYear()} ${dateold.getHours()}:${dateold.getMinutes()}! –î–æ –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –†–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å ${((timeouter-(datenow-dateold))/60000/60).toFixed(2)} —á–∞—Å–æ–≤.`
    }
    keyboard.callbackButton({ label: 'üö´', payload: { command: 'card_enter' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${text}`, keyboard: keyboard, attachment: attached?.toString()}) 
}

export async function Statistics_Enter(context: any) {
    //let attached = await Image_Random(context, "birthday")
    const user: User | null | undefined = await Person_Get(context)
    if (!user) { return }
    const stats = await prisma.analyzer.findFirst({ where: { id_user: user.id }})
    let text = ''
    const keyboard = new KeyboardBuilder()
    text = `‚öô –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\nüç∫ –°–ª–∏–≤–æ—á–Ω–æ–µ: ${stats?.beer}/20000\nüçµ –ë–∞–º–±—É–∫–æ–≤–æ–µ: ${stats?.beer_premiun}/1000\nüéÅ –î–Ω–∏ –†–æ–∂–¥–µ–Ω–∏—è: ${stats?.birthday}/15\nüõí –ü–æ–∫—É–ø–æ–∫: ${stats?.buying}/20000\nüßô –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π –ú–û: ${stats?.convert_mo}/20000\nüìÖ –ü–æ–ª—É—á–µ–Ω–æ –ï–ó: ${stats?.quest}/20000\nüëô –ó–∞–ª–æ–≥–æ–≤: ${stats?.underwear}/20000\n`
    console.log(`User ${context.peerId} get statistics information`)
    keyboard.callbackButton({ label: 'üö´', payload: { command: 'card_enter' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${text}`, keyboard: keyboard, /*attachment: attached?.toString()*/}) 
}

export async function Rank_Enter(context: any) {
    //let attached = await Image_Random(context, "birthday")
    const user: User | null | undefined = await Person_Get(context)
    if (!user) { return }
    const stats = await prisma.analyzer.findFirst({ where: { id_user: user.id }})
    let text = '‚öô –†–µ–π—Ç–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:\n\n'
    const keyboard = new KeyboardBuilder()


    const stat: { rank: number, text: string, score: number, me: boolean }[] = []
    let counter = 1
    for (const userok of await prisma.user.findMany()) {
        const ach_counter = await prisma.achievement.count({ where: { id_user: userok.id }})
        stat.push({
            rank: counter,
            text: `- [https://vk.com/id${userok.idvk}|${userok.name.slice(0, 20)}] --> ${userok.medal}üîò\n`,
            score: userok.medal,
            me: userok.idvk == user.idvk ? true : false
        })
        counter++
    }
    stat.sort(function(a, b){
        return b.score - a.score;
    });
    let counter_last = 1
    let trig_find_me = false
    for (const stat_sel of stat) {
        if (counter_last <= 10) {
            text += `${stat_sel.me ? '‚úÖ' : 'üë§'} ${counter_last} ${stat_sel.text}`
            if (stat_sel.me) { trig_find_me = true }
        }
        if (counter_last > 10 && !trig_find_me) {
            if (stat_sel.me) {
                text += `\n\n${stat_sel.me ? '‚úÖ' : 'üë§'} ${counter_last} ${stat_sel.text}`
            }
        }
        counter_last++
    }
    text += `\n\n‚ò† –í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —É—á–∞—Å—Ç–≤—É–µ—Ç ${counter-1} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π`
    await Logger(`In a private chat, the rank information is viewed by user ${user.idvk}`)
    keyboard.callbackButton({ label: 'üö´', payload: { command: 'card_enter' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${text}`, keyboard: keyboard, /*attachment: attached?.toString()*/}) 
}