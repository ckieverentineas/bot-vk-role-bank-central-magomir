generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id          Int      @id @default(autoincrement())
  idvk        Int
  crdate      DateTime @default(now())
  select_user Int      @default(0)
  User        User[]
}

model Monitor {
  id           Int       @id @default(autoincrement())
  name         String
  idvk         Int
  token        String
  alliance     Alliance  @relation(fields: [id_alliance], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_alliance  Int
  id_coin      Int?
  cost_like    Int       @default(2)
  cost_comment Int       @default(5)
  cost_post    Int       @default(30)
  lim_like     Int       @default(3)
  lim_comment  Int       @default(3)
  starting     Boolean   @default(false)
  wall_on      Boolean   @default(true)
  like_on      Boolean   @default(true)
  comment_on   Boolean   @default(true)
  Limiter      Limiter[]
}

model Limiter {
  id         Int      @id @default(autoincrement())
  monitor    Monitor  @relation(fields: [id_monitor], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_monitor Int
  id_user    Int
  user       User     @relation(fields: [id_user], references: [id], onDelete: Cascade)
  likes      Int      @default(0)
  comment    Int      @default(0)
  update     DateTime @default(now())
}

model User {
  id                    Int                     @id @default(autoincrement())
  name                  String
  class                 String
  idvk                  Int
  spec                  String
  id_alliance           Int?
  medal                 Int                     @default(5)
  id_facult             Int?
  private               Boolean                 @default(false)
  notification          Boolean                 @default(true)
  crdate                DateTime                @default(now())
  id_role               Int                     @default(1)
  role                  Role                    @relation(fields: [id_role], references: [id], onDelete: Cascade)
  id_account            Int                     @default(1)
  account               Account                 @relation(fields: [id_account], references: [id], onDelete: Cascade)
  Artefact              Artefact[]
  Inventory             Inventory[]
  Trigger               Trigger[]
  Achievement           Achievement[]
  Analyzer              Analyzer[]
  BalanceCoin           BalanceCoin[]
  Limiter               Limiter[]
  InventoryAllianceShop InventoryAllianceShop[]
}

model BlackBox {
  id   Int @id @default(autoincrement())
  idvk Int @unique
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Artefact {
  id          Int    @id @default(autoincrement())
  id_user     Int
  name        String
  label       String
  description String
  type        String
  user        User   @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

model Inventory {
  id      Int  @id @default(autoincrement())
  id_user Int
  id_item Int
  type    String @default("item_shop")
  comment String?
  user    User @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

model Item {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  image       String?
  price       Int
  id_category Int
  type        String
  category    Category    @relation(fields: [id_category], references: [id], onDelete: Cascade)
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
  Item Item[]
}

model Trigger {
  id      Int      @id @default(autoincrement())
  name    String
  value   Boolean
  user    User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user Int
  crdate  DateTime @default(now())
}

model Achievement {
  id      Int      @id @default(autoincrement())
  name    String
  uid     Int
  user    User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user Int
  crdate  DateTime @default(now())
}

model Analyzer {
  id           Int      @id @default(autoincrement())
  buying       Int      @default(0)
  quest        Int      @default(0)
  underwear    Int      @default(0)
  convert_mo   Int      @default(0)
  beer         Int      @default(0)
  beer_premiun Int      @default(0)
  birthday     Int      @default(0)
  gold_lost    Int      @default(0)
  gold_got     Int      @default(65)
  xp_got       Int      @default(0)
  xp_lost      Int      @default(0)
  user         User     @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user      Int
  crdate       DateTime @default(now())
}

model Alliance {
  id              Int              @id @default(autoincrement())
  name            String
  idvk            Int
  id_chat         Int              @default(0)
  id_chat_monitor Int              @default(0)
  AllianceCoin    AllianceCoin[]
  AllianceFacult  AllianceFacult[]
  Monitor         Monitor[]
  Shop            AllianceShop[]
}

model AllianceCoin {
  id              Int             @id @default(autoincrement())
  name            String
  smile           String
  point           Boolean         @default(false)
  converted       Boolean         @default(true)
  converted_point Boolean         @default(false)
  sbp_on          Boolean         @default(false)
  course_medal    Int             @default(1)
  course_coin     Int             @default(1)
  alliance        Alliance        @relation(fields: [id_alliance], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_alliance     Int
  BalanceCoin     BalanceCoin[]
  BalanceFacult   BalanceFacult[]
}

model BalanceCoin {
  id      Int          @id @default(autoincrement())
  coin    AllianceCoin @relation(fields: [id_coin], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_coin Int
  user    User         @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user Int
  amount  Float        @default(0)
}

model AllianceFacult {
  id            Int             @id @default(autoincrement())
  name          String
  smile         String
  alliance      Alliance        @relation(fields: [id_alliance], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_alliance   Int
  BalanceFacult BalanceFacult[]
}

model BalanceFacult {
  id        Int            @id @default(autoincrement())
  coin      AllianceCoin   @relation(fields: [id_coin], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_coin   Int
  facult    AllianceFacult @relation(fields: [id_facult], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_facult Int
  amount    Float          @default(0)
}

model AllianceShop {
  id            Int                    @id @default(autoincrement())
  name          String
  image         String?
  id_alliance   Int
  id_user_owner Int                    @default(0)
  Alliance      Alliance               @relation(fields: [id_alliance], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Shop_category AllianceShopCategory[]
}

model AllianceShopCategory {
  id               Int                @id @default(autoincrement())
  name             String
  image            String?
  id_alliance_shop Int
  Alliance_Shop    AllianceShop       @relation(fields: [id_alliance_shop], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AllianceShopItem {
  id                    Int                     @id @default(autoincrement())
  name                  String
  description           String?
  image                 String?
  price                 Float
  id_coin               Int
  limit                 Int
  limit_tr              Boolean
  inventory_tr          Boolean @default(true)
  hidden                Boolean @default(false)
  id_shop               Int
  InventoryAllianceShop InventoryAllianceShop[]
}

model InventoryAllianceShop {
  id      Int              @id @default(autoincrement())
  id_user Int
  id_item Int
  item    AllianceShopItem @relation(fields: [id_item], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [id_user], references: [id], onDelete: Cascade)
}
